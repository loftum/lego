<?xml version="1.0"?>
<doc>
    <assembly>
        <name>pigpio-dotnet</name>
    </assembly>
    <members>
        <member name="T:Unosquare.PiGpio.Board">
            <summary>
            Represents the Raspberry Pi Board and provides
            access to all GPIO initialization and functionality
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.Board.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Unosquare.PiGpio.Board"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.Board.IsAvailable">
            <summary>
            Gets a value indicating whether the board has been initialized
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.Board.HardwareRevision">
            <summary>
            Gets the hardware revision number.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.Board.LibraryVersion">
            <summary>
            Gets the library version number.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.Board.BoardType">
            <summary>
            Gets the type of the board. See the <see cref="T:Unosquare.PiGpio.NativeEnums.BoardType"/> enumeration.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.Board.Pins">
            <summary>
            Provides access to the pin collection.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.Board.GpioPads">
            <summary>
            Provides access to the electrical pads.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.Board.BankA">
            <summary>
            Provides access to GPIO bank 1 (or A)
            consisting of GPIO 0 to 31.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.Board.BankB">
            <summary>
            Provides access to GPIO bank 2 (or B)
            consisting of GPIO 32 to 53.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.Board.Timing">
            <summary>
            Provides timing and date functions
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.Board.Peripherals">
            <summary>
            Provides peripheral communication buses available to the board
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.Board.Waves">
            <summary>
            Provides a service to build and send waveforms
            with precisions of a few microseconds ~5us per pulse.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.Board.Release">
            <summary>
            Releases board resources
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.BoardException">
            <summary>
            Represents a PiGpio Library call exception
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Unosquare.PiGpio.BoardException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.PiGpio.BoardException"/> class.
            </summary>
            <param name="resultCode">The result code.</param>
        </member>
        <member name="P:Unosquare.PiGpio.BoardException.ResultCode">
            <summary>
            Gets the result code.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.BoardException.ValidateResult(Unosquare.PiGpio.NativeEnums.ResultCode)">
            <summary>
            Validates the result. This call is typically used for Setter methods
            </summary>
            <param name="resultCode">The result code.</param>
            <returns>The Result Code</returns>
        </member>
        <member name="M:Unosquare.PiGpio.BoardException.ValidateResult(System.Int32)">
            <summary>
            Validates the result. This call is typically used for Getter methods.
            </summary>
            <param name="resultCode">The result code.</param>
            <returns>The integer result</returns>
        </member>
        <member name="M:Unosquare.PiGpio.BoardException.GetStarndardMessage(System.Int32)">
            <summary>
            Gets the starndard message.
            </summary>
            <param name="resultCode">The result code.</param>
            <returns>The standard corresponding error message based on the result code.</returns>
        </member>
        <member name="T:Unosquare.PiGpio.Constants">
            <summary>
            Defines the constants used by the libpigpio library
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.Constants.GetBoardType(System.Int64)">
            <summary>
            Gets the type of the board.
            see: https://www.raspberrypi.org/documentation/hardware/raspberrypi/revision-codes/README.md
            </summary>
            <param name="hardwareRevision">The hardware revision.</param>
            <returns>The board type</returns>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.BoardPeripheralsService">
            <summary>
            Provides methods to open communication links on the available
            buses such as SPI, I2C, and UART
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardPeripheralsService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.PiGpio.ManagedModel.BoardPeripheralsService"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardPeripheralsService.OpenSpiChannel(Unosquare.PiGpio.NativeEnums.SpiChannelId,System.Int32,Unosquare.PiGpio.NativeEnums.SpiFlags)">
            <summary>
            Opens the given SPI channel.
            </summary>
            <param name="channel">The channel.</param>
            <param name="baudRate">The baud rate.</param>
            <param name="flags">The flags.</param>
            <returns>The peripheral service</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardPeripheralsService.OpenSpiChannel(Unosquare.PiGpio.NativeEnums.SpiChannelId,System.Int32)">
            <summary>
            Opens the given SPI channel using the default flags.
            </summary>
            <param name="channel">The channel.</param>
            <param name="baudRate">The baud rate.</param>
            <returns>The peripheral service</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardPeripheralsService.OpenSpiChannel(Unosquare.PiGpio.NativeEnums.SpiChannelId)">
            <summary>
            Opens the given SPI channel using the default flags and a baud rate of 512k bits per second.
            </summary>
            <param name="channel">The channel.</param>
            <returns>The peripheral service</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardPeripheralsService.OpenSoftSpiChannel(Unosquare.PiGpio.ManagedModel.GpioPin,Unosquare.PiGpio.ManagedModel.GpioPin,Unosquare.PiGpio.ManagedModel.GpioPin,Unosquare.PiGpio.ManagedModel.GpioPin,System.Int32,Unosquare.PiGpio.NativeEnums.SoftSpiFlags)">
            <summary>
            Opens a software based (bit-banged) SPI channel
            </summary>
            <param name="csPin">The cs pin.</param>
            <param name="misoPin">The miso pin.</param>
            <param name="mosiPin">The mosi pin.</param>
            <param name="clockPin">The clock pin.</param>
            <param name="baudRate">The baud rate.</param>
            <param name="flags">The flags.</param>
            <returns>The SPI channel</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardPeripheralsService.OpenSoftSpiChannel(Unosquare.PiGpio.ManagedModel.GpioPin,Unosquare.PiGpio.ManagedModel.GpioPin,Unosquare.PiGpio.ManagedModel.GpioPin,Unosquare.PiGpio.ManagedModel.GpioPin,System.Int32)">
            <summary>
            Opens a software based (bit-banged) SPI channel
            </summary>
            <param name="csPin">The cs pin.</param>
            <param name="misoPin">The miso pin.</param>
            <param name="mosiPin">The mosi pin.</param>
            <param name="clockPin">The clock pin.</param>
            <param name="baudRate">The baud rate.</param>
            <returns>The SPI channel</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardPeripheralsService.OpenSoftSpiChannel(Unosquare.PiGpio.ManagedModel.GpioPin,Unosquare.PiGpio.ManagedModel.GpioPin,Unosquare.PiGpio.ManagedModel.GpioPin,Unosquare.PiGpio.ManagedModel.GpioPin)">
            <summary>
            Opens a software based (bit-banged) SPI channel
            </summary>
            <param name="csPin">The cs pin.</param>
            <param name="misoPin">The miso pin.</param>
            <param name="mosiPin">The mosi pin.</param>
            <param name="clockPin">The clock pin.</param>
            <returns>The SPI channel</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardPeripheralsService.ScanI2cBus(Unosquare.PiGpio.NativeEnums.I2cBusId)">
            <summary>
            Scans the I2C bus for devices.
            </summary>
            <param name="bus">The bus.</param>
            <returns>A list of device addresses.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardPeripheralsService.ScanI2cBus">
            <summary>
            Scans the default I2C bus for devices.
            </summary>
            <returns>The found device addresses</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardPeripheralsService.OpenI2cDevice(Unosquare.PiGpio.NativeEnums.I2cBusId,System.Byte)">
            <summary>
            Opens an I2C device on the given bus.
            </summary>
            <param name="bus">The bus.</param>
            <param name="address">The address.</param>
            <returns>The I2C device</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardPeripheralsService.OpenI2cDevice(System.Byte)">
            <summary>
            Opens an I2C device on Bus 1 (the default I2C Bus).
            </summary>
            <param name="address">The address.</param>
            <returns>The I2C device</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardPeripheralsService.OpenSoftI2cBus(Unosquare.PiGpio.ManagedModel.GpioPin,Unosquare.PiGpio.ManagedModel.GpioPin,System.Int32)">
            <summary>
            Opens a software based I2C bus.
            </summary>
            <param name="dataPin">The data pin.</param>
            <param name="clockPin">The clock pin.</param>
            <param name="baudRate">The baud rate from 50 t 500,000 bits per second.</param>
            <returns>I2C Bus Accessor</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardPeripheralsService.OpenSoftI2cBus(Unosquare.PiGpio.ManagedModel.GpioPin,Unosquare.PiGpio.ManagedModel.GpioPin)">
            <summary>
            Opens a software based I2C bus.
            </summary>
            <param name="dataPin">The data pin.</param>
            <param name="clockPin">The clock pin.</param>
            <returns>I2C Bus Accessor</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardPeripheralsService.OpenUartPort(System.String,Unosquare.PiGpio.NativeEnums.UartRate)">
            <summary>
            Opens the specified UART port.
            </summary>
            <param name="portName">Name of the port.</param>
            <param name="baudRate">The baud rate.</param>
            <returns>The UART port object</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardPeripheralsService.OpenSoftSerialPort(Unosquare.PiGpio.ManagedModel.GpioPin,Unosquare.PiGpio.ManagedModel.GpioPin,Unosquare.PiGpio.NativeEnums.UartRate,System.Int32,System.Boolean)">
            <summary>
            Opens a software (bit-banged) serial port.
            </summary>
            <param name="receivePin">The receive pin.</param>
            <param name="transmitPin">The transmit pin.</param>
            <param name="baudRate">The baud rate.</param>
            <param name="dataBits">The data bits.</param>
            <param name="invert">if set to <c>true</c> [invert].</param>
            <returns>The software serial port</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardPeripheralsService.OpenSoftSerialPort(Unosquare.PiGpio.ManagedModel.GpioPin,Unosquare.PiGpio.ManagedModel.GpioPin,Unosquare.PiGpio.NativeEnums.UartRate)">
            <summary>
            Opens a software (bit-banged) serial port.
            </summary>
            <param name="receivePin">The receive pin.</param>
            <param name="transmitPin">The transmit pin.</param>
            <param name="baudRate">The baud rate.</param>
            <returns>The software serial port</returns>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.BoardTimingService">
            <summary>
            Provides timing, date and delay functions.
            Also provides access to registered timers.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardTimingService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.PiGpio.ManagedModel.BoardTimingService"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.BoardTimingService.Epoch">
            <summary>
            Gets the Linux epoch (Jan 1, 1970) in UTC.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.BoardTimingService.TimestampTick">
            <summary>
            Gets the timestamp tick.
            Useful to calculate offsets in Alerts or ISR callbacks
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.BoardTimingService.TimestampSeconds">
            <summary>
            Gets the number of seconds elapsed since Jan 1, 1970.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.BoardTimingService.TimestampMicroseconds">
            <summary>
            Gets a timestamp since Jan 1, 1970 in microceconds.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.BoardTimingService.Timestamp">
            <summary>
            Gets the elapsed time since Jan 1, 1970.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardTimingService.SleepMicros(System.Int64)">
            <summary>
            Sleeps for the given amount of microseconds.
            Waits of 100 microseconds or less use busy waits.
            Returns the real elapsed microseconds.
            </summary>
            <param name="microsecs">The micro seconds.</param>
            <returns>Returns the real elapsed microseconds.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardTimingService.Sleep(System.Double)">
            <summary>
            Sleeps for the specified milliseconds.
            </summary>
            <param name="millisecs">The milliseconds to sleep for.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardTimingService.Sleep(System.TimeSpan)">
            <summary>
            Sleeps for the specified time span.
            </summary>
            <param name="timeSpan">The time span to sleep for.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardTimingService.StartThread(System.Action,System.String)">
            <summary>
            Shortcut method to start a thread.
            It runs the thread automatically
            </summary>
            <param name="doWork">The do work.</param>
            <param name="threadName">Name of the thread.</param>
            <returns>
            A reference to the thread object.
            </returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardTimingService.StartThread(System.Action)">
            <summary>
            Shortcut method to start a thread.
            It runs the thread automatically
            </summary>
            <param name="doWork">The do work.</param>
            <returns>
            A reference to the thread object.
            </returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardTimingService.StartTimer(System.Int32,System.Action)">
            <summary>
            Starts a timer that executes a block of code with the given period.
            </summary>
            <param name="periodMilliseconds">The period in milliseconds.</param>
            <param name="callback">The callback.</param>
            <returns>A reference to a timer.</returns>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.BoardWaveService">
            <summary>
            Provides a a pin service to generate pulses with microsecond precision
            </summary>
            <seealso cref="T:Unosquare.PiGpio.ManagedModel.GpioPinServiceBase" />
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardWaveService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.PiGpio.ManagedModel.BoardWaveService"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.BoardWaveService.MaxPulses">
            <summary>
            Gets the maximum pulses allowable per wave.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.BoardWaveService.MaxDmaControlBlocks">
            <summary>
            Gets the maximum DMA control blocks per wave.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.BoardWaveService.MaxDurationMicroSecs">
            <summary>
            Gets the maximum duration of a wave in micro seconds.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.BoardWaveService.IsBusy">
            <summary>
            Gets a value indicating whether a waveform is being transmitted
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.BoardWaveService.CurrentWaveId">
            <summary>
            Gets the current wave identifier.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardWaveService.StopCurrent">
            <summary>
            Stops the current wave being transmitted.
            This is intended to stop waves that are generated with a cycling mode.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.BoardWaveService.CreateWave">
            <summary>
            Creates the wave.
            </summary>
            <returns>A wave builder object to create and transmit PWM waves</returns>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.GpioBank">
            <summary>
            Provides access to bulk GPIO read and write operations
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioBank.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.PiGpio.ManagedModel.GpioBank"/> class.
            </summary>
            <param name="bankNumber">The bank number. Must be 1 or 2.</param>
            <exception cref="T:System.ArgumentException">Bank number can only be either 1 or 2 - bankNumber</exception>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioBank.BankNumber">
            <summary>
            Gets the bank number; 1 or 2.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioBank.MinGpioIndex">
            <summary>
            Gets the minimum index of the gpio bank.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioBank.MaxGpioIndex">
            <summary>
            Gets the maximum index of the gpio bank.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioBank.GpioCount">
            <summary>
            Gets the number of gpio pins for this bank.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioBank.ToBinLiteral(System.Collections.BitArray)">
            <summary>
            Returns a series of 0s and 1s from MSB to LSB.
            Please note the output of the Bit Array is reversed.
            </summary>
            <param name="bits">The bits.</param>
            <returns>A string containing 0s and 1s</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioBank.ToHexLiteral(System.Byte[])">
            <summary>
            Returns a series of hexadecimal chars from MSB to LSB.
            Please note the output of the byte array is reversed.
            </summary>
            <param name="bytes">The bytes.</param>
            <returns>A string containing the hexadecimal chars</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioBank.ClearBits(Unosquare.PiGpio.NativeEnums.BitMask)">
            <summary>
            Clears the bits according to the bit mask.
            For bank 1, the starting index is GPIO 00.
            For bank 2, the starting index is GPIO 32.
            This means that for bank 2, bit 33 is addressed as Bit01 in the bit mask.
            </summary>
            <param name="bitMask">The bit mask.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioBank.SetBits(Unosquare.PiGpio.NativeEnums.BitMask)">
            <summary>
            Sets the bits according to the bit mask.
            For bank 1, the starting index is GPIO 00.
            For bank 2, the starting index is GPIO 32.
            This means that for bank 2, bit 33 is addressed as Bit01 in the bit mask.
            </summary>
            <param name="bitMask">The bit mask.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioBank.ReadValue">
            <summary>
            Reads the value of all the GPIO pins at once as an unsigned, 32-bit integer.
            </summary>
            <returns>The current value of all pins</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioBank.ReadBytes">
            <summary>
            Reads the value of all the GPIO pins at once as an array of 4 bytes.
            The 0th index of the result is the Least Significant Byte (low index pins pins).
            The 3rd index of the result is the Most Significant Byte (high index pins)
            </summary>
            <returns>The bytes that were read</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioBank.ReadBits">
            <summary>
            Reads the value of all the GPIO pins at once, where the 0th index of the array
            is the lowest pin index (LSB) and the 31st index of the array is the highes pin index (MSB)
            </summary>
            <returns>The bits read</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioBank.ReadBinLiteral">
            <summary>
            Reads from the bank and returns a series of 0s and 1s from MSB to LSB.
            Please note the output of the Bit Array is reversed so that the MSB is the first character.
            </summary>
            <returns>A string containing 0s and 1s</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioBank.ReadHexLiteral">
            <summary>
            Reads from the bank and returns a series of hexadecimal chars from MSB to LSB.
            Please note the output of the byte array is reversed so that the left-most characters are the MSB.
            </summary>
            <returns>A string containing the hexadecimal chars</returns>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.GpioPad">
            <summary>
            Represents an electrical pad which groups
            GPIO pins and has configurable electrical drive strength.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPad.#ctor(Unosquare.PiGpio.NativeEnums.GpioPadId)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.PiGpio.ManagedModel.GpioPad"/> class.
            </summary>
            <param name="padId">The pad identifier.</param>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPad.PadId">
            <summary>
            Gets the electrical pad identifier.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPad.Pad">
            <summary>
            Gets electrical pad object.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPad.PadStrength">
            <summary>
            Gets or sets the electrical pad strength.
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.GpioPadCollection">
            <summary>
            A collection of GPIO electrical pads
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPadCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.PiGpio.ManagedModel.GpioPadCollection"/> class.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPadCollection.CreateInternalCollection">
            <summary>
            Creates the internal collection.
            </summary>
            <returns>The items in the collection</returns>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.GpioPin">
            <summary>
            A class representing a GPIO port (pin)
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPin.#ctor(Unosquare.PiGpio.NativeEnums.SystemGpio)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.PiGpio.ManagedModel.GpioPin"/> class.
            </summary>
            <param name="gpio">The gpio.</param>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPin.PinNumber">
            <summary>
            Gets the BCM pin identifier.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPin.PinGpio">
            <summary>
            Gets the pin number as a system GPIO Identifier.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPin.IsUserGpio">
            <summary>
            Gets a value indicating whether this pin is a user gpio (0 to 31)
            and also available on the current board type.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPin.PadId">
            <summary>
            Gets the electrical pad this pin belongs to.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPin.PullMode">
            <summary>
            Gets or sets the resistor pull mode in input mode.
            You typically will need to set this to pull-up mode
            for most sensors to perform reliable reads.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPin.Direction">
            <summary>
            Gets or sets the direction of the pin.
            </summary>
            <value>
            The direction.
            </value>
            <exception cref="T:System.InvalidOperationException">Unable to set the pin mode to an alternative function.</exception>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPin.Mode">
            <summary>
            Gets the current pin mode.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPin.Value">
            <summary>
            Gets or sets the digital value of the pin.
            This call actively reads or writes the pin.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPin.Alerts">
            <summary>
            Provides GPIO change alert services.
            This provides more sophisticated notification settings
            but it is based on sampling.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPin.Interrupts">
            <summary>
            Provides GPIO Interrupt Service Routine services.
            This is hardware-based input-only notifications.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPin.Servo">
            <summary>
            Gets the servo pin service.
            This is a standard 50Hz PWM servo that operates
            in pulse widths between 500 and 2500 microseconds.
            Use the PWM service instead if you wish further flexibility.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPin.SoftPwm">
            <summary>
            Provides a sfotware based PWM pulse generator.
            This and the servo functionality use the DMA and PWM or PCM peripherals
            to control and schedule the pulse lengths and dutycycles. Using hardware based
            PWM is preferred.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPin.Clock">
            <summary>
            Gets a hardware-based clock service. A clock channel spans multiple
            pins and therefore, clock frequency is not necessarily a per-pin setting.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPin.Pwm">
            <summary>
            Gets the hardware-based PWM services associated to the pin.
            Hardware PWM groups several pins by their PWM channel.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPin.Pulsate(System.Int32,System.Boolean)">
            <summary>
            Pulsates the pin for the specified micro seconds.
            The value is the start value of the pulse.
            </summary>
            <param name="microSecs">The micro secs.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPin.Read">
            <summary>
            The fastest way to read from the pin.
            No error checking is performed.
            </summary>
            <returns>Returns a 0 or a 1 for success. A negative number for error.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPin.Write(System.Int32)">
            <summary>
            The fastest way to write to the pin.
            Anything non-zero is a high. No error checking is performed.
            </summary>
            <param name="value">The value.</param>
            <returns>The result code. 0 (OK) for success.</returns>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.GpioPinAlertService">
            <summary>
            Provides GPIO pin functionality to report on alerts based
            on sampling of 5 microseconds approximately.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinAlertService.#ctor(Unosquare.PiGpio.ManagedModel.GpioPin)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.PiGpio.ManagedModel.GpioPinAlertService"/> class.
            </summary>
            <param name="pin">The pin.</param>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPinAlertService.TimeoutMilliseconds">
            <summary>
            Gets or sets the watchdog timeout milliseconds.
            When no changes are detected for this amount of time,
            the callback returns with a no level change.
            </summary>
            <value>
            The timeout in milliseconds.
            </value>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPinAlertService.GlitchFilterSteadyMicros">
            <summary>
            Gets the glitch filter steady microseconds.
            Use <see cref="M:Unosquare.PiGpio.ManagedModel.GpioPinAlertService.ApplyGlitchFilter(System.Int32)"/> to set.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPinAlertService.NoiseFilterSteadyMicros">
            <summary>
            Gets the noise filter steady microseconds.
            Use <see cref="M:Unosquare.PiGpio.ManagedModel.GpioPinAlertService.ApplyNoiseFilter(System.Int32,System.Int32)"/> to set.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPinAlertService.NoiseFilterActiveMicros">
            <summary>
            Gets the noise filter active microseconds.
            Use <see cref="M:Unosquare.PiGpio.ManagedModel.GpioPinAlertService.ApplyNoiseFilter(System.Int32,System.Int32)"/> to set.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinAlertService.ApplyGlitchFilter(System.Int32)">
            <summary>
            Applies a glitch filter to alert triggering.
            Prevents reporting signals that are not steady for at least the given number of microseconds.
            </summary>
            <param name="steadyMicroseconds">The steady microseconds.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinAlertService.ResetGlitchFilter">
            <summary>
            Resets the glitch filter.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinAlertService.ApplyNoiseFilter(System.Int32,System.Int32)">
            <summary>
            Applies a noise filter to alert triggering.
            Level changes on the GPIO are ignored until a level which has
            been stable for <paramref name="steadyMicroseconds"/> microseconds is detected.  Level changes
            on the GPIO are then reported for <paramref name="activeMicroseconds"/> microseconds after
            which the process repeats.
            </summary>
            <param name="steadyMicroseconds">The steady microseconds.</param>
            <param name="activeMicroseconds">The active microseconds.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinAlertService.ResetNoiseFilter">
            <summary>
            Resets the noise filter.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinAlertService.Start(Unosquare.PiGpio.NativeTypes.PiGpioAlertDelegate)">
            <summary>
            Start the alert callbacks.
            </summary>
            <param name="callback">The callback.</param>
            <exception cref="T:System.NotSupportedException">IsUserGpio is false</exception>
            <exception cref="T:System.ArgumentNullException">callback - ClearAlertCallback</exception>
            <exception cref="T:System.ArgumentException">A callback is already registered. Clear the current callback before registering a new one. - callback</exception>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinAlertService.Stop">
            <summary>
            Clears the alert callback and stops reporting changes.
            </summary>
            <exception cref="T:System.NotSupportedException">IsUserGpio is false</exception>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinAlertService.ResolveAvailable">
            <summary>
            Resolves the availability of this service for the associated pin.
            </summary>
            <returns>
            True when the service is deemed as available.
            </returns>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.GpioPinClockService">
            <summary>
            Provides a hardware clock services on the associated pin.
            Only a few pins support this.
            </summary>
            <seealso cref="T:Unosquare.PiGpio.ManagedModel.GpioPinServiceBase" />
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinClockService.#ctor(Unosquare.PiGpio.ManagedModel.GpioPin)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.PiGpio.ManagedModel.GpioPinClockService"/> class.
            </summary>
            <param name="pin">The pin.</param>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPinClockService.ClockChannel">
            <summary>
            Gets the clock channel.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinClockService.Start(System.Int32)">
            <summary>
            Starts the hardware clock on this pin.
            All pins sharing the clock channel and running in clock mode will get theis new frequency.
            The frequency must be 0 (off) or 4689-250,000,000 (250M) Hz.
            </summary>
            <param name="frequency">The frequency. 0 (off) or 4689-250000000 (250M)</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinClockService.Stop">
            <summary>
            Stops the hardware clock on this pin
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinClockService.ResolveAvailable">
            <summary>
            Resolves the availability of this service for the associated pin.
            </summary>
            <returns>
            True when the service is deemed as available.
            </returns>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.GpioPinCollection">
            <summary>
            Represents a dictionary of all GPIO Pins
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.PiGpio.ManagedModel.GpioPinCollection"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPinCollection.Item(Unosquare.PiGpio.NativeEnums.SystemGpio)">
            <summary>
            Gets the <see cref="T:Unosquare.PiGpio.ManagedModel.GpioPin"/> with the specified gpio.
            </summary>
            <value>
            The <see cref="T:Unosquare.PiGpio.ManagedModel.GpioPin"/>.
            </value>
            <param name="gpio">The gpio.</param>
            <returns>The pin object</returns>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPinCollection.Item(Unosquare.PiGpio.NativeEnums.UserGpio)">
            <summary>
            Gets the <see cref="T:Unosquare.PiGpio.ManagedModel.GpioPin"/> with the specified gpio.
            </summary>
            <value>
            The <see cref="T:Unosquare.PiGpio.ManagedModel.GpioPin"/>.
            </value>
            <param name="gpio">The gpio.</param>
            <returns>The pin object</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinCollection.CreateInternalCollection">
            <summary>
            Creates the internal collection.
            </summary>
            <returns>The items in the collection</returns>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.GpioPinInterruptService">
            <summary>
            Provides Interrupt Service Routine callback services on the GPIO pin.
            </summary>
            <seealso cref="T:Unosquare.PiGpio.ManagedModel.GpioPinServiceBase" />
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPinInterruptService.EdgeDetection">
            <summary>
            Gets or sets the edge detection strategy.
            </summary>
            <exception cref="T:System.InvalidOperationException">EdgeDetection cannot be set when callbacks have started.</exception>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPinInterruptService.TimeoutMilliseconds">
            <summary>
            Gets or sets the ISR timeout milliseconds.
            When no changes are detected for this amount of time,
            the callback returns with a no level change.
            </summary>
            <value>
            The timeout in milliseconds.
            </value>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinInterruptService.Start(Unosquare.PiGpio.NativeTypes.PiGpioIsrDelegate,Unosquare.PiGpio.NativeEnums.EdgeDetection,System.Int32)">
            <summary>
            Starts the hardware ISR callbacks.
            </summary>
            <param name="callback">The callback.</param>
            <param name="edgeDetection">The edge detection.</param>
            <param name="timeoutMilliseconds">The timeout milliseconds.</param>
            <exception cref="T:System.ArgumentNullException">callback - Use Stop first.</exception>
            <exception cref="T:System.ArgumentException">A callback is already registered. Clear the current callback before registering a new one. - callback</exception>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinInterruptService.Start(Unosquare.PiGpio.NativeTypes.PiGpioIsrDelegate)">
            <summary>
            Starts the hardware ISR callbacks.
            </summary>
            <param name="callback">The callback.</param>
            <exception cref="T:System.NotSupportedException">IsUserGpio is false</exception>
            <exception cref="T:System.ArgumentNullException">callback - ClearAlertCallback</exception>
            <exception cref="T:System.ArgumentException">A callback is already registered. Clear the current callback before registering a new one. - callback</exception>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinInterruptService.Stop">
            <summary>
            Stops the hardware ISR callbacks.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinInterruptService.ResolveAvailable">
            <summary>
            Resolves the availability of this service for the associated pin.
            </summary>
            <returns>
            True when the service is deemed as available.
            </returns>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.GpioPinPwmService">
            <summary>
            Provides hardware-based PWM services on the pin
            </summary>
            <seealso cref="T:Unosquare.PiGpio.ManagedModel.GpioPinServiceBase" />
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPinPwmService.Range">
            <summary>
            Gets the range of the duty cycle.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPinPwmService.Frequency">
            <summary>
            Gets the frequency.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPinPwmService.Channel">
            <summary>
            Gets the PWM channel, 0 or 1. A negative number mans there is no associated PWM channel.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinPwmService.Start(System.Int32,System.Int32)">
            <summary>
            Starts PWM hardware pulses.
            Frequencies above 30MHz are unlikely to work.
            </summary>
            <param name="frequency">The frequency. 0 (off) or 1-125000000 (125M)</param>
            <param name="dutyCycle">0 (off) to 1000000 (1M)(fully on)</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinPwmService.Stop">
            <summary>
            Stops PWM hardware pulses.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinPwmService.ResolveAvailable">
            <summary>
            Resolves the availability of this service for the associated pin.
            </summary>
            <returns>
            True when the service is deemed as available.
            </returns>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.GpioPinServiceBase">
            <summary>
            Provides a base implementation of a GPIO Pin Service
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinServiceBase.#ctor(Unosquare.PiGpio.ManagedModel.GpioPin)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.PiGpio.ManagedModel.GpioPinServiceBase"/> class.
            </summary>
            <param name="pin">The pin.</param>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPinServiceBase.IsAvailable">
            <summary>
            Gets a value indicating whether this service is available on the associated pin.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPinServiceBase.Pin">
            <summary>
            Gets the associated pin.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinServiceBase.ResolveAvailable">
            <summary>
            Resolves the availability of this service for the associated pin.
            </summary>
            <returns>True when the service is deemed as available.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinServiceBase.ValidateAvailable">
            <summary>
            Validates that this service is available. Otherwise, a <see cref="T:System.NotSupportedException"/> is thrown.
            </summary>
            <exception cref="T:System.NotSupportedException">Only pins marked as IsUserGpio support this service.</exception>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.GpioPinServoService">
            <summary>
            Provides a standard servo PWM service running at 50Hz.
            The pulse width must be 0, or a number beween 500 and 2500.
            </summary>
            <seealso cref="T:Unosquare.PiGpio.ManagedModel.GpioPinServiceBase" />
        </member>
        <member name="F:Unosquare.PiGpio.ManagedModel.GpioPinServoService.PulseWidthMin">
            <summary>
            The pulse width minimum in microseconds
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.ManagedModel.GpioPinServoService.PulseWidthMax">
            <summary>
            The pulse width maximum in microseconds
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.ManagedModel.GpioPinServoService.PulseWidthRange">
            <summary>
            The pulse range difference in microseconds
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPinServoService.PulseWidth">
            <summary>
            Gets or sets the width of the pulse in microseconds.
            Value must be between 500 and 2500 microseconds.
            Setting to 0 will turn off the PWM.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPinServoService.PositionPercent">
            <summary>
            Gets or sets the pulse width as a position percent for 0.0 to 1.0.
            Use -1.0 to turn off the PWM pulses.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinServoService.ResolveAvailable">
            <summary>
            Resolves the availability of this service for the associated pin.
            </summary>
            <returns>
            True when the service is deemed as available.
            </returns>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.GpioPinSoftPwmService">
            <summary>
            Provides a software-based PWM service on the associated pin.
            </summary>
            <seealso cref="T:Unosquare.PiGpio.ManagedModel.GpioPinServiceBase" />
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinSoftPwmService.#ctor(Unosquare.PiGpio.ManagedModel.GpioPin)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.PiGpio.ManagedModel.GpioPinSoftPwmService"/> class.
            </summary>
            <param name="pin">The pin.</param>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPinSoftPwmService.Range">
            <summary>
            Gets or sets the range of the duty cycle.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPinSoftPwmService.DutyCycle">
            <summary>
            Gets or sets the duty cycle. Setting this property starts the PWM pulses.
            The default range is 255.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.GpioPinSoftPwmService.Frequency">
            <summary>
            Gets or sets the frequency (in Hz) at which the PWM runs.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.GpioPinSoftPwmService.ResolveAvailable">
            <summary>
            Resolves the availability of this service for the associated pin.
            </summary>
            <returns>
            True when the service is deemed as available.
            </returns>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.I2cDevice">
            <summary>
            Represents a peripheral connected via the I2C/SM bus.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Unosquare.PiGpio.ManagedModel.I2cDevice.DefaultBus">
            <summary>
            The default bus is I2C bus 1.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.I2cDevice.#ctor(Unosquare.PiGpio.NativeEnums.I2cBusId,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.PiGpio.ManagedModel.I2cDevice" /> class.
            </summary>
            <param name="busId">The bus.</param>
            <param name="address">The address.</param>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.I2cDevice.UseCombinedTransactions">
             <summary>
             This sets the I2C (i2c-bcm2708) module "use combined transactions"
             parameter on or off.
            
             NOTE: when the flag is on a write followed by a read to the same
             slave address will use a repeated start (rather than a stop/start).
             </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.I2cDevice.BusId">
            <summary>
            Gets the bus identifier.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.I2cDevice.Address">
            <summary>
            Gets the devide address on the bus.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.I2cDevice.Handle">
            <summary>
            Gets the device handle.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.I2cDevice.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.I2cDevice.SetMode(Unosquare.PiGpio.NativeEnums.I2cQuickMode)">
            <summary>
            This sends a single bit (in the Rd/Wr bit) to the device associated
            with handle.
            </summary>
            <param name="mode">The mode (write is 0, read is 1)</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.I2cDevice.Write(System.Byte)">
            <summary>
            This sends a single byte to the device associated with handle.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.I2cDevice.Write(System.Byte,System.Byte)">
            <summary>
            This writes a single byte to the specified register of the device
            associated with handle.
            </summary>
            <param name="register">The register.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.I2cDevice.Write(System.Byte,System.UInt16)">
            <summary>
            This writes a single 16 bit word to the specified register of the device
            associated with handle.
            </summary>
            <param name="register">The register.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.I2cDevice.Write(System.Byte,System.Int16)">
            <summary>
            This writes a single 16 bit word to the specified register of the device
            associated with handle.
            </summary>
            <param name="register">The register.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.I2cDevice.Write(System.Byte,System.Byte[])">
            <summary>
            This writes up to 32 bytes to the specified register of the device
            associated with handle.
            </summary>
            <param name="register">The register.</param>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.I2cDevice.Write(System.Byte,System.Byte[],System.Int32)">
            <summary>
            This writes 1 to 32 bytes to the specified register of the device
            associated with handle.
            </summary>
            <param name="register">The register.</param>
            <param name="buffer">The buffer.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.I2cDevice.Write(System.Byte[])">
            <summary>
            This writes a sequence of bytes without control bits between blocks.
            This operation sends the bytes in its raw form consecutively.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.I2cDevice.ReadByte">
            <summary>
            This reads a single byte from the device associated with handle.
            </summary>
            <returns>The value read</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.I2cDevice.ReadByte(System.Byte)">
            <summary>
            This reads a single byte from the specified register of the device
            associated with handle.
            </summary>
            <param name="register">The register.</param>
            <returns>The read value</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.I2cDevice.ReadWord(System.Byte)">
            <summary>
            This reads a single 16 bit word from the specified register of the device
            associated with handle.
            </summary>
            <param name="register">The register.</param>
            <returns>The word data</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.I2cDevice.ReadBlock(System.Byte)">
            <summary>
            This reads a block of up to 32 bytes from the specified register of
            the device associated with handle.
            The amount of returned data is set by the device.
            </summary>
            <param name="register">The register.</param>
            <returns>The data read from the device</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.I2cDevice.ReadBlock(System.Byte,System.Int32)">
            <summary>
            This reads count bytes from the specified register of the device
            associated with handle .  The count may be 1-32.
            </summary>
            <param name="register">The register.</param>
            <param name="count">The count.</param>
            <returns>The data read from the device</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.I2cDevice.ReadRaw(System.Int32)">
            <summary>
            This reads count bytes from the raw device into buf.
            </summary>
            <param name="count">The count.</param>
            <returns>The raw byte data</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.I2cDevice.Transfer(System.Byte,System.Byte[])">
             <summary>
             This writes data bytes to the specified register of the device
             associated with handle and reads a device specified number
             of bytes of data in return.
            
             The SMBus 2.0 documentation states that a minimum of 1 byte may be
             sent and a minimum of 1 byte may be received.  The total number of
             bytes sent/received must be 32 or less.
             </summary>
             <param name="register">The register.</param>
             <param name="buffer">The buffer.</param>
             <returns>The bytes that were read</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.I2cDevice.ScanBus(Unosquare.PiGpio.NativeEnums.I2cBusId)">
            <summary>
            Scans the bus for available devices.
            </summary>
            <param name="bus">The bus.</param>
            <returns>The devices that were found on the given bus</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.I2cDevice.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.SoftI2cBus">
            <summary>
            Provides a software based (bit-banged) I2C bus on 2 pins
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Unosquare.PiGpio.ManagedModel.SoftI2cBus.DefaultBaudRate">
            <summary>
            The default baud rate for a software-based I2C bus
            Baud rate can go up to 500kbits per second.
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.ManagedModel.SoftI2cBus.IsDisposed">
            <summary>
            To detect redundant calls
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SoftI2cBus.#ctor(Unosquare.PiGpio.ManagedModel.GpioPin,Unosquare.PiGpio.ManagedModel.GpioPin,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.PiGpio.ManagedModel.SoftI2cBus"/> class.
            </summary>
            <param name="dataPin">The data pin.</param>
            <param name="clockPin">The clock pin.</param>
            <param name="baudRate">The baud rate.</param>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.SoftI2cBus.Handle">
            <summary>
            Gets or the I2C bus handle. This points to the SDA (data) pin of the I2C bus
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.SoftI2cBus.DataPin">
            <summary>
            Gets the data pin.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.SoftI2cBus.ClockPin">
            <summary>
            Gets the clock pin.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.SoftI2cBus.BaudRate">
            <summary>
            Gets the baud rate.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SoftI2cBus.Write(System.Byte,System.Byte[])">
            <summary>
            Writes data to the specified address.
            </summary>
            <param name="address">The address.</param>
            <param name="buffer">The buffer. Recommended 32 bytes max.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SoftI2cBus.Read(System.Byte,System.Int32)">
            <summary>
            Reads data from the specified address.
            </summary>
            <param name="address">The address.</param>
            <param name="count">The count. Recommended 32 as maximum</param>
            <returns>The byte array that was read.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SoftI2cBus.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SoftI2cBus.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.SoftSerialPort">
            <summary>
            Provides a software based (bit-banged Serial Port)
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SoftSerialPort.#ctor(Unosquare.PiGpio.ManagedModel.GpioPin,Unosquare.PiGpio.ManagedModel.GpioPin,Unosquare.PiGpio.NativeEnums.UartRate,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.PiGpio.ManagedModel.SoftSerialPort"/> class.
            </summary>
            <param name="receivePin">The receive pin.</param>
            <param name="transmitPin">The transmit pin.</param>
            <param name="baudRate">The baud rate.</param>
            <param name="dataBits">The data bits.</param>
            <param name="invert">if set to <c>true</c> [invert].</param>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.SoftSerialPort.StopBits">
            <summary>
            Gets or sets the stop bits. Defaults to 2 stop bits
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.SoftSerialPort.BaudRate">
            <summary>
            Gets the baud rate.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.SoftSerialPort.Invert">
            <summary>
            Gets a value indicating whether the IO is inverted.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.SoftSerialPort.DataBits">
            <summary>
            Gets the data bits.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.SoftSerialPort.Handle">
            <summary>
            Gets the handle.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SoftSerialPort.Read(System.Int32)">
            <summary>
            Reads up to count bytes.
            </summary>
            <param name="count">The count.</param>
            <returns>The bytes that were read</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SoftSerialPort.Write(System.Byte[])">
            <summary>
            Writes the specified buffer to the transmit pin as a free-form wave.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SoftSerialPort.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SoftSerialPort.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.SoftSpiChannel">
            <summary>
            Provides a bit-banged version of a SPI channel.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SoftSpiChannel.#ctor(Unosquare.PiGpio.ManagedModel.GpioPin,Unosquare.PiGpio.ManagedModel.GpioPin,Unosquare.PiGpio.ManagedModel.GpioPin,Unosquare.PiGpio.ManagedModel.GpioPin,System.Int32,Unosquare.PiGpio.NativeEnums.SoftSpiFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.PiGpio.ManagedModel.SoftSpiChannel"/> class.
            </summary>
            <param name="csPin">The cs pin.</param>
            <param name="misoPin">The miso pin.</param>
            <param name="mosiPin">The mosi pin.</param>
            <param name="clockPin">The clock pin.</param>
            <param name="baudRate">The baud rate.</param>
            <param name="flags">The flags.</param>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.SoftSpiChannel.Handle">
            <summary>
            Gets the handle.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.SoftSpiChannel.ChipSelectPin">
            <summary>
            Gets the chip select pin.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.SoftSpiChannel.MosiPin">
            <summary>
            Gets the MOSI pin.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.SoftSpiChannel.MisoPin">
            <summary>
            Gets the MISO pin.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.SoftSpiChannel.ClockPin">
            <summary>
            Gets the clock pin.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.SoftSpiChannel.BaudRate">
            <summary>
            Gets the baud rate.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.SoftSpiChannel.Flags">
            <summary>
            Gets the flags.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SoftSpiChannel.Transfer(System.Byte[])">
            <summary>
            Transfers the specified transmit buffer and returns the read bytes in a new buffer.
            </summary>
            <param name="transmitBuffer">The transmit buffer.</param>
            <returns>The received bytes as a result of writing to the ring buffer</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SoftSpiChannel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SoftSpiChannel.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.SpiChannel">
            <summary>
            Provides access to the Hardware SPI channels
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SpiChannel.#ctor(Unosquare.PiGpio.NativeEnums.SpiChannelId,System.Int32,Unosquare.PiGpio.NativeEnums.SpiFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.PiGpio.ManagedModel.SpiChannel"/> class.
            </summary>
            <param name="channel">The channel.</param>
            <param name="baudRate">The baud rate.</param>
            <param name="flags">The flags.</param>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.SpiChannel.BaudRate">
            <summary>
            Gets the baud rate in bits per second.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.SpiChannel.Channel">
            <summary>
            Gets the SPI channel identifier.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.SpiChannel.Flags">
            <summary>
            Gets the SPI flags this channel was opened with.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.SpiChannel.Handle">
            <summary>
            Gets the SPI channel handle.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SpiChannel.Read">
            <summary>
            Reads up to one tenth of the byte rate
            </summary>
            <returns>The bytes that were read</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SpiChannel.Read(System.Int32)">
            <summary>
            Reads up to the specified number of bytes.
            </summary>
            <param name="count">The count.</param>
            <returns>The bytes read</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SpiChannel.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads int the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <returns>The number of bytes read into the buffer</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SpiChannel.Write(System.Byte[])">
            <summary>
            Writes the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SpiChannel.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
            <returns>The number of bytes written</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SpiChannel.Transfer(System.Byte[])">
            <summary>
            Transfers the specified buffer and simultaneously reads the same amount of buyes in that send buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The bytes that were read</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SpiChannel.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.SpiChannel.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.UartPort">
            <summary>
            Provides libpigpio implementation of a UART port.
            Alternatively you can use the System.IO.Ports.SerialPort implementation.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.UartPort.#ctor(System.String,Unosquare.PiGpio.NativeEnums.UartRate)">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.PiGpio.ManagedModel.UartPort"/> class.
            </summary>
            <param name="portName">Name of the port.</param>
            <param name="baudRate">The baud rate.</param>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.UartPort.Handle">
            <summary>
            Gets the serial port handle.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.UartPort.BaudRate">
            <summary>
            Gets the baud rate.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.UartPort.PortName">
            <summary>
            Gets the name of the port.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.UartPort.Available">
            <summary>
            Gets the number of available bytes to read in the hardware buffer.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.UartPort.ReadByte">
            <summary>
            Reads the byte.
            </summary>
            <returns>The byte value. Null if no bytes were read</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.UartPort.Read">
            <summary>
            Reads this instance.
            </summary>
            <returns>A buffer containing the bytes</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.UartPort.Read(System.Int32)">
            <summary>
            Reads the specified number of bytes.
            </summary>
            <param name="count">The count.</param>
            <returns>A byte array of read bytes</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.UartPort.Write(System.Byte)">
            <summary>
            Writes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.UartPort.Write(System.Byte[],System.Int32)">
            <summary>
            Writes the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.UartPort.Write(System.Byte[])">
            <summary>
            Writes the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.UartPort.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.UartPort.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.PiGpio.ManagedModel.WaveBuilder">
            <summary>
            Provides methods to build and render waveforms.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.WaveBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Unosquare.PiGpio.ManagedModel.WaveBuilder"/> class.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.WaveBuilder.WaveId">
            <summary>
            Gets the wave identifier. Returns a negative number if the wave has not been prepared.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.WaveBuilder.IsPrepared">
            <summary>
            Gets a value indicating whether this wave is prepared in the DMA registers.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.ManagedModel.WaveBuilder.Pulses">
            <summary>
            Gets a read-only collection of pulses.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.WaveBuilder.AddPulse(Unosquare.PiGpio.NativeTypes.GpioPulse)">
            <summary>
            Adds a pulse.
            </summary>
            <param name="pulse">The pulse.</param>
            <exception cref="T:System.InvalidOperationException">When the wave has been prepared</exception>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.WaveBuilder.AddPulse(System.Int32,System.Collections.Generic.IEnumerable{Unosquare.PiGpio.NativeEnums.UserGpio},System.Collections.Generic.IEnumerable{Unosquare.PiGpio.NativeEnums.UserGpio})">
            <summary>
            Adds a pulse.
            </summary>
            <param name="durationMicroSecs">The duration micro secs.</param>
            <param name="onPins">The on pins.</param>
            <param name="offPins">The off pins.</param>
            <exception cref="T:System.InvalidOperationException">When the wave has been prepared</exception>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.WaveBuilder.AddPulse(System.Int32,System.Collections.Generic.IEnumerable{Unosquare.PiGpio.ManagedModel.GpioPin},System.Collections.Generic.IEnumerable{Unosquare.PiGpio.ManagedModel.GpioPin})">
            <summary>
            Adds a pulse.
            </summary>
            <param name="durationMicroSecs">The duration micro secs.</param>
            <param name="onPins">The on pins.</param>
            <param name="offPins">The off pins.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.WaveBuilder.AddPulse(System.Boolean,System.Int32,Unosquare.PiGpio.NativeEnums.UserGpio[])">
            <summary>
            Adds a pulse.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <param name="durationMicroSecs">The duration micro secs.</param>
            <param name="pins">The pins.</param>
            <exception cref="T:System.InvalidOperationException">When the wave has been prepared</exception>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.WaveBuilder.AddPulse(System.Boolean,System.Int32,Unosquare.PiGpio.ManagedModel.GpioPin[])">
            <summary>
            Adds a pulse.
            </summary>
            <param name="value">if set to <c>true</c> [value].</param>
            <param name="durationMicroSecs">The duration micro secs.</param>
            <param name="pins">The pins.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.WaveBuilder.AddCarrierPulses(System.Double,System.Double,Unosquare.PiGpio.NativeEnums.UserGpio[])">
            <summary>
            Adds carrier pulses to the wave (useful for stuff like Infrared pulses)
            </summary>
            <param name="frequency">The frequency.</param>
            <param name="durationMicroSecs">The duration micro secs.</param>
            <param name="pins">The pins.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.WaveBuilder.AddCarrierPulses(System.Double,System.Double,Unosquare.PiGpio.ManagedModel.GpioPin[])">
            <summary>
            Adds carrier pulses to the wave (useful for stuff like Infrared pulses)
            </summary>
            <param name="frequency">The frequency.</param>
            <param name="durationMicroSecs">The duration micro secs.</param>
            <param name="pins">The pins.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.WaveBuilder.AddCarrierPulses(System.Double,System.Double,System.Double,Unosquare.PiGpio.NativeEnums.UserGpio[])">
            <summary>
            Adds carrier pulses to the wave (useful for stuff like Infrared pulses)
            </summary>
            <param name="frequency">The frequency.</param>
            <param name="durationMicroSecs">The duration micro secs.</param>
            <param name="dutyCycle">The duty cycle.</param>
            <param name="pins">The pins.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.WaveBuilder.AddCarrierPulses(System.Double,System.Double,System.Double,Unosquare.PiGpio.ManagedModel.GpioPin[])">
            <summary>
            Adds carrier pulses to the wave (useful for stuff like Infrared pulses)
            </summary>
            <param name="frequency">The frequency.</param>
            <param name="durationMicroSecs">The duration micro secs.</param>
            <param name="dutyCycle">The duty cycle.</param>
            <param name="pins">The pins.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.WaveBuilder.ClearPulses">
            <summary>
            Clears all previously added pulses.
            </summary>
            <exception cref="T:System.InvalidOperationException">When the wave has been prepared</exception>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.WaveBuilder.Prepare">
            <summary>
            Prepares the waveform to be rendered by DMA
            </summary>
            <exception cref="T:System.ObjectDisposedException">When the wave has been disposed.</exception>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.WaveBuilder.Send(Unosquare.PiGpio.NativeEnums.WaveMode)">
            <summary>
            Begins rendering the waveform pulses.
            Do not forget to set the pin direction/mode as an output pin.
            The wave is automatically prepared if it has not been prepared before.
            </summary>
            <param name="mode">The mode.</param>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.WaveBuilder.Dispose">
            <summary>
            Stops and deletes the waveform if it is being tranferred. Releases the resources.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.WaveBuilder.PinsToBitMask(System.Collections.Generic.IEnumerable{Unosquare.PiGpio.NativeEnums.UserGpio})">
            <summary>
            Converts a collection of User GPIO pins to a bitmask.
            </summary>
            <param name="pins">The pins.</param>
            <returns>A bitmask with each pin as a position</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.WaveBuilder.GpioPinsToUserGpios(System.Collections.Generic.IEnumerable{Unosquare.PiGpio.ManagedModel.GpioPin})">
            <summary>
            Converts GPIO pins to their corresponding GpioEnumeration
            </summary>
            <param name="pins">The pins.</param>
            <returns>An array of UserGpio pins</returns>
        </member>
        <member name="M:Unosquare.PiGpio.ManagedModel.WaveBuilder.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="alsoManaged"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.AllocationMode">
            <summary>
            Enumerates the different memory allocation mode.
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.AllocationMode.Auto">
            <summary>
            The automatic allocation mode
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.AllocationMode.PageMap">
            <summary>
            The page map allocation mode
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.AllocationMode.MailBox">
            <summary>
            The mail box allocation mode
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.BitMask">
            <summary>
            Provides an enumeration of a 32-bit mask
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.None">
            <summary>An empty bitmask</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.All">
            <summary>An full bitmask</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit00">
            <summary>The bit at index 00, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit01">
            <summary>The bit at index 01, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit02">
            <summary>The bit at index 02, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit03">
            <summary>The bit at index 03, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit04">
            <summary>The bit at index 04, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit05">
            <summary>The bit at index 05, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit06">
            <summary>The bit at index 06, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit07">
            <summary>The bit at index 07, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit08">
            <summary>The bit at index 08, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit09">
            <summary>The bit at index 09, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit10">
            <summary>The bit at index 10, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit11">
            <summary>The bit at index 11, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit12">
            <summary>The bit at index 12, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit13">
            <summary>The bit at index 13, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit14">
            <summary>The bit at index 14, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit15">
            <summary>The bit at index 15, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit16">
            <summary>The bit at index 16, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit17">
            <summary>The bit at index 17, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit18">
            <summary>The bit at index 18, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit19">
            <summary>The bit at index 19, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit20">
            <summary>The bit at index 20, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit21">
            <summary>The bit at index 21, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit22">
            <summary>The bit at index 22, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit23">
            <summary>The bit at index 23, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit24">
            <summary>The bit at index 24, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit25">
            <summary>The bit at index 25, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit26">
            <summary>The bit at index 26, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit27">
            <summary>The bit at index 27, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit28">
            <summary>The bit at index 28, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit29">
            <summary>The bit at index 29, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit30">
            <summary>The bit at index 30, from right LSB to left MSB</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BitMask.Bit31">
            <summary>The bit at index 31, from right LSB to left MSB</summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.BoardType">
            <summary>
            Enumerates the different Raspberry Pi board types
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BoardType.Unknown">
            <summary>
            Unknown board type
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BoardType.Type1">
            <summary>
            Type 1 - Model B (original model)
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BoardType.Type2">
            <summary>
            Type 2 - Model A and B (revision 2)
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.BoardType.Type3">
            <summary>
            Type 3 - Model A+, B+, Pi Zero, Pi2B, Pi3B
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.ConfigFlags">
            <summary>
            Enumerates the different configuration flags
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ConfigFlags.DebugLevel0">
            <summary>
            The debug level0
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ConfigFlags.DebugLevel1">
            <summary>
            The debug level1
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ConfigFlags.DebugLevel2">
            <summary>
            The debug level2
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ConfigFlags.DebugLevel3">
            <summary>
            The debug level3
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ConfigFlags.AlertFrequency0">
            <summary>
            The alert frequency0
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ConfigFlags.AlertFrequency1">
            <summary>
            The alert frequency1
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ConfigFlags.AlertFrequency2">
            <summary>
            The alert frequency2
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ConfigFlags.AlertFrequency3">
            <summary>
            The alert frequency3
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ConfigFlags.RealTimePriority">
            <summary>
            The real time priority
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ConfigFlags.Stats">
            <summary>
            The stats
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ConfigFlags.NoSignalHandler">
            <summary>
            The no signal handler
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.CpuPeripheral">
            <summary>
            Defines the 2 different CPU peripherals for DMA
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.CpuPeripheral.Pwm">
            <summary>
            The Pulse-Width modulation peripheral
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.CpuPeripheral.Pcm">
            <summary>
            The Pulse-Code Modulation peripheral
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.DigitalValue">
            <summary>
            Enumerates the digital values. Equivalent to True and False
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.DigitalValue.False">
            <summary>
            The low value; low voltage or logical 0 (false)
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.DigitalValue.True">
            <summary>
            The high value; high voltage or logical 1 (true)
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.DmaChannel">
            <summary>
            Enumerates the different DMA channels
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.DmaChannel.Dma00">
            <summary>DMA Channel 0</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.DmaChannel.Dma01">
            <summary>DMA Channel 1</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.DmaChannel.Dma02">
            <summary>DMA Channel 2</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.DmaChannel.Dma03">
            <summary>DMA Channel 3</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.DmaChannel.Dma04">
            <summary>DMA Channel 4</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.DmaChannel.Dma05">
            <summary>DMA Channel 5</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.DmaChannel.Dma06">
            <summary>DMA Channel 6</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.DmaChannel.Dma07">
            <summary>DMA Channel 7</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.DmaChannel.Dma08">
            <summary>DMA Channel 8</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.DmaChannel.Dma09">
            <summary>DMA Channel 9</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.DmaChannel.Dma10">
            <summary>DMA Channel 10</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.DmaChannel.Dma11">
            <summary>DMA Channel 11</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.DmaChannel.Dma12">
            <summary>DMA Channel 12</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.DmaChannel.Dma13">
            <summary>DMA Channel 13</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.DmaChannel.Dma14">
            <summary>DMA Channel 14</summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.EdgeDetection">
            <summary>
            Defines the edge detection strategies
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.EdgeDetection.FallingEdge">
            <summary>
            The falling edge (from high to low voltage)
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.EdgeDetection.RisingEdge">
            <summary>
            The rising edge (from low to high voltage)
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.EdgeDetection.EitherEdge">
            <summary>
            Rising and falling edge detection strategy
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.FileModeFlags">
            <summary>
            Enumerates the different file acces modes
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.FileModeFlags.Read">
            <summary>
            The read mode flag
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.FileModeFlags.Write">
            <summary>
            The write mode flag
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.FileModeFlags.Append">
            <summary>
            The append mode flag
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.FileModeFlags.Create">
            <summary>
            The create mode flag
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.FileModeFlags.Truncate">
            <summary>
            The truncate mode flag
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.GpioPadId">
            <summary>
            Enumerates the GPIO (electrical) Pads
            0   @ 0-27
            1   @ 28-45
            2   @ 46-53
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPadId.Pad00To27">
            <summary>
            The pad of GPIO 0 to 27
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPadId.Pad28To45">
            <summary>
            The pad of GPIO 28 to 45
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPadId.Pad46To53">
            <summary>
            The pad of GPIO 46 to53
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.GpioPadStrength">
            <summary>
            Enumerates the different Pad Strengths in milli Amperes.
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPadStrength.PadStrength1mA">
            <summary>
            The pad strength 1 mA
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPadStrength.PadStrength2mA">
            <summary>
            The pad strength 2 mA
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPadStrength.PadStrength3mA">
            <summary>
            The pad strength 3 mA
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPadStrength.PadStrength4mA">
            <summary>
            The pad strength 4 mA
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPadStrength.PadStrength5mA">
            <summary>
            The pad strength 5 mA
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPadStrength.PadStrength6mA">
            <summary>
            The pad strength 6 mA
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPadStrength.PadStrength7mA">
            <summary>
            The pad strength 7 mA
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPadStrength.PadStrength8mA">
            <summary>
            The pad strength 8 mA
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPadStrength.PadStrength9mA">
            <summary>
            The pad strength 9 mA
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPadStrength.PadStrength10mA">
            <summary>
            The pad strength 10 mA
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPadStrength.PadStrength11mA">
            <summary>
            The pad strength 11mA
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPadStrength.PadStrength12mA">
            <summary>
            The pad strength 12 mA
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPadStrength.PadStrength13mA">
            <summary>
            The pad strength 13 mA
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPadStrength.PadStrength14mA">
            <summary>
            The pad strength 14 mA
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPadStrength.PadStrength15mA">
            <summary>
            The pad strength 15 mA
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPadStrength.PadStrength16mA">
            <summary>
            The pad strength 16 mA
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.GpioPullMode">
            <summary>
            Input GPIOS have pull-up, pull-down or no resistors.
            This enumeration defines the different resistor pull modes.
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPullMode.Off">
            <summary>
            No pull-up or pull-down mode.
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPullMode.Down">
            <summary>
            Pull-down resistor mode configuration
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.GpioPullMode.Up">
            <summary>
            Pull-up resistor mode configuration
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.I2cBusId">
            <summary>
            The Pi has 2 hardware SPI buses. Bus 0 and Bus 1.
            Bus 1 is the default one, accessible through the main P1 header.
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.I2cBusId.Bus0">
            <summary>
            The 0th I2c Bus
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.I2cBusId.Bus1">
            <summary>
            The 1st I2c Bus -- This is the default bus number on the Pi.
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.I2cQuickMode">
            <summary>
            Enumerates the quick modes
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.I2cQuickMode.Write">
            <summary>
            The write mode
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.I2cQuickMode.Read">
            <summary>
            The read mode
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.InterfaceFlags">
            <summary>
            Defines flags to enable or disable network
            interfaces
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.InterfaceFlags.DisableFifoInterface">
            <summary>
            The disable FIFO interface
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.InterfaceFlags.DisableSocketInterface">
            <summary>
            The disable socket interface
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.InterfaceFlags.LocalhostInterface">
            <summary>
            The localhost interface
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.LevelChange">
            <summary>
            Enumerates the different change states for edge detection
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.LevelChange.HighToLow">
            <summary>
            Change to low (a falling edge)
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.LevelChange.LowToHigh">
            <summary>
            Change to high (a rising edge)
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.LevelChange.NoChange">
            <summary>
            No level change (a watchdog timeout)
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.PinDirection">
            <summary>
            Enumerates the IO directions.
            This enumeration is compatible with the <see cref="T:Unosquare.PiGpio.NativeEnums.PinMode"/> enum.
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.PinDirection.Alternative">
            <summary>
            The pin is operating in an alternative mode.
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.PinDirection.Input">
            <summary>
            The input operating mode
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.PinDirection.Output">
            <summary>
            The output operating mode
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.PinMode">
            <summary>
            Pins can operate in different modes.
            This enumeration defines the fdifferent operation modes from 0 to 7.
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.PinMode.Input">
            <summary>
            The input operating mode
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.PinMode.Output">
            <summary>
            The output operating mode
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.PinMode.Alt5">
            <summary>
            The alt5 operating mode
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.PinMode.Alt4">
            <summary>
            The alt4 operating mode
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.PinMode.Alt0">
            <summary>
            The alt0 operating mode
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.PinMode.Alt1">
            <summary>
            The alt1 operating mode
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.PinMode.Alt2">
            <summary>
            The alt2 operating mode
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.PinMode.Alt3">
            <summary>
            The alt3 operating mode
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.ResultCode">
            <summary>
            Defines the different operation result codes from calling pigpio API.
            0 is OK. Anything negative is an error
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.Ok">
            <summary>OK result code</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.InitFailed">
            <summary>gpioInitialise failed</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadUserGpio">
            <summary>GPIO not 0-31</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadGpio">
            <summary>GPIO not 0-53</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadMode">
            <summary>mode not 0-7</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadLevel">
            <summary>level not 0-1</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadPud">
            <summary>pud not 0-2</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadPulsewidth">
            <summary>pulsewidth not 0 or 500-2500</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadDutycycle">
            <summary>dutycycle outside set range</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadTimer">
            <summary>timer not 0-9</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadMs">
            <summary>ms not 10-60000</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadTimetype">
            <summary>timetype not 0-1</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadSeconds">
            <summary>seconds &lt; 0</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadMicros">
            <summary>micros not 0-999999</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.TimerFailed">
            <summary>gpioSetTimerFunc failed</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadWdogTimeout">
            <summary>timeout not 0-60000</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.NoAlertFunc">
            <summary>DEPRECATED</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadClkPeriph">
            <summary>clock peripheral not 0-1</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadClkSource">
            <summary>DEPRECATED</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadClkMicros">
            <summary>clock micros not 1, 2, 4, 5, 8, or 10</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadBufMillis">
            <summary>buf millis not 100-10000</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadDutyrange">
            <summary>dutycycle range not 25-40000</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadSignum">
            <summary>signum not 0-63</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadPathname">
            <summary>can't open pathname</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.NoHandle">
            <summary>no handle available</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadHandle">
            <summary>unknown handle</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadIfFlags">
            <summary>ifFlags &gt; 4</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadChannel">
            <summary>DMA channel not 0-14</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadSocketPort">
            <summary>socket port not 1024-32000</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadFifoCommand">
            <summary>unrecognized fifo command</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadSecoChannel">
            <summary>DMA secondary channel not 0-6</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.NotInitialised">
            <summary>function called before gpioInitialise</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.Initialised">
            <summary>function called after gpioInitialise</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadWaveMode">
            <summary>waveform mode not 0-3</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadCfgInternal">
            <summary>bad parameter in gpioCfgInternals call</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadWaveBaud">
            <summary>baud rate not 50-250K(RX)/50-1M(TX)</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.TooManyPulses">
            <summary>waveform has too many pulses</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.TooManyChars">
            <summary>waveform has too many chars</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.NotSerialGpio">
            <summary>no bit bang serial read on GPIO</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadSerialStruc">
            <summary>bad (null) serial structure parameter</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadSerialBuf">
            <summary>bad (null) serial buf parameter</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.NotPermitted">
            <summary>GPIO operation not permitted</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.SomePermitted">
            <summary>one or more GPIO not permitted</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadWvscCommnd">
            <summary>bad WVSC subcommand</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadWvsmCommnd">
            <summary>bad WVSM subcommand</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadWvspCommnd">
            <summary>bad WVSP subcommand</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadPulselen">
            <summary>trigger pulse length not 1-100</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadScript">
            <summary>invalid script</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadScriptId">
            <summary>unknown script id</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadSerOffset">
            <summary>add serial data offset &gt; 30 minutes</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.GpioInUse">
            <summary>GPIO already in use</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadSerialCount">
            <summary>must read at least a byte at a time</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadParamNum">
            <summary>script parameter id not 0-9</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.DupTag">
            <summary>script has duplicate tag</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.TooManyTags">
            <summary>script has too many tags</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadScriptCmd">
            <summary>illegal script command</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadVarNum">
            <summary>script variable id not 0-149</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.NoScriptRoom">
            <summary>no more room for scripts</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.NoMemory">
            <summary>can't allocate temporary memory</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.SockReadFailed">
            <summary>socket read failed</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.SockWritFailed">
            <summary>socket write failed</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.TooManyParam">
            <summary>too many script parameters (&gt; 10)</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.ScriptNotReady">
            <summary>script initialising</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadTag">
            <summary>script has unresolved tag</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadMicsDelay">
            <summary>bad MICS delay (too large)</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadMilsDelay">
            <summary>bad MILS delay (too large)</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadWaveId">
            <summary>non existent wave id</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.TooManyCbs">
            <summary>No more CBs for waveform</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.TooManyOol">
            <summary>No more OOL for waveform</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.EmptyWaveform">
            <summary>attempt to create an empty waveform</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.NoWaveformId">
            <summary>no more waveforms</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.I2cOpenFailed">
            <summary>can't open I2C device</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.SerOpenFailed">
            <summary>can't open serial device</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.SpiOpenFailed">
            <summary>can't open SPI device</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadI2cBus">
            <summary>bad I2C bus</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadI2cAddr">
            <summary>bad I2C address</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadSpiChannel">
            <summary>bad SPI channel</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadFlags">
            <summary>bad i2c/spi/ser open flags</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadSpiSpeed">
            <summary>bad SPI speed</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadSerDevice">
            <summary>bad serial device name</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadSerSpeed">
            <summary>bad serial baud rate</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadParam">
            <summary>bad i2c/spi/ser parameter</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.I2cWriteFailed">
            <summary>i2c write failed</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.I2cReadFailed">
            <summary>i2c read failed</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadSpiCount">
            <summary>bad SPI count</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.SerWriteFailed">
            <summary>ser write failed</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.SerReadFailed">
            <summary>ser read failed</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.SerReadNoData">
            <summary>ser read no data available</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.UnknownCommand">
            <summary>unknown command</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.SpiXferFailed">
            <summary>spi xfer/read/write failed</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadPointer">
            <summary>bad (NULL) pointer</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.NoAuxSpi">
            <summary>no auxiliary SPI on Pi A or B</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.NotPwmGpio">
            <summary>GPIO is not in use for PWM</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.NotServoGpio">
            <summary>GPIO is not in use for servo pulses</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.NotHclkGpio">
            <summary>GPIO has no hardware clock</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.NotHpwmGpio">
            <summary>GPIO has no hardware PWM</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadHpwmFreq">
            <summary>hardware PWM frequency not 1-125M</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadHpwmDuty">
            <summary>hardware PWM dutycycle not 0-1M</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadHclkFreq">
            <summary>hardware clock frequency not 4689-250M</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadHclkPass">
            <summary>need password to use hardware clock 1</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.HpwmIllegal">
            <summary>illegal, PWM in use for main clock</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadDatabits">
            <summary>serial data bits not 1-32</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadStopbits">
            <summary>serial (half) stop bits not 2-8</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.MsgToobig">
            <summary>socket/pipe message too big</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadMallocMode">
            <summary>bad memory allocation mode</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.TooManySegs">
            <summary>too many I2C transaction segments</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadI2cSeg">
            <summary>an I2C transaction segment failed</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadSmbusCmd">
            <summary>SMBus command not supported by driver</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.NotI2cGpio">
            <summary>no bit bang I2C in progress on GPIO</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadI2cWlen">
            <summary>bad I2C write length</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadI2cRlen">
            <summary>bad I2C read length</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadI2cCmd">
            <summary>bad I2C command</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadI2cBaud">
            <summary>bad I2C baud rate, not 50-500k</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.ChainLoopCnt">
            <summary>bad chain loop count</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadChainLoop">
            <summary>empty chain loop</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.ChainCounter">
            <summary>too many chain counters</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadChainCmd">
            <summary>bad chain command</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadChainDelay">
            <summary>bad chain delay micros</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.ChainNesting">
            <summary>chain counters nested too deeply</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.ChainTooBig">
            <summary>chain is too long</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.Deprecated">
            <summary>deprecated function removed</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadSerInvert">
            <summary>bit bang serial invert not 0 or 1</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadEdge">
            <summary>bad ISR edge value, not 0-2</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadIsrInit">
            <summary>bad ISR initialisation</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadForever">
            <summary>loop forever must be last command</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadFilter">
            <summary>bad filter parameter</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadPad">
            <summary>bad pad number</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadStrength">
            <summary>bad pad drive strength</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.FilOpenFailed">
            <summary>file open failed</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadFileMode">
            <summary>bad file mode</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadFileFlag">
            <summary>bad file flag</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadFileRead">
            <summary>bad file read</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadFileWrite">
            <summary>bad file write</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.FileNotRopen">
            <summary>file not open for read</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.FileNotWopen">
            <summary>file not open for write</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadFileSeek">
            <summary>bad file seek</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.NoFileMatch">
            <summary>no files match pattern</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.NoFileAccess">
            <summary>no permission to access file</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.FileIsADir">
            <summary>file is a directory</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadShellStatus">
            <summary>bad shell return status</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadScriptName">
            <summary>bad script name</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadSpiBaud">
            <summary>bad SPI baud rate, not 50-500k</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.NotSpiGpio">
            <summary>no bit bang SPI in progress on GPIO</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.BadEventId">
            <summary>bad event id</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.CmdInterrupted">
            <summary>Used by Python</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.PigifErr0">
            <summary>Documentation not available</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.PigifErr99">
            <summary>Documentation not available</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.CustomErr0">
            <summary>Documentation not available</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.ResultCode.CustomErr999">
            <summary>Documentation not available</summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.SeekMode">
            <summary>
            Defines the different file seek modes.
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SeekMode.FromStart">
            <summary>
            From the start of the file
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SeekMode.FromCurrent">
            <summary>
            From the current file position
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SeekMode.FromEnd">
            <summary>
            From the end position (backwards)
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.SoftSpiFlags">
            <summary>
            Defines the Software-based SPI flags
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SoftSpiFlags.Default">
            <summary>
            The default flags (all 0)
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SoftSpiFlags.ClockPhaseLeadingEdge">
            <summary>
            For CPHA=1, the out side changes the data on the leading
            edge of the current clock cycle, while the in side captures
            the data on (or shortly after) the trailing edge of the clock cycle.
            The out side holds the data valid until the leading edge of the
            following clock cycle. For the last cycle, the slave holds
            the MISO line valid until slave select is deasserted.
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SoftSpiFlags.ClockPolarityIdleHigh">
            <summary>
            CPOL=1 is a clock which idles at 1, and each cycle consists
            of a pulse of 0. That is, the leading edge is a falling edge,
            and the trailing edge is a rising edge.
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SoftSpiFlags.MosiInvert">
            <summary>
            T is 1 if the least significant bit is transmitted on MOSI first, the
            default (0) shifts the most significant bit out first.
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SoftSpiFlags.MisoInvert">
            <summary>
            R is 1 if the least significant bit is received on MISO first, the
            default (0) receives the most significant bit first.
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.SpiChannelId">
            <summary>
            Enumerates the different SPI Channels
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiChannelId.SpiChannel0">
            <summary>
            The spi channel 0
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiChannelId.SpiChannel1">
            <summary>
            The spi channel 1
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiChannelId.SpiChannel2">
            <summary>
            The spi channel 2 (Auxiliary)
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.SpiFlags">
            <summary>
            SPI Open Flags
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.Default">
            <summary>
            The default
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.ModeBit0">
            <summary>
            The mode bit0
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.ModeBit1">
            <summary>
            The mode bit1
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.ChipEnableActiveLowBit0">
            <summary>
            The chip enable active low bit0
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.ChipEnableActiveLowBit1">
            <summary>
            The chip enable active low bit1
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.ChipEnableActiveLowBit2">
            <summary>
            The chip enable active low bit2
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.ChipEnableReservedBit0">
            <summary>
            The chip enable reserved bit0
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.ChipEnableReservedBit1">
            <summary>
            The chip enable reserved bit1
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.ChipEnableReservedBit2">
            <summary>
            The chip enable reserved bit2
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.UseAuxiliarySpi">
            <summary>
            The use auxiliary spi
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.Use3WireDevice">
            <summary>
            The use3 wire device
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.ByteCount3WireBit0">
            <summary>
            The byte count3 wire bit0
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.ByteCount3WireBit1">
            <summary>
            The byte count3 wire bit1
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.ByteCount3WireBit2">
            <summary>
            The byte count3 wire bit2
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.ByteCount3WireBit3">
            <summary>
            The byte count3 wire bit3
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.InvertMosi">
            <summary>
            The invert mosi
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.InvertMiso">
            <summary>
            The invert miso
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.WordSizeBit0">
            <summary>
            The word size bit0
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.WordSizeBit1">
            <summary>
            The word size bit1
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.WordSizeBit2">
            <summary>
            The word size bit2
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.WordSizeBit3">
            <summary>
            The word size bit3
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.WordSizeBit4">
            <summary>
            The word size bit4
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SpiFlags.WordSizeBit5">
            <summary>
            The word size bit5
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.SystemGpio">
            <summary>
            Provides an enumeration of System GPIOs from 0 to 53.
            User GPIOs are from 0 to 31 (some of them are reserved depending on hardware).
            All chip GPIOs go from 0 to 53. It is safe to read all of them but writing to some
            of them might crash the hardware and corrupt the SD card. So use documetned ones only.
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm00">
            <summary>The BCM GPIO 00</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm01">
            <summary>The BCM GPIO 01</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm02">
            <summary>The BCM GPIO 02</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm03">
            <summary>The BCM GPIO 03</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm04">
            <summary>The BCM GPIO 04</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm05">
            <summary>The BCM GPIO 05</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm06">
            <summary>The BCM GPIO 06</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm07">
            <summary>The BCM GPIO 07</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm08">
            <summary>The BCM GPIO 08</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm09">
            <summary>The BCM GPIO 09</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm10">
            <summary>The BCM GPIO 10</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm11">
            <summary>The BCM GPIO 11</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm12">
            <summary>The BCM GPIO 12</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm13">
            <summary>The BCM GPIO 13</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm14">
            <summary>The BCM GPIO 14</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm15">
            <summary>The BCM GPIO 15</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm16">
            <summary>The BCM GPIO 16</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm17">
            <summary>The BCM GPIO 17</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm18">
            <summary>The BCM GPIO 18</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm19">
            <summary>The BCM GPIO 19</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm20">
            <summary>The BCM GPIO 20</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm21">
            <summary>The BCM GPIO 21</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm22">
            <summary>The BCM GPIO 22</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm23">
            <summary>The BCM GPIO 23</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm24">
            <summary>The BCM GPIO 24</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm25">
            <summary>The BCM GPIO 25</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm26">
            <summary>The BCM GPIO 26</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm27">
            <summary>The BCM GPIO 27</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm28">
            <summary>The BCM GPIO 28</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm29">
            <summary>The BCM GPIO 29</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm30">
            <summary>The BCM GPIO 30</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm31">
            <summary>The BCM GPIO 31</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm32">
            <summary>The BCM GPIO 32</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm33">
            <summary>The BCM GPIO 33</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm34">
            <summary>The BCM GPIO 34</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm35">
            <summary>The BCM GPIO 35</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm36">
            <summary>The BCM GPIO 36</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm37">
            <summary>The BCM GPIO 37</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm38">
            <summary>The BCM GPIO 38</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm39">
            <summary>The BCM GPIO 39</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm40">
            <summary>The BCM GPIO 40</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm41">
            <summary>The BCM GPIO 41</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm42">
            <summary>The BCM GPIO 42</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm43">
            <summary>The BCM GPIO 43</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm44">
            <summary>The BCM GPIO 44</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm45">
            <summary>The BCM GPIO 45</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm46">
            <summary>The BCM GPIO 46</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm47">
            <summary>The BCM GPIO 47</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm48">
            <summary>The BCM GPIO 48</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm49">
            <summary>The BCM GPIO 49</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm50">
            <summary>The BCM GPIO 50</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm51">
            <summary>The BCM GPIO 51</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm52">
            <summary>The BCM GPIO 52</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.SystemGpio.Bcm53">
            <summary>The BCM GPIO 53</summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.TimerId">
            <summary>
            The Pi can register up to 10 hardware timers. 
            This lists all 10 hardware timers from 0 to 9.
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.TimerId.Timer00">
            <summary>The GPIO Hardware Timer 00</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.TimerId.Timer01">
            <summary>The GPIO Hardware Timer 01</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.TimerId.Timer02">
            <summary>The GPIO Hardware Timer 02</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.TimerId.Timer03">
            <summary>The GPIO Hardware Timer 03</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.TimerId.Timer04">
            <summary>The GPIO Hardware Timer 04</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.TimerId.Timer05">
            <summary>The GPIO Hardware Timer 05</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.TimerId.Timer06">
            <summary>The GPIO Hardware Timer 06</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.TimerId.Timer07">
            <summary>The GPIO Hardware Timer 07</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.TimerId.Timer08">
            <summary>The GPIO Hardware Timer 08</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.TimerId.Timer09">
            <summary>The GPIO Hardware Timer 09</summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.TimeType">
            <summary>
            Time Type enumeration
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.TimeType.Relative">
            <summary>
            The relative time type
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.TimeType.Absolute">
            <summary>
            The absolute time type
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.UartRate">
            <summary>
            Defines the valid UART rates
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UartRate.BaudRate50">
            <summary>
            The baud rate 50 bps
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UartRate.BaudRate75">
            <summary>
            The baud rate 75 bps
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UartRate.BaudRate110">
            <summary>
            The baud rate 110 bps
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UartRate.BaudRate134">
            <summary>
            The baud rate 134 bps
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UartRate.BaudRate150">
            <summary>
            The baud rate 150 bps
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UartRate.BaudRate200">
            <summary>
            The baud rate 200 bps
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UartRate.BaudRate300">
            <summary>
            The baud rate 300 bps
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UartRate.BaudRate600">
            <summary>
            The baud rate 600 bps
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UartRate.BaudRate1200">
            <summary>
            The baud rate 1200 bps
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UartRate.BaudRate1800">
            <summary>
            The baud rate 1800 bps
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UartRate.BaudRate2400">
            <summary>
            The baud rate 2400 bps
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UartRate.BaudRate4800">
            <summary>
            The baud rate 4800 bps
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UartRate.BaudRate9600">
            <summary>
            The baud rate 9600 bps
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UartRate.BaudRate19200">
            <summary>
            The baud rate 19200 bps
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UartRate.BaudRate38400">
            <summary>
            The baud rate 38400 bps
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UartRate.BaudRate57600">
            <summary>
            The baud rate 57600 bps
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UartRate.BaudRate115200">
            <summary>
            The baud rate 115200 bps
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UartRate.BaudRate230400">
            <summary>
            The baud rate 230400 bps
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.UserGpio">
            <summary>
            Provides an enumeration of User GPIOs from 0 to 31.
            Do not use undocumented pin numbers because they might be reserved or crash the hardware
            and corrupt the SD card.
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm00">
            <summary>The BCM GPIO 00</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm01">
            <summary>The BCM GPIO 01</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm02">
            <summary>The BCM GPIO 02</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm03">
            <summary>The BCM GPIO 03</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm04">
            <summary>The BCM GPIO 04</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm05">
            <summary>The BCM GPIO 05</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm06">
            <summary>The BCM GPIO 06</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm07">
            <summary>The BCM GPIO 07</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm08">
            <summary>The BCM GPIO 08</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm09">
            <summary>The BCM GPIO 09</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm10">
            <summary>The BCM GPIO 10</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm11">
            <summary>The BCM GPIO 11</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm12">
            <summary>The BCM GPIO 12</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm13">
            <summary>The BCM GPIO 13</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm14">
            <summary>The BCM GPIO 14</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm15">
            <summary>The BCM GPIO 15</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm16">
            <summary>The BCM GPIO 16</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm17">
            <summary>The BCM GPIO 17</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm18">
            <summary>The BCM GPIO 18</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm19">
            <summary>The BCM GPIO 19</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm20">
            <summary>The BCM GPIO 20</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm21">
            <summary>The BCM GPIO 21</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm22">
            <summary>The BCM GPIO 22</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm23">
            <summary>The BCM GPIO 23</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm24">
            <summary>The BCM GPIO 24</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm25">
            <summary>The BCM GPIO 25</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm26">
            <summary>The BCM GPIO 26</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm27">
            <summary>The BCM GPIO 27</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm28">
            <summary>The BCM GPIO 28</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm29">
            <summary>The BCM GPIO 29</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm30">
            <summary>The BCM GPIO 30</summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.UserGpio.Bcm31">
            <summary>The BCM GPIO 31</summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeEnums.WaveMode">
            <summary>
            Enumerates the different wave modes
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.WaveMode.OneShot">
            <summary>
            The one shot wave mode
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.WaveMode.Repeat">
            <summary>
            The repeat wave mode
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.WaveMode.OneShotSync">
            <summary>
            The one shot synchronize wave mode
            </summary>
        </member>
        <member name="F:Unosquare.PiGpio.NativeEnums.WaveMode.RepeatSync">
            <summary>
            The repeat synchronize wave mode
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeMethods.Custom">
            <summary>
            Defines method calls for cutom functions.
            These calls are reserved but still provided for reference purposes.
            They are unused in the managed model of this library.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Custom.GpioCustom1(System.UInt32,System.UInt32,System.Byte[],System.UInt32)">
             <summary>
             This function is available for user customisation.
            
             It returns a single integer value.
            
             </summary>
             <param name="arg1">Argument 1: &gt;=0</param>
             <param name="arg2">Argument 2: &gt;=0</param>
             <param name="argx">extra (byte) arguments</param>
             <param name="argc">number of extra arguments</param>
             <returns>Returns &gt;= 0 if OK, less than 0 indicates a user defined error.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Custom.GpioCustom2(System.UInt32,System.Byte[],System.UInt32,System.Byte[],System.UInt32)">
             <summary>
             This function is available for user customisation.
            
             It differs from gpioCustom1 in that it returns an array of bytes
             rather than just an integer.
            
             The returned value is an integer indicating the number of returned bytes.
            
             The number of returned bytes must be retMax or less.
             </summary>
             <param name="arg1">&gt;=0</param>
             <param name="argx">extra (byte) arguments</param>
             <param name="argc">number of extra arguments</param>
             <param name="retBuf">buffer for returned bytes</param>
             <param name="retMax">maximum number of bytes to return</param>
             <returns>Returns &gt;= 0 if OK, less than 0 indicates a user defined error.</returns>
        </member>
        <member name="T:Unosquare.PiGpio.NativeMethods.Events">
            <summary>
            Provides event notification warapper APIs for the pigpio library.
            These methods represent an internal event system that is unused in the managed model
            of this library.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Events.GpioNotifyOpen">
             <summary>
             This function requests a free notification handle.
            
             A notification is a method for being notified of GPIO state changes
             via a pipe or socket.
            
             Pipe notifications for handle x will be available at the pipe
             named /dev/pigpiox (where x is the handle number).  E.g. if the
             function returns 15 then the notifications must be read
             from /dev/pigpio15.
            
             Socket notifications are returned to the socket which requested the
             handle.
            
             </summary>
             <example>
             <code>
             h = gpioNotifyOpen();
            
             if (h &gt;= 0)
             {
                sprintf(str, "/dev/pigpio%d", h);
            
                fd = open(str, O_RDONLY);
            
                if (fd &gt;= 0)
                {
                   // Okay.
                }
                else
                {
                   // Error.
                }
             }
             else
             {
                // Error.
             }
             </code>
             </example>
             <returns>Returns a handle greater than or equal to zero if OK, otherwise PI_NO_HANDLE.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Events.GpioNotifyOpenWithSize(System.Int32)">
             <summary>
             This function requests a free notification handle.
            
             It differs from <see cref="M:Unosquare.PiGpio.NativeMethods.Events.GpioNotifyOpen"/> in that the pipe size may be
             specified, whereas <see cref="M:Unosquare.PiGpio.NativeMethods.Events.GpioNotifyOpen"/> uses the default pipe size.
            
             See <see cref="M:Unosquare.PiGpio.NativeMethods.Events.GpioNotifyOpen"/> for further details.
             </summary>
             <param name="bufferSize">The pipe size of the the buffer</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Events.GpioNotifyBegin(System.UIntPtr,Unosquare.PiGpio.NativeEnums.BitMask)">
             <summary>
             This function starts notifications on a previously opened handle.
            
             The notification sends state changes for each GPIO whose corresponding
             bit in bits is set.
            
             Each notification occupies 12 bytes in the fifo and has the
             following structure.
            
             seqno: starts at 0 each time the handle is opened and then increments
             by one for each report.
            
             flags: three flags are defined, PI_NTFY_FLAGS_WDOG,
             PI_NTFY_FLAGS_ALIVE, and PI_NTFY_FLAGS_EVENT.
            
             If bit 5 is set (PI_NTFY_FLAGS_WDOG) then bits 0-4 of the flags
             indicate a GPIO which has had a watchdog timeout.
            
             If bit 6 is set (PI_NTFY_FLAGS_ALIVE) this indicates a keep alive
             signal on the pipe/socket and is sent once a minute in the absence
             of other notification activity.
            
             If bit 7 is set (PI_NTFY_FLAGS_EVENT) then bits 0-4 of the flags
             indicate an event which has been triggered.
            
             tick: the number of microseconds since system boot.  It wraps around
             after 1h12m.
            
             level: indicates the level of each GPIO.  If bit 1&lt;&lt;x is set then
             GPIO x is high.
            
             </summary>
             <example>
             <code>
             // Start notifications for GPIO 1, 4, 6, 7, 10.
            
             //                         1
             //                         0  76 4  1
             // (1234 = 0x04D2 = 0b0000010011010010)
            
             gpioNotifyBegin(h, 1234);
             </code>
             </example>
             <remarks>
             typedef struct
             {
                uint16_t seqno;
                uint16_t flags;
                uint tick;
                uint level;
             } gpioReport_t;
             </remarks>
             <param name="handle">&gt;=0, as returned by <see cref="M:Unosquare.PiGpio.NativeMethods.Events.GpioNotifyOpen"/></param>
             <param name="bitMask">a bit mask indicating the GPIO of interest</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Events.GpioNotifyPause(System.UIntPtr)">
             <summary>
             This function pauses notifications on a previously opened handle.
            
             Notifications for the handle are suspended until <see cref="M:Unosquare.PiGpio.NativeMethods.Events.GpioNotifyBegin(System.UIntPtr,Unosquare.PiGpio.NativeEnums.BitMask)"/>
             is called again.
            
             </summary>
             <example>
             <code>
             gpioNotifyPause(h);
             </code>
             </example>
             <param name="handle">&gt;=0, as returned by <see cref="M:Unosquare.PiGpio.NativeMethods.Events.GpioNotifyOpen"/></param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Events.GpioNotifyClose(System.UIntPtr)">
             <summary>
             This function stops notifications on a previously opened handle
             and releases the handle for reuse.
            
             </summary>
             <example>
             <code>
             gpioNotifyClose(h);
             </code>
             </example>
             <param name="handle">&gt;=0, as returned by <see cref="M:Unosquare.PiGpio.NativeMethods.Events.GpioNotifyOpen"/></param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Events.EventMonitor(System.UIntPtr,Unosquare.PiGpio.NativeEnums.BitMask)">
             <summary>
             This function selects the events to be reported on a previously
             opened handle.
            
             A report is sent each time an event is triggered providing the
             corresponding bit in bits is set.
            
             See <see cref="M:Unosquare.PiGpio.NativeMethods.Events.GpioNotifyBegin(System.UIntPtr,Unosquare.PiGpio.NativeEnums.BitMask)"/> for the notification format.
            
             </summary>
             <example>
             <code>
             // Start reporting events 3, 6, and 7.
            
             //  bit      76543210
             // (0xC8 = 0b11001000)
            
             eventMonitor(h, 0xC8);
             </code>
             </example>
             <param name="handle">&gt;=0, as returned by <see cref="M:Unosquare.PiGpio.NativeMethods.Events.GpioNotifyOpen"/></param>
             <param name="bitMask">a bit mask indicating the events of interest</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Events.EventSetFunc(System.UInt32,Unosquare.PiGpio.NativeTypes.PiGpioEventDelegate)">
             <summary>
             Registers a function to be called (a callback) when the specified
             event occurs.
            
             One function may be registered per event.
            
             The function is passed the event, and the tick.
            
             The callback may be cancelled by passing NULL as the function.
             </summary>
             <param name="eventId">0-31</param>
             <param name="callback">the callback function</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_EVENT_ID.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Events.EventSetFuncEx(System.UInt32,Unosquare.PiGpio.NativeTypes.PiGpioEventExDelegate,System.UIntPtr)">
             <summary>
             Registers a function to be called (a callback) when the specified
             event occurs.
            
             One function may be registered per event.
            
             The function is passed the event, the tick, and the ueserdata pointer.
            
             The callback may be cancelled by passing NULL as the function.
            
             Only one of <see cref="M:Unosquare.PiGpio.NativeMethods.Events.EventSetFunc(System.UInt32,Unosquare.PiGpio.NativeTypes.PiGpioEventDelegate)"/> <see cref="M:Unosquare.PiGpio.NativeMethods.Events.EventSetFuncEx(System.UInt32,Unosquare.PiGpio.NativeTypes.PiGpioEventExDelegate,System.UIntPtr)"/> can be
             registered per event.
             </summary>
             <param name="eventId">0-31</param>
             <param name="callback">the callback function</param>
             <param name="userData">pointer to arbitrary user data</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_EVENT_ID.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Events.EventTrigger(System.UInt32)">
             <summary>
             This function signals the occurrence of an event.
            
             An event is a signal used to inform one or more consumers
             to start an action.  Each consumer which has registered an interest
             in the event (e.g. by calling <see cref="M:Unosquare.PiGpio.NativeMethods.Events.EventSetFunc(System.UInt32,Unosquare.PiGpio.NativeTypes.PiGpioEventDelegate)"/>) will be informed by
             a callback.
            
             One event, PI_EVENT_BSC (31) is predefined.  This event is
             auto generated on BSC slave activity.
            
             The meaning of other events is arbitrary.
            
             Note that other than its id and its tick there is no data associated
             with an event.
             </summary>
             <param name="eventId">0-31, the event</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_EVENT_ID.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Events.GpioNotifyOpenUnmanaged">
             <summary>
             This function requests a free notification handle.
            
             A notification is a method for being notified of GPIO state changes
             via a pipe or socket.
            
             Pipe notifications for handle x will be available at the pipe
             named /dev/pigpiox (where x is the handle number).  E.g. if the
             function returns 15 then the notifications must be read
             from /dev/pigpio15.
            
             Socket notifications are returned to the socket which requested the
             handle.
            
             </summary>
             <example>
             <code>
             h = gpioNotifyOpen();
            
             if (h &gt;= 0)
             {
                sprintf(str, "/dev/pigpio%d", h);
            
                fd = open(str, O_RDONLY);
            
                if (fd &gt;= 0)
                {
                   // Okay.
                }
                else
                {
                   // Error.
                }
             }
             else
             {
                // Error.
             }
             </code>
             </example>
             <returns>Returns a handle greater than or equal to zero if OK, otherwise PI_NO_HANDLE.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Events.GpioNotifyOpenWithSizeUnmanaged(System.Int32)">
            <summary>
            This function requests a free notification handle.
            It differs from <see cref="M:Unosquare.PiGpio.NativeMethods.Events.GpioNotifyOpen" /> in that the pipe size may be
            specified, whereas <see cref="M:Unosquare.PiGpio.NativeMethods.Events.GpioNotifyOpen" /> uses the default pipe size.
            See <see cref="M:Unosquare.PiGpio.NativeMethods.Events.GpioNotifyOpen" /> for further details.
            </summary>
            <param name="bufferSize">Size of the buffer.</param>
            <returns>
            The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode" /> enumeration.
            </returns>
        </member>
        <member name="T:Unosquare.PiGpio.NativeMethods.Files">
             <summary>
             A file may only be opened if permission is granted by an entry in
             /opt/pigpio/access.  This is intended to allow remote access to files
             in a more or less controlled manner.
            
             Each entry in /opt/pigpio/access takes the form of a file path
             which may contain wildcards followed by a single letter permission.
             The permission may be R for read, W for write, U for read/write,
             and N for no access.
            
             Where more than one entry matches a file the most specific rule
             applies.  If no entry matches a file then access is denied.
            
             Suppose /opt/pigpio/access contains the following entries
            
             Files may be written in directory dir_1 with the exception
             of file.txt.
            
             Files may be read in directory dir_2.
            
             Files may be read and written in directory dir_3.
            
             If a directory allows read, write, or read/write access then files may
             be created in that directory.
            
             In an attempt to prevent risky permissions the following paths are
             ignored in /opt/pigpio/access.
             </summary>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Files.FileOpen(System.String,Unosquare.PiGpio.NativeEnums.FileModeFlags)">
            <summary>
            A wrapper function for <see cref="M:Unosquare.PiGpio.NativeMethods.Files.FileOpenUnmanaged(System.String,System.UInt32)"/>
            </summary>
            <param name="filePath">The file path.</param>
            <param name="mode">The mode.</param>
            <returns>A file handle</returns>
            <exception cref="T:System.IO.IOException">When the file fails to open</exception>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Files.FileClose(System.UIntPtr)">
             <summary>
             This function closes the file associated with handle.
            
             </summary>
             <example>
             <code>
             fileClose(h);
             </code>
             </example>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.Files.FileOpen(System.String,Unosquare.PiGpio.NativeEnums.FileModeFlags)"/></param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Files.FileRead(System.UIntPtr,System.Byte[],System.UInt32)">
             <summary>
             This function reads up to count bytes from the the file
             associated with handle and writes them to buf.
            
             </summary>
             <example>
             <code>
             if (fileRead(h, buf, sizeof(buf)) &gt; 0)
             {
                // process read data
             }
             </code>
             </example>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.Files.FileOpen(System.String,Unosquare.PiGpio.NativeEnums.FileModeFlags)"/></param>
             <param name="buffer">an array to receive the read data</param>
             <param name="count">the maximum number of bytes to read</param>
             <returns>Returns the number of bytes read (&gt;=0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, PI_FILE_NOT_ROPEN, or PI_BAD_FILE_WRITE.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Files.FileRead(System.UIntPtr,System.Int32)">
            <summary>
            Reads from a file handle up to count bytes.
            </summary>
            <param name="handle">The handle.</param>
            <param name="count">The count.</param>
            <returns>The array of bytes read.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Files.FileWrite(System.UIntPtr,System.Byte[])">
            <summary>
            Writes the given buffer to a file handle
            </summary>
            <param name="handle">The handle.</param>
            <param name="buffer">The buffer.</param>
            <returns>The Result Code.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Files.FileWrite(System.UIntPtr,System.Byte[],System.Int32)">
            <summary>
            Writes the given buffer to a file handle
            </summary>
            <param name="handle">The handle.</param>
            <param name="buffer">The buffer.</param>
            <param name="length">The length.</param>
            <returns>The Result Code</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Files.FileSeek(System.UIntPtr,System.Int32,Unosquare.PiGpio.NativeEnums.SeekMode)">
            <summary>
            Seeks within a file
            </summary>
            <param name="handle">The handle.</param>
            <param name="seekOffset">The seek offset.</param>
            <param name="seekFrom">The seek from.</param>
            <returns>The new byte position within the file.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Files.FileList(System.String)">
            <summary>
            Retrieves a list of files matching the given pattern. See <see cref="M:Unosquare.PiGpio.NativeMethods.Files.FileListUnmanaged(System.String,System.Byte[],System.UInt32)" />
            </summary>
            <param name="pathPattern">The path pattern.</param>
            <returns>A list of matching files</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Files.FileOpenUnmanaged(System.String,System.UInt32)">
             <summary>
             This function returns a handle to a file opened in a specified mode.
            
             File
            
             A file may only be opened if permission is granted by an entry in
             /opt/pigpio/access.  This is intended to allow remote access to files
             in a more or less controlled manner.
            
             Each entry in /opt/pigpio/access takes the form of a file path
             which may contain wildcards followed by a single letter permission.
             The permission may be R for read, W for write, U for read/write,
             and N for no access.
            
             Where more than one entry matches a file the most specific rule
             applies.  If no entry matches a file then access is denied.
            
             Suppose /opt/pigpio/access contains the following entries
            
             Files may be written in directory dir_1 with the exception
             of file.txt.
            
             Files may be read in directory dir_2.
            
             Files may be read and written in directory dir_3.
            
             If a directory allows read, write, or read/write access then files may
             be created in that directory.
            
             In an attempt to prevent risky permissions the following paths are
             ignored in /opt/pigpio/access.
            
             Mode
            
             The mode may have the following values.
            
             Macro         @ Value @ Meaning
             PI_FILE_READ  @   1   @ open file for reading
             PI_FILE_WRITE @   2   @ open file for writing
             PI_FILE_RW    @   3   @ open file for reading and writing
            
             The following values may be or'd into the mode.
            
             Macro          @ Value @ Meaning
             PI_FILE_APPEND @ 4     @ Writes append data to the end of the file
             PI_FILE_CREATE @ 8     @ The file is created if it doesn't exist
             PI_FILE_TRUNC  @ 16    @ The file is truncated
            
             Newly created files are owned by root with permissions owner read and write.
            
             </summary>
             <example>
             <code>
             #include &lt;stdio.h&gt;
             #include &lt;pigpio.h&gt;
            
             int main(int argc, char *argv[])
             {
                int handle, c;
                char buf[60000];
            
                if (gpioInitialise() &lt; 0) return 1;
            
                // assumes /opt/pigpio/access contains the following line
                // /ram/*.c r
            
                handle = fileOpen("/ram/pigpio.c", PI_FILE_READ);
            
                if (handle &gt;= 0)
                {
                   while ((c=fileRead(handle, buf, sizeof(buf)-1)))
                   {
                      buf[c] = 0;
                      printf("%s", buf);
                   }
            
                   fileClose(handle);
                }
            
                gpioTerminate();
             }
             </code>
             </example>
             <remarks>
             /home/* n
             /home/pi/shared/dir_1/* w
             /home/pi/shared/dir_2/* r
             /home/pi/shared/dir_3/* u
             /home/pi/shared/dir_1/file.txt n
             a path containing ..
             a path containing only wildcards (*?)
             a path containing less than two non-wildcard parts
             </remarks>
             <param name="file">the file to open</param>
             <param name="mode">the file open mode</param>
             <returns>Returns a handle (&gt;=0) if OK, otherwise PI_NO_HANDLE, PI_NO_FILE_ACCESS, PI_BAD_FILE_MODE, PI_FILE_OPEN_FAILED, or PI_FILE_IS_A_DIR.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Files.FileSeekUnmanaged(System.UIntPtr,System.Int32,Unosquare.PiGpio.NativeEnums.SeekMode)">
             <summary>
             This function seeks to a position within the file associated
             with handle.
            
             </summary>
             <example>
             <code>
             fileSeek(0, 20, PI_FROM_START); // Seek to start plus 20
            
             size = fileSeek(0, 0, PI_FROM_END); // Seek to end, return size
            
             pos = fileSeek(0, 0, PI_FROM_CURRENT); // Return current position
             </code>
             </example>
             <remarks>
                         move forward, negative offsets backwards.
                         or PI_FROM_END (2)
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.Files.FileOpen(System.String,Unosquare.PiGpio.NativeEnums.FileModeFlags)"/></param>
             <param name="seekOffset">the number of bytes to move.  Positive offsets</param>
             <param name="seekFrom">one of PI_FROM_START (0), PI_FROM_CURRENT (1),</param>
             <returns>Returns the new byte position within the file (&gt;=0) if OK, otherwise PI_BAD_HANDLE, or PI_BAD_FILE_SEEK.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Files.FileListUnmanaged(System.String,System.Byte[],System.UInt32)">
             <summary>
             This function returns a list of files which match a pattern.  The
             pattern may contain wildcards.
            
             The pattern must match an entry in /opt/pigpio/access.  The pattern
             may contain wildcards.  See <see cref="M:Unosquare.PiGpio.NativeMethods.Files.FileOpen(System.String,Unosquare.PiGpio.NativeEnums.FileModeFlags)"/>.
            
             NOTE
            
             The returned value is not the number of files, it is the number
             of bytes in the buffer.  The file names are separated by newline
             characters.
            
             </summary>
             <example>
             <code>
             #include &lt;stdio.h&gt;
             #include &lt;pigpio.h&gt;
            
             int main(int argc, char *argv[])
             {
                int c;
                char buf[1000];
            
                if (gpioInitialise() &lt; 0) return 1;
            
                // assumes /opt/pigpio/access contains the following line
                // /ram/*.c r
            
                c = fileList("/ram/p*.c", buf, sizeof(buf));
            
                if (c &gt;= 0)
                {
                   // terminate string
                   buf[c] = 0;
                   printf("%s", buf);
                }
            
                gpioTerminate();
             }
             </code>
             </example>
             <param name="pathPattern">file pattern to match</param>
             <param name="buffer">an array to receive the matching file names</param>
             <param name="count">the maximum number of bytes to read</param>
             <returns>Returns the number of returned bytes if OK, otherwise PI_NO_FILE_ACCESS, or PI_NO_FILE_MATCH.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Files.FileWriteUnmanaged(System.UIntPtr,System.Byte[],System.UInt32)">
             <summary>
             This function writes count bytes from buf to the the file
             associated with handle.
            
             </summary>
             <example>
             <code>
             status = fileWrite(h, buf, count);
             if (status == 0)
             {
                // okay
             }
             else
             {
                // error
             }
             </code>
             </example>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.Files.FileOpen(System.String,Unosquare.PiGpio.NativeEnums.FileModeFlags)"/></param>
             <param name="buffer">the array of bytes to write</param>
             <param name="count">the number of bytes to write</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, PI_FILE_NOT_WOPEN, or PI_BAD_FILE_WRITE.</returns>
        </member>
        <member name="T:Unosquare.PiGpio.NativeMethods.I2c">
            <summary>
            Provides Methods for both, hardware based I2C and Bit-bang (Software) I2C bus communication
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)">
             <summary>
             This returns a handle for the device at the address on the I2C bus.
            
             No flags are currently defined.  This parameter should be set to zero.
            
             Physically buses 0 and 1 are available on the Pi.  Higher numbered buses
             will be available if a kernel supported bus multiplexor is being used.
            
             For the SMBus commands the low level transactions are shown at the end
             of the function description.  The following abbreviations are used.
            
             </summary>
             <remarks>
             S      (1 bit) : Start bit
             P      (1 bit) : Stop bit
             Rd/Wr  (1 bit) : Read/Write bit. Rd equals 1, Wr equals 0.
             A, NA  (1 bit) : Accept and not accept bit.
             Addr   (7 bits): I2C 7 bit address.
             i2cReg (8 bits): Command byte, a byte which often selects a register.
             Data   (8 bits): A data byte.
             Count  (8 bits): A byte defining the length of a block operation.
            
             [..]: Data sent by the device.
             </remarks>
             <param name="i2cBus">&gt;=0</param>
             <param name="i2cAddress">0-0x7F</param>
             <returns>Returns a handle (&gt;=0) if OK, otherwise PI_BAD_I2C_BUS, PI_BAD_I2C_ADDR, PI_BAD_FLAGS, PI_NO_HANDLE, or PI_I2C_OPEN_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cClose(System.UIntPtr)">
             <summary>
             This closes the I2C device associated with the handle.
            
             </summary>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cWriteQuick(System.UIntPtr,Unosquare.PiGpio.NativeEnums.I2cQuickMode)">
             <summary>
             This sends a single bit (in the Rd/Wr bit) to the device associated
             with handle.
            
             Quick command. SMBus 2.0 5.5.1
             </summary>
             <remarks>
             S Addr bit [A] P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="bit">0-1, the value to write</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_WRITE_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cWriteByte(System.UIntPtr,System.Byte)">
             <summary>
             This sends a single byte to the device associated with handle.
            
             Send byte. SMBus 2.0 5.5.2
             </summary>
             <remarks>
             S Addr Wr [A] bVal [A] P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="value">0-0xFF, the value to write</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_WRITE_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cReadByte(System.UIntPtr)">
             <summary>
             This reads a single byte from the device associated with handle.
            
             Receive byte. SMBus 2.0 5.5.3
             </summary>
             <remarks>
             S Addr Rd [A] [Data] NA P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <returns>Returns the byte read (&gt;=0) if OK, otherwise PI_BAD_HANDLE, or PI_I2C_READ_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cWriteByteData(System.UIntPtr,System.Byte,System.Byte)">
             <summary>
             This writes a single byte to the specified register of the device
             associated with handle.
            
             Write byte. SMBus 2.0 5.5.4
             </summary>
             <remarks>
             S Addr Wr [A] i2cReg [A] bVal [A] P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="register">0-255, the register to write</param>
             <param name="value">0-0xFF, the value to write</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_WRITE_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cWriteWordData(System.UIntPtr,System.Byte,System.UInt16)">
             <summary>
             This writes a single 16 bit word to the specified register of the device
             associated with handle.
            
             Write word. SMBus 2.0 5.5.4
             </summary>
             <remarks>
             S Addr Wr [A] i2cReg [A] wValLow [A] wValHigh [A] P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="register">0-255, the register to write</param>
             <param name="word">0-0xFFFF, the value to write</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_WRITE_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cReadByteData(System.UIntPtr,System.Byte)">
             <summary>
             This reads a single byte from the specified register of the device
             associated with handle.
            
             Read byte. SMBus 2.0 5.5.5
             </summary>
             <remarks>
             S Addr Wr [A] i2cReg [A] S Addr Rd [A] [Data] NA P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="register">0-255, the register to read</param>
             <returns>Returns the byte read (&gt;=0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cReadWordData(System.UIntPtr,System.Byte)">
             <summary>
             This reads a single 16 bit word from the specified register of the device
             associated with handle.
            
             Read word. SMBus 2.0 5.5.5
             </summary>
             <remarks>
             S Addr Wr [A] i2cReg [A] S Addr Rd [A] [DataLow] A [DataHigh] NA P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="register">0-255, the register to read</param>
             <returns>Returns the word read (&gt;=0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cProcessCall(System.UIntPtr,System.Byte,System.UInt16)">
             <summary>
             This writes 16 bits of data to the specified register of the device
             associated with handle and reads 16 bits of data in return.
            
             Process call. SMBus 2.0 5.5.6
             </summary>
             <remarks>
             S Addr Wr [A] i2cReg [A] wValLow [A] wValHigh [A]
                S Addr Rd [A] [DataLow] A [DataHigh] NA P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="register">0-255, the register to write/read</param>
             <param name="word">0-0xFFFF, the value to write</param>
             <returns>Returns the word read (&gt;=0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cWriteBlockData(System.UIntPtr,System.Byte,System.Byte[])">
             <summary>
             This writes up to 32 bytes to the specified register of the device
             associated with handle.
            
             Block write. SMBus 2.0 5.5.7
             </summary>
             <remarks>
             S Addr Wr [A] i2cReg [A] count [A]
                buf0 [A] buf1 [A] ... [A] bufn [A] P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="register">0-255, the register to write</param>
             <param name="buffer">an array with the data to send</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_WRITE_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cReadBlockData(System.UIntPtr,System.Byte)">
             <summary>
             This reads a block of up to 32 bytes from the specified register of
             the device associated with handle.
            
             The amount of returned data is set by the device.
            
             Block read. SMBus 2.0 5.5.7
             </summary>
             <remarks>
             S Addr Wr [A] i2cReg [A]
                S Addr Rd [A] [Count] A [buf0] A [buf1] A ... A [bufn] NA P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="register">0-255, the register to read</param>
             <returns>Returns the number of bytes read (&gt;=0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cBlockProcessCall(System.UIntPtr,System.Byte,System.Byte[])">
             <summary>
             This writes data bytes to the specified register of the device
             associated with handle and reads a device specified number
             of bytes of data in return.
            
             The SMBus 2.0 documentation states that a minimum of 1 byte may be
             sent and a minimum of 1 byte may be received.  The total number of
             bytes sent/received must be 32 or less.
            
             Block write-block read. SMBus 2.0 5.5.8
             </summary>
             <remarks>
             S Addr Wr [A] i2cReg [A] count [A] buf0 [A] ... bufn [A]
                S Addr Rd [A] [Count] A [buf0] A ... [bufn] A P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="register">0-255, the register to write/read</param>
             <param name="buffer">an array with the data to send and to receive the read data</param>
             <returns>Returns the number of bytes read (&gt;=0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cReadI2cBlockData(System.UIntPtr,System.Byte,System.Int32)">
             <summary>
             This reads count bytes from the specified register of the device
             associated with handle .  The count may be 1-32.
            
             </summary>
             <remarks>
             S Addr Wr [A] i2cReg [A]
                S Addr Rd [A] [buf0] A [buf1] A ... A [bufn] NA P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="register">0-255, the register to read</param>
             <param name="count">The amount of bytes to read from 1 to 32</param>
             <returns>Returns the number of bytes read (&gt;0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cWriteI2cBlockData(System.UIntPtr,System.Byte,System.Byte[],System.Int32)">
             <summary>
             This writes 1 to 32 bytes to the specified register of the device
             associated with handle.
            
             </summary>
             <remarks>
             S Addr Wr [A] i2cReg [A] buf0 [A] buf1 [A] ... [A] bufn [A] P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="register">0-255, the register to write</param>
             <param name="buffer">the data to write</param>
             <param name="count">The amount of bytes to write (from 1 to 32)</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_WRITE_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cReadDevice(System.UIntPtr,System.Byte[])">
             <summary>
             This reads count bytes from the raw device into buf.
            
             </summary>
             <remarks>
             S Addr Rd [A] [buf0] A [buf1] A ... A [bufn] NA P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="buffer">an array to receive the read data bytes</param>
             <returns>Returns count (&gt;0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cReadDevice(System.UIntPtr,System.Int32)">
             <summary>
             This reads count bytes from the raw device into buf.
            
             </summary>
             <remarks>
             S Addr Rd [A] [buf0] A [buf1] A ... A [bufn] NA P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="count">Read upt to this many bytes</param>
             <returns>Returns count (&gt;0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cWriteDevice(System.UIntPtr,System.Byte[])">
             <summary>
             This writes count bytes from buf to the raw device.
            
             </summary>
             <remarks>
             S Addr Wr [A] buf0 [A] buf1 [A] ... [A] bufn [A] P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="buffer">an array containing the data bytes to write</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_WRITE_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cSwitchCombined(System.Int32)">
             <summary>
             This sets the I2C (i2c-bcm2708) module "use combined transactions"
             parameter on or off.
            
             NOTE: when the flag is on a write followed by a read to the same
             slave address will use a repeated start (rather than a stop/start).
             </summary>
             <param name="setting">0 to set the parameter off, non-zero to set it on</param>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cSegments(System.UIntPtr,Unosquare.PiGpio.NativeTypes.I2CMessageSegment[],System.UInt32)">
             <summary>
             This function executes multiple I2C segments in one transaction by
             calling the I2C_RDWR ioctl.
            
             </summary>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="segments">an array of I2C segments</param>
             <param name="numSegs">&gt;0, the number of I2C segments</param>
             <returns>Returns the number of segments if OK, otherwise PI_BAD_I2C_SEG.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cZip(System.UIntPtr,System.Byte[],System.UInt32,System.Byte[],System.UInt32)">
             <summary>
             This function executes a sequence of I2C operations.  The
             operations to be performed are specified by the contents of inBuf
             which contains the concatenated command codes and associated data.
            
             The following command codes are supported:
            
             Name    @ Cmd &amp; Data @ Meaning
             End     @ 0          @ No more commands
             Escape  @ 1          @ Next P is two bytes
             On      @ 2          @ Switch combined flag on
             Off     @ 3          @ Switch combined flag off
             Address @ 4 P        @ Set I2C address to P
             Flags   @ 5 lsb msb  @ Set I2C flags to lsb + (msb &lt;&lt; 8)
             Read    @ 6 P        @ Read P bytes of data
             Write   @ 7 P ...    @ Write P bytes of data
            
             The address, read, and write commands take a parameter P.
             Normally P is one byte (0-255).  If the command is preceded by
             the Escape command then P is two bytes (0-65535, least significant
             byte first).
            
             The address defaults to that associated with the handle.
             The flags default to 0.  The address and flags maintain their
             previous value until updated.
            
             The returned I2C data is stored in consecutive locations of outBuf.
            
             </summary>
             <example>
             <code>
             Set address 0x53, write 0x32, read 6 bytes
             Set address 0x1E, write 0x03, read 6 bytes
             Set address 0x68, write 0x1B, read 8 bytes
             End
            
             0x04 0x53   0x07 0x01 0x32   0x06 0x06
             0x04 0x1E   0x07 0x01 0x03   0x06 0x06
             0x04 0x68   0x07 0x01 0x1B   0x06 0x08
             0x00
             </code>
             </example>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="inputBuffer">pointer to the concatenated I2C commands, see below</param>
             <param name="inputLength">size of command buffer</param>
             <param name="outputBuffer">pointer to buffer to hold returned data</param>
             <param name="outLength">size of output buffer</param>
             <returns>Returns &gt;= 0 if OK (the number of bytes read), otherwise PI_BAD_HANDLE, PI_BAD_POINTER, PI_BAD_I2C_CMD, PI_BAD_I2C_RLEN. PI_BAD_I2C_WLEN, or PI_BAD_I2C_SEG.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.BbI2COpen(Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32)">
             <summary>
             This function selects a pair of GPIO for bit banging I2C at a
             specified baud rate.
            
             Bit banging I2C allows for certain operations which are not possible
             with the standard I2C driver.
            
             o baud rates as low as 50
             o repeated starts
             o clock stretching
             o I2C on any pair of spare GPIO
            
             NOTE:
            
             The GPIO used for SDA and SCL must have pull-ups to 3V3 connected.  As
             a guide the hardware pull-ups on pins 3 and 5 are 1k8 in value.
             </summary>
             <param name="sdaPin">SDA 0-31</param>
             <param name="sclPin">SCL 0-31</param>
             <param name="baudRate">50-500000</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_USER_GPIO, PI_BAD_I2C_BAUD, or PI_GPIO_IN_USE.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.BbI2CClose(Unosquare.PiGpio.NativeEnums.UserGpio)">
             <summary>
             This function stops bit banging I2C on a pair of GPIO previously
             opened with <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.BbI2COpen(Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32)"/>.
            
             </summary>
             <param name="sdaPin">0-31, the SDA GPIO used in a prior call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.BbI2COpen(Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32)"/></param>
             <returns>Returns 0 if OK, otherwise PI_BAD_USER_GPIO, or PI_NOT_I2C_GPIO.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.BbI2CZip(Unosquare.PiGpio.NativeEnums.UserGpio,System.Byte[],System.UInt32,System.Byte[],System.UInt32)">
             <summary>
             This function executes a sequence of bit banged I2C operations.  The
             operations to be performed are specified by the contents of inBuf
             which contains the concatenated command codes and associated data.
            
             The following command codes are supported:
            
             Name    @ Cmd &amp; Data   @ Meaning
             End     @ 0            @ No more commands
             Escape  @ 1            @ Next P is two bytes
             Start   @ 2            @ Start condition
             Stop    @ 3            @ Stop condition
             Address @ 4 P          @ Set I2C address to P
             Flags   @ 5 lsb msb    @ Set I2C flags to lsb + (msb &lt;&lt; 8)
             Read    @ 6 P          @ Read P bytes of data
             Write   @ 7 P ...      @ Write P bytes of data
            
             The address, read, and write commands take a parameter P.
             Normally P is one byte (0-255).  If the command is preceded by
             the Escape command then P is two bytes (0-65535, least significant
             byte first).
            
             The address and flags default to 0.  The address and flags maintain
             their previous value until updated.
            
             No flags are currently defined.
            
             The returned I2C data is stored in consecutive locations of outBuf.
            
             </summary>
             <example>
             <code>
             Set address 0x53
             start, write 0x32, (re)start, read 6 bytes, stop
             Set address 0x1E
             start, write 0x03, (re)start, read 6 bytes, stop
             Set address 0x68
             start, write 0x1B, (re)start, read 8 bytes, stop
             End
            
             0x04 0x53
             0x02 0x07 0x01 0x32   0x02 0x06 0x06 0x03
            
             0x04 0x1E
             0x02 0x07 0x01 0x03   0x02 0x06 0x06 0x03
            
             0x04 0x68
             0x02 0x07 0x01 0x1B   0x02 0x06 0x08 0x03
            
             0x00
             </code>
             </example>
             <param name="sdaPin">0-31 (as used in a prior call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.BbI2COpen(Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32)"/>)</param>
             <param name="inputBuffer">pointer to the concatenated I2C commands, see below</param>
             <param name="inputLength">size of command buffer</param>
             <param name="outputBuffer">pointer to buffer to hold returned data</param>
             <param name="outputLength">size of output buffer</param>
             <returns>Returns &gt;= 0 if OK (the number of bytes read), otherwise PI_BAD_USER_GPIO, PI_NOT_I2C_GPIO, PI_BAD_POINTER, PI_BAD_I2C_CMD, PI_BAD_I2C_RLEN, PI_BAD_I2C_WLEN, PI_I2C_READ_FAILED, or PI_I2C_WRITE_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpenUnmanaged(System.UInt32,System.UInt32,System.UInt32)">
             <summary>
             This returns a handle for the device at the address on the I2C bus.
            
             No flags are currently defined.  This parameter should be set to zero.
            
             Physically buses 0 and 1 are available on the Pi.  Higher numbered buses
             will be available if a kernel supported bus multiplexor is being used.
            
             For the SMBus commands the low level transactions are shown at the end
             of the function description.  The following abbreviations are used.
            
             </summary>
             <remarks>
             S      (1 bit) : Start bit
             P      (1 bit) : Stop bit
             Rd/Wr  (1 bit) : Read/Write bit. Rd equals 1, Wr equals 0.
             A, NA  (1 bit) : Accept and not accept bit.
             Addr   (7 bits): I2C 7 bit address.
             i2cReg (8 bits): Command byte, a byte which often selects a register.
             Data   (8 bits): A data byte.
             Count  (8 bits): A byte defining the length of a block operation.
            
             [..]: Data sent by the device.
             </remarks>
             <param name="i2cBus">&gt;=0</param>
             <param name="i2cAddr">0-0x7F</param>
             <param name="i2cFlags">0</param>
             <returns>Returns a handle (&gt;=0) if OK, otherwise PI_BAD_I2C_BUS, PI_BAD_I2C_ADDR, PI_BAD_FLAGS, PI_NO_HANDLE, or PI_I2C_OPEN_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cWriteQuickUnmanaged(System.UIntPtr,System.UInt32)">
             <summary>
             This sends a single bit (in the Rd/Wr bit) to the device associated
             with handle.
            
             Quick command. SMBus 2.0 5.5.1
             </summary>
             <remarks>
             S Addr bit [A] P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="bit">0-1, the value to write</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_WRITE_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cWriteByteUnmanaged(System.UIntPtr,System.UInt32)">
             <summary>
             This sends a single byte to the device associated with handle.
            
             Send byte. SMBus 2.0 5.5.2
             </summary>
             <remarks>
             S Addr Wr [A] bVal [A] P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="bVal">0-0xFF, the value to write</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_WRITE_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cReadByteUnmanaged(System.UIntPtr)">
             <summary>
             This reads a single byte from the device associated with handle.
            
             Receive byte. SMBus 2.0 5.5.3
             </summary>
             <remarks>
             S Addr Rd [A] [Data] NA P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <returns>Returns the byte read (&gt;=0) if OK, otherwise PI_BAD_HANDLE, or PI_I2C_READ_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cWriteByteDataUnmanaged(System.UIntPtr,System.UInt32,System.UInt32)">
             <summary>
             This writes a single byte to the specified register of the device
             associated with handle.
            
             Write byte. SMBus 2.0 5.5.4
             </summary>
             <remarks>
             S Addr Wr [A] i2cReg [A] bVal [A] P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="i2cReg">0-255, the register to write</param>
             <param name="bVal">0-0xFF, the value to write</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_WRITE_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cWriteWordDataUnmanaged(System.UIntPtr,System.UInt32,System.UInt32)">
             <summary>
             This writes a single 16 bit word to the specified register of the device
             associated with handle.
            
             Write word. SMBus 2.0 5.5.4
             </summary>
             <remarks>
             S Addr Wr [A] i2cReg [A] wValLow [A] wValHigh [A] P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="register">0-255, the register to write</param>
             <param name="word">0-0xFFFF, the value to write</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_WRITE_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cReadByteDataUnmanaged(System.UIntPtr,System.UInt32)">
             <summary>
             This reads a single byte from the specified register of the device
             associated with handle.
            
             Read byte. SMBus 2.0 5.5.5
             </summary>
             <remarks>
             S Addr Wr [A] i2cReg [A] S Addr Rd [A] [Data] NA P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="register">0-255, the register to read</param>
             <returns>Returns the byte read (&gt;=0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cReadWordDataUnmanaged(System.UIntPtr,System.UInt32)">
             <summary>
             This reads a single 16 bit word from the specified register of the device
             associated with handle.
            
             Read word. SMBus 2.0 5.5.5
             </summary>
             <remarks>
             S Addr Wr [A] i2cReg [A] S Addr Rd [A] [DataLow] A [DataHigh] NA P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="register">0-255, the register to read</param>
             <returns>Returns the word read (&gt;=0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cProcessCallUnmanaged(System.UIntPtr,System.UInt32,System.UInt32)">
             <summary>
             This writes 16 bits of data to the specified register of the device
             associated with handle and reads 16 bits of data in return.
            
             Process call. SMBus 2.0 5.5.6
             </summary>
             <remarks>
             S Addr Wr [A] i2cReg [A] wValLow [A] wValHigh [A]
                S Addr Rd [A] [DataLow] A [DataHigh] NA P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="register">0-255, the register to write/read</param>
             <param name="word">0-0xFFFF, the value to write</param>
             <returns>Returns the word read (&gt;=0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cWriteBlockDataUnmanaged(System.UIntPtr,System.UInt32,System.Byte[],System.UInt32)">
             <summary>
             This writes up to 32 bytes to the specified register of the device
             associated with handle.
            
             Block write. SMBus 2.0 5.5.7
             </summary>
             <remarks>
             S Addr Wr [A] i2cReg [A] count [A]
                buf0 [A] buf1 [A] ... [A] bufn [A] P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="register">0-255, the register to write</param>
             <param name="buffer">an array with the data to send</param>
             <param name="count">1-32, the number of bytes to write</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_WRITE_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cReadBlockDataUnmanaged(System.UIntPtr,System.UInt32,System.Byte[])">
             <summary>
             This reads a block of up to 32 bytes from the specified register of
             the device associated with handle.
            
             The amount of returned data is set by the device.
            
             Block read. SMBus 2.0 5.5.7
             </summary>
             <remarks>
             S Addr Wr [A] i2cReg [A]
                S Addr Rd [A] [Count] A [buf0] A [buf1] A ... A [bufn] NA P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="register">0-255, the register to read</param>
             <param name="buffer">an array to receive the read data</param>
             <returns>Returns the number of bytes read (&gt;=0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cBlockProcessCallUnmanaged(System.UIntPtr,System.UInt32,System.Byte[],System.UInt32)">
             <summary>
             This writes data bytes to the specified register of the device
             associated with handle and reads a device specified number
             of bytes of data in return.
            
             The SMBus 2.0 documentation states that a minimum of 1 byte may be
             sent and a minimum of 1 byte may be received.  The total number of
             bytes sent/received must be 32 or less.
            
             Block write-block read. SMBus 2.0 5.5.8
             </summary>
             <remarks>
             S Addr Wr [A] i2cReg [A] count [A] buf0 [A] ... bufn [A]
                S Addr Rd [A] [Count] A [buf0] A ... [bufn] A P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="register">0-255, the register to write/read</param>
             <param name="buffer">an array with the data to send and to receive the read data</param>
             <param name="count">1-32, the number of bytes to write</param>
             <returns>Returns the number of bytes read (&gt;=0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cReadI2cBlockDataUnmanaged(System.UIntPtr,System.UInt32,System.Byte[],System.UInt32)">
             <summary>
             This reads count bytes from the specified register of the device
             associated with handle .  The count may be 1-32.
            
             </summary>
             <remarks>
             S Addr Wr [A] i2cReg [A]
                S Addr Rd [A] [buf0] A [buf1] A ... A [bufn] NA P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="register">0-255, the register to read</param>
             <param name="buffer">an array to receive the read data</param>
             <param name="count">1-32, the number of bytes to read</param>
             <returns>Returns the number of bytes read (&gt;0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cWriteI2cBlockDataUnmanaged(System.UIntPtr,System.UInt32,System.Byte[],System.UInt32)">
             <summary>
             This writes 1 to 32 bytes to the specified register of the device
             associated with handle.
            
             </summary>
             <remarks>
             S Addr Wr [A] i2cReg [A] buf0 [A] buf1 [A] ... [A] bufn [A] P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="register">0-255, the register to write</param>
             <param name="buffer">the data to write</param>
             <param name="count">1-32, the number of bytes to write</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_WRITE_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cReadDeviceUnmanaged(System.UIntPtr,System.Byte[],System.UInt32)">
             <summary>
             This reads count bytes from the raw device into buf.
            
             </summary>
             <remarks>
             S Addr Rd [A] [buf0] A [buf1] A ... A [bufn] NA P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="buffer">an array to receive the read data bytes</param>
             <param name="count">&gt;0, the number of bytes to read</param>
             <returns>Returns count (&gt;0) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_READ_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.I2c.I2cWriteDeviceUnmanaged(System.UIntPtr,System.Byte[],System.UInt32)">
             <summary>
             This writes count bytes from buf to the raw device.
            
             </summary>
             <remarks>
             S Addr Wr [A] buf0 [A] buf1 [A] ... [A] bufn [A] P
             </remarks>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.I2c.I2cOpen(System.UInt32,System.UInt32)"/></param>
             <param name="buffer">an array containing the data bytes to write</param>
             <param name="count">&gt;0, the number of bytes to write</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_I2C_WRITE_FAILED.</returns>
        </member>
        <member name="T:Unosquare.PiGpio.NativeMethods.IO">
            <summary>
            Defines fundamental IO methods for the GPIO Pins.
            The bulk of the managed pin functionality is supplied by these methods.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetMode(Unosquare.PiGpio.NativeEnums.SystemGpio,Unosquare.PiGpio.NativeEnums.PinMode)">
             <summary>
             Sets the GPIO mode, typically input or output.
            
             Arduino style: pinMode.
            
             See [[http://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/BCM2835-ARM-Peripherals.pdf]]
             page 102 for an overview of the modes.
             </summary>
             <example>
             <code>
             gpioSetMode(17, PI_INPUT);  // Set GPIO17 as input.
            
             gpioSetMode(18, PI_OUTPUT); // Set GPIO18 as output.
            
             gpioSetMode(22,PI_ALT0);    // Set GPIO22 to alternative mode 0.
             </code>
             </example>
             <param name="gpio">0-53</param>
             <param name="mode">0-7</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_GPIO or PI_BAD_MODE.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioGetMode(Unosquare.PiGpio.NativeEnums.SystemGpio)">
            <summary>
            Gest the current mode for the given GPIO
            </summary>
            <param name="gpio">The gpio.</param>
            <returns>The port mode</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetPullUpDown(Unosquare.PiGpio.NativeEnums.SystemGpio,Unosquare.PiGpio.NativeEnums.GpioPullMode)">
             <summary>
             Sets or clears resistor pull ups or downs on the GPIO.
            
             </summary>
             <example>
             <code>
             gpioSetPullUpDown(17, PI_PUD_UP);   // Sets a pull-up.
            
             gpioSetPullUpDown(18, PI_PUD_DOWN); // Sets a pull-down.
            
             gpioSetPullUpDown(23, PI_PUD_OFF);  // Clear any pull-ups/downs.
             </code>
             </example>
             <param name="gpio">0-53</param>
             <param name="pullMode">0-2</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_GPIO or PI_BAD_PUD.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioRead(Unosquare.PiGpio.NativeEnums.SystemGpio)">
            <summary>
            Reads the value of the GPIO
            </summary>
            <param name="gpio">The gpio.</param>
            <returns>The digital value</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioWrite(Unosquare.PiGpio.NativeEnums.SystemGpio,System.Boolean)">
             <summary>
             Sets the GPIO level, on or off.
            
             If PWM or servo pulses are active on the GPIO they are switched off.
            
             Arduino style: digitalWrite
            
             </summary>
             <example>
             <code>
             gpioWrite(24, 1); // Set GPIO24 high.
             </code>
             </example>
             <param name="gpio">0-53</param>
             <param name="value">0-1</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_GPIO or PI_BAD_LEVEL.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioTrigger(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32,System.Boolean)">
             <summary>
             This function sends a trigger pulse to a GPIO.  The GPIO is set to
             level for pulseLen microseconds and then reset to not level.
            
             or PI_BAD_PULSELEN.
             </summary>
             <param name="userGpio">0-31</param>
             <param name="pulseLength">1-100</param>
             <param name="value">0,1</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_USER_GPIO, PI_BAD_LEVEL, or PI_BAD_PULSELEN.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioReadBits00To31">
            <summary>
            Returns the current level of GPIO 0-31.
            </summary>
            <returns>The current level of GPIO 0-31.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioReadBits32To53">
            <summary>
            Returns the current level of GPIO 32-53.
            </summary>
            <returns>The current level of GPIO 32-53.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioWriteBits00To31Clear(Unosquare.PiGpio.NativeEnums.BitMask)">
             <summary>
             Clears GPIO 0-31 if the corresponding bit in bits is set.
            
             </summary>
             <example>
             <code>
             // To clear (set to 0) GPIO 4, 7, and 15
             gpioWrite_Bits_0_31_Clear( (1&lt;&lt;4) | (1&lt;&lt;7) | (1&lt;&lt;15) );
             </code>
             </example>
             <param name="bits">a bit mask of GPIO to clear</param>
             <returns>Returns 0 if OK.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioWriteBits32To53Clear(Unosquare.PiGpio.NativeEnums.BitMask)">
             <summary>
             Clears GPIO 32-53 if the corresponding bit (0-31) in bits is set.
            
             </summary>
             <param name="bits">a bit mask of GPIO to clear</param>
             <returns>Returns 0 if OK.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioWriteBits00To31Set(Unosquare.PiGpio.NativeEnums.BitMask)">
             <summary>
             Sets GPIO 0-31 if the corresponding bit in bits is set.
            
             </summary>
             <param name="bits">a bit mask of GPIO to set</param>
             <returns>Returns 0 if OK.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioWriteBits32To53Set(Unosquare.PiGpio.NativeEnums.BitMask)">
             <summary>
             Sets GPIO 32-53 if the corresponding bit (0-21) in bits is set.
            
             </summary>
             <example>
             <code>
             // To set (set to 1) GPIO 32, 40, and 53
             gpioWrite_Bits_32_53_Set((1&lt;&lt;(32-32)) | (1&lt;&lt;(40-32)) | (1&lt;&lt;(53-32)));
             </code>
             </example>
             <param name="bits">a bit mask of GPIO to set</param>
             <returns>Returns 0 if OK.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetAlertFunc(Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeTypes.PiGpioAlertDelegate)">
             <summary>
             Registers a function to be called (a callback) when the specified
             GPIO changes state.
            
             One callback may be registered per GPIO.
            
             The callback is passed the GPIO, the new level, and the tick.
            
             The alert may be cancelled by passing NULL as the function.
            
             The GPIO are sampled at a rate set when the library is started.
            
             If a value isn't specifically set the default of 5 us is used.
            
             The number of samples per second is given in the following table.
            
             Level changes shorter than the sample rate may be missed.
            
             The thread which calls the alert functions is triggered nominally
             1000 times per second.  The active alert functions will be called
             once per level change since the last time the thread was activated.
             i.e. The active alert functions will get all level changes but there
             will be a latency.
            
             The tick value is the time stamp of the sample in microseconds, see
             <see cref="M:Unosquare.PiGpio.NativeMethods.Utilities.GpioTick"/> for more details.
            
             </summary>
             <example>
             <code>
             void aFunction(int gpio, int level, uint tick)
             {
                printf("GPIO %d became %d at %d", gpio, level, tick);
             }
            
             // call aFunction whenever GPIO 4 changes state
            
             gpioSetAlertFunc(4, aFunction);
             </code>
             </example>
             <remarks>
             Parameter   Value    Meaning
            
             GPIO        0-31     The GPIO which has changed state
            
             level       0-2      0 = change to low (a falling edge)
                                  1 = change to high (a rising edge)
                                  2 = no level change (a watchdog timeout)
            
             tick        32 bit   The number of microseconds since boot
                                  WARNING: this wraps around from
                                  4294967295 to 0 roughly every 72 minutes
                           samples
                           per sec
            
                      1  1,000,000
                      2    500,000
             sample   4    250,000
             rate     5    200,000
             (us)     8    125,000
                     10    100,000
             </remarks>
             <param name="userGpio">0-31</param>
             <param name="callback">the callback function</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_USER_GPIO.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetAlertFuncEx(Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeTypes.PiGpioAlertExDelegate,System.UIntPtr)">
             <summary>
             Registers a function to be called (a callback) when the specified
             GPIO changes state.
            
             One callback may be registered per GPIO.
            
             The callback is passed the GPIO, the new level, the tick, and
             the userData pointer.
            
             See <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetAlertFunc(Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeTypes.PiGpioAlertDelegate)"/> for further details.
            
             Only one of <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetAlertFunc(Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeTypes.PiGpioAlertDelegate)"/> or <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetAlertFuncEx(Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeTypes.PiGpioAlertExDelegate,System.UIntPtr)"/> can be
             registered per GPIO.
             </summary>
             <remarks>
             Parameter   Value    Meaning
            
             GPIO        0-31     The GPIO which has changed state
            
             level       0-2      0 = change to low (a falling edge)
                                  1 = change to high (a rising edge)
                                  2 = no level change (a watchdog timeout)
            
             tick        32 bit   The number of microseconds since boot
                                  WARNING: this wraps around from
                                  4294967295 to 0 roughly every 72 minutes
            
             userData    pointer  Pointer to an arbitrary object
             </remarks>
             <param name="userGpio">0-31</param>
             <param name="callback">the callback function</param>
             <param name="userData">pointer to arbitrary user data</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_USER_GPIO.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetWatchdog(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32)">
             <summary>
             Sets a watchdog for a GPIO.
            
             The watchdog is nominally in milliseconds.
            
             One watchdog may be registered per GPIO.
            
             The watchdog may be cancelled by setting timeout to 0.
            
             Until cancelled a timeout will be reported every timeout milliseconds
             after the last GPIO activity.
            
             In particular:
            
             1) any registered alert function for the GPIO will be called with
                the level set to PI_TIMEOUT.
            
             2) any notification for the GPIO will have a report written to the
                fifo with the flags set to indicate a watchdog timeout.
            
             </summary>
             <example>
             <code>
             void aFunction(int gpio, int level, uint tick)
             {
                printf("GPIO %d became %d at %d", gpio, level, tick);
             }
            
             // call aFunction whenever GPIO 4 changes state
             gpioSetAlertFunc(4, aFunction);
            
             //  or approximately every 5 millis
             gpioSetWatchdog(4, 5);
             </code>
             </example>
             <param name="userGpio">0-31</param>
             <param name="timeoutMilliseconds">0-60000</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_USER_GPIO or PI_BAD_WDOG_TIMEOUT.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetIsrFunc(Unosquare.PiGpio.NativeEnums.SystemGpio,Unosquare.PiGpio.NativeEnums.EdgeDetection,System.Int32,Unosquare.PiGpio.NativeTypes.PiGpioIsrDelegate)">
             <summary>
             Registers a function to be called (a callback) whenever the specified
             GPIO interrupt occurs.
            
             One function may be registered per GPIO.
            
             The function is passed the GPIO, the current level, and the
             current tick.  The level will be PI_TIMEOUT if the optional
             interrupt timeout expires.
            
             The underlying Linux sysfs GPIO interface is used to provide
             the interrupt services.
            
             The first time the function is called, with a non-NULL f, the
             GPIO is exported, set to be an input, and set to interrupt
             on the given edge and timeout.
            
             Subsequent calls, with a non-NULL f, can vary one or more of the
             edge, timeout, or function.
            
             The ISR may be cancelled by passing a NULL f, in which case the
             GPIO is unexported.
            
             The tick is that read at the time the process was informed of
             the interrupt.  This will be a variable number of microseconds
             after the interrupt occurred.  Typically the latency will be of
             the order of 50 microseconds.  The latency is not guaranteed
             and will vary with system load.
            
             The level is that read at the time the process was informed of
             the interrupt, or PI_TIMEOUT if the optional interrupt timeout
             expired.  It may not be the same as the expected edge as
             interrupts happening in rapid succession may be missed by the
             kernel (i.e. this mechanism can not be used to capture several
             interrupts only a few microseconds apart).
             </summary>
             <remarks>
             Parameter   Value    Meaning
            
             GPIO        0-53     The GPIO which has changed state
            
             level       0-2      0 = change to low (a falling edge)
                                  1 = change to high (a rising edge)
                                  2 = no level change (interrupt timeout)
            
             tick        32 bit   The number of microseconds since boot
                                  WARNING: this wraps around from
                                  4294967295 to 0 roughly every 72 minutes
             </remarks>
             <param name="gpio">0-53</param>
             <param name="edge">RISING_EDGE, FALLING_EDGE, or EITHER_EDGE</param>
             <param name="timeout">interrupt timeout in milliseconds (&lt;=0 to cancel)</param>
             <param name="callback">the callback function</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_GPIO, PI_BAD_EDGE, or PI_BAD_ISR_INIT.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetIsrFuncEx(Unosquare.PiGpio.NativeEnums.SystemGpio,Unosquare.PiGpio.NativeEnums.EdgeDetection,System.Int32,Unosquare.PiGpio.NativeTypes.PiGpioIsrExDelegate,System.UIntPtr)">
             <summary>
             Registers a function to be called (a callback) whenever the specified
             GPIO interrupt occurs.
            
             The function is passed the GPIO, the current level, the
             current tick, and the userData pointer.
            
             Only one of <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetIsrFunc(Unosquare.PiGpio.NativeEnums.SystemGpio,Unosquare.PiGpio.NativeEnums.EdgeDetection,System.Int32,Unosquare.PiGpio.NativeTypes.PiGpioIsrDelegate)"/> or <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetIsrFuncEx(Unosquare.PiGpio.NativeEnums.SystemGpio,Unosquare.PiGpio.NativeEnums.EdgeDetection,System.Int32,Unosquare.PiGpio.NativeTypes.PiGpioIsrExDelegate,System.UIntPtr)"/> can be
             registered per GPIO.
            
             See <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetIsrFunc(Unosquare.PiGpio.NativeEnums.SystemGpio,Unosquare.PiGpio.NativeEnums.EdgeDetection,System.Int32,Unosquare.PiGpio.NativeTypes.PiGpioIsrDelegate)"/> for further details.
             </summary>
             <remarks>
             Parameter   Value    Meaning
            
             GPIO        0-53     The GPIO which has changed state
            
             level       0-2      0 = change to low (a falling edge)
                                  1 = change to high (a rising edge)
                                  2 = no level change (interrupt timeout)
            
             tick        32 bit   The number of microseconds since boot
                                  WARNING: this wraps around from
                                  4294967295 to 0 roughly every 72 minutes
            
             userData    pointer  Pointer to an arbitrary object
             </remarks>
             <param name="gpio">0-53</param>
             <param name="edge">RISING_EDGE, FALLING_EDGE, or EITHER_EDGE</param>
             <param name="timeout">interrupt timeout in milliseconds (&lt;=0 to cancel)</param>
             <param name="callback">the callback function</param>
             <param name="userData">pointer to arbitrary user data</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_GPIO, PI_BAD_EDGE, or PI_BAD_ISR_INIT.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetGetSamplesFunc(Unosquare.PiGpio.NativeTypes.PiGpioGetSamplesDelegate,Unosquare.PiGpio.NativeEnums.BitMask)">
             <summary>
             Registers a function to be called (a callback) every millisecond
             with the latest GPIO samples.
            
             The function is passed a pointer to the samples (an array of
             <see cref="T:Unosquare.PiGpio.NativeTypes.GpioSample"/>),  and the number of samples.
            
             Only one function can be registered.
            
             The callback may be cancelled by passing NULL as the function.
            
             The samples returned will be the union of bits, plus any active alerts,
             plus any active notifications.
            
             e.g.  if there are alerts for GPIO 7, 8, and 9, notifications for GPIO
             8, 10, 23, 24, and bits is (1&lt;&lt;23)|(1&lt;&lt;17) then samples for GPIO
             7, 8, 9, 10, 17, 23, and 24 will be reported.
             </summary>
             <param name="callback">the function to call</param>
             <param name="bits">the GPIO of interest</param>
             <returns>Returns 0 if OK.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetGetSamplesFuncEx(Unosquare.PiGpio.NativeTypes.PiGpioGetSamplesExDelegate,Unosquare.PiGpio.NativeEnums.BitMask,System.UIntPtr)">
             <summary>
             Registers a function to be called (a callback) every millisecond
             with the latest GPIO samples.
            
             The function is passed a pointer to the samples (an array of
             <see cref="T:Unosquare.PiGpio.NativeTypes.GpioSample"/>), the number of samples, and the userData pointer.
            
             Only one of <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetGetSamplesFunc(Unosquare.PiGpio.NativeTypes.PiGpioGetSamplesDelegate,Unosquare.PiGpio.NativeEnums.BitMask)"/> or <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetGetSamplesFuncEx(Unosquare.PiGpio.NativeTypes.PiGpioGetSamplesExDelegate,Unosquare.PiGpio.NativeEnums.BitMask,System.UIntPtr)"/> can be
             registered.
            
             See <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetGetSamplesFunc(Unosquare.PiGpio.NativeTypes.PiGpioGetSamplesDelegate,Unosquare.PiGpio.NativeEnums.BitMask)"/> for further details.
             </summary>
             <param name="callback">the function to call</param>
             <param name="bits">the GPIO of interest</param>
             <param name="userData">a pointer to arbitrary user data</param>
             <returns>Returns 0 if OK.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioGlitchFilter(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32)">
             <summary>
             Sets a glitch filter on a GPIO.
            
             Level changes on the GPIO are not reported unless the level
             has been stable for at least <paramref name="steadyMicroseconds"/> microseconds.  The
             level is then reported.  Level changes of less than <paramref name="steadyMicroseconds"/>
             microseconds are ignored.
            
             This filter affects the GPIO samples returned to callbacks set up
             with <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetAlertFunc(Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeTypes.PiGpioAlertDelegate)"/>, <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetAlertFuncEx(Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeTypes.PiGpioAlertExDelegate,System.UIntPtr)"/>, <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetGetSamplesFunc(Unosquare.PiGpio.NativeTypes.PiGpioGetSamplesDelegate,Unosquare.PiGpio.NativeEnums.BitMask)"/>,
             and <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetGetSamplesFuncEx(Unosquare.PiGpio.NativeTypes.PiGpioGetSamplesExDelegate,Unosquare.PiGpio.NativeEnums.BitMask,System.UIntPtr)"/>.
            
             It does not affect interrupts set up with <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetIsrFunc(Unosquare.PiGpio.NativeEnums.SystemGpio,Unosquare.PiGpio.NativeEnums.EdgeDetection,System.Int32,Unosquare.PiGpio.NativeTypes.PiGpioIsrDelegate)"/>,
             <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetIsrFuncEx(Unosquare.PiGpio.NativeEnums.SystemGpio,Unosquare.PiGpio.NativeEnums.EdgeDetection,System.Int32,Unosquare.PiGpio.NativeTypes.PiGpioIsrExDelegate,System.UIntPtr)"/>, or levels read by <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioRead(Unosquare.PiGpio.NativeEnums.SystemGpio)"/>,
             <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioReadBits00To31"/>, or <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioReadBits32To53"/>.
            
             Each (stable) edge will be timestamped <paramref name="steadyMicroseconds"/> microseconds
             after it was first detected.
             </summary>
             <param name="userGpio">0-31</param>
             <param name="steadyMicroseconds">0-300000</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_USER_GPIO, or PI_BAD_FILTER.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioNoiseFilter(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32,System.UInt32)">
             <summary>
             Sets a noise filter on a GPIO.
            
             Level changes on the GPIO are ignored until a level which has
             been stable for <paramref name="steadyMicroseconds"/> microseconds is detected.  Level changes
             on the GPIO are then reported for <paramref name="activeMicroseconds"/> microseconds after
             which the process repeats.
            
             This filter affects the GPIO samples returned to callbacks set up
             with <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetAlertFunc(Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeTypes.PiGpioAlertDelegate)"/>, <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetAlertFuncEx(Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeTypes.PiGpioAlertExDelegate,System.UIntPtr)"/>, <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetGetSamplesFunc(Unosquare.PiGpio.NativeTypes.PiGpioGetSamplesDelegate,Unosquare.PiGpio.NativeEnums.BitMask)"/>,
             and <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetGetSamplesFuncEx(Unosquare.PiGpio.NativeTypes.PiGpioGetSamplesExDelegate,Unosquare.PiGpio.NativeEnums.BitMask,System.UIntPtr)"/>.
            
             It does not affect interrupts set up with <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetIsrFunc(Unosquare.PiGpio.NativeEnums.SystemGpio,Unosquare.PiGpio.NativeEnums.EdgeDetection,System.Int32,Unosquare.PiGpio.NativeTypes.PiGpioIsrDelegate)"/>,
             <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetIsrFuncEx(Unosquare.PiGpio.NativeEnums.SystemGpio,Unosquare.PiGpio.NativeEnums.EdgeDetection,System.Int32,Unosquare.PiGpio.NativeTypes.PiGpioIsrExDelegate,System.UIntPtr)"/>, or levels read by <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioRead(Unosquare.PiGpio.NativeEnums.SystemGpio)"/>,
             <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioReadBits00To31"/>, or <see cref="M:Unosquare.PiGpio.NativeMethods.IO.GpioReadBits32To53"/>.
            
             Level changes before and after the active period may
             be reported.  Your software must be designed to cope with
             such reports.
             </summary>
             <param name="userGpio">0-31</param>
             <param name="steadyMicroseconds">0-300000</param>
             <param name="activeMicroseconds">0-1000000</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_USER_GPIO, or PI_BAD_FILTER.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioGetPad(Unosquare.PiGpio.NativeEnums.GpioPadId)">
             <summary>
             This function returns the pad drive strength in mA.
            
             Pad @ GPIO
             0   @ 0-27
             1   @ 28-45
             2   @ 46-53
            
             </summary>
             <example>
             <code>
             strength = gpioGetPad(1); // get pad 1 strength
             </code>
             </example>
             <param name="pad">0-2, the pad to get</param>
             <returns>Returns the pad drive strength if OK, otherwise PI_BAD_PAD.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioSetPad(Unosquare.PiGpio.NativeEnums.GpioPadId,Unosquare.PiGpio.NativeEnums.GpioPadStrength)">
             <summary>
             This function sets the pad drive strength in mA.
            
             Pad @ GPIO
             0   @ 0-27
             1   @ 28-45
             2   @ 46-53
            
             </summary>
             <example>
             <code>
             gpioSetPad(0, 16); // set pad 0 strength to 16 mA
             </code>
             </example>
             <param name="pad">0-2, the pad to set</param>
             <param name="padStrength">1-16 mA</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_PAD, or PI_BAD_STRENGTH.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioReadUnmanaged(Unosquare.PiGpio.NativeEnums.SystemGpio)">
             <summary>
             Reads the GPIO level, on or off.
            
             Arduino style: digitalRead.
            
             </summary>
             <example>
             <code>
             printf("GPIO24 is level %d", gpioRead(24));
             </code>
             </example>
             <param name="gpio">0-53</param>
             <returns>Returns the GPIO level if OK, otherwise PI_BAD_GPIO.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioWriteUnmanaged(Unosquare.PiGpio.NativeEnums.SystemGpio,Unosquare.PiGpio.NativeEnums.DigitalValue)">
             <summary>
             Sets the GPIO level, on or off.
            
             If PWM or servo pulses are active on the GPIO they are switched off.
            
             Arduino style: digitalWrite
            
             </summary>
             <example>
             <code>
             gpioWrite(24, 1); // Set GPIO24 high.
             </code>
             </example>
             <param name="gpio">0-53</param>
             <param name="value">0-1</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_GPIO or PI_BAD_LEVEL.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioGetPadUnmanaged(Unosquare.PiGpio.NativeEnums.GpioPadId)">
             <summary>
             This function returns the pad drive strength in mA.
            
             Pad @ GPIO
             0   @ 0-27
             1   @ 28-45
             2   @ 46-53
            
             </summary>
             <example>
             <code>
             strength = gpioGetPad(1); // get pad 1 strength
             </code>
             </example>
             <param name="pad">0-2, the pad to get</param>
             <returns>Returns the pad drive strength if OK, otherwise PI_BAD_PAD.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioGetModeUnmanaged(Unosquare.PiGpio.NativeEnums.SystemGpio)">
             <summary>
             Gets the GPIO mode.
            
             </summary>
             <example>
             <code>
             if (gpioGetMode(17) != PI_ALT0)
             {
                gpioSetMode(17, PI_ALT0);  // set GPIO17 to ALT0
             }
             </code>
             </example>
             <param name="gpio">0-53</param>
             <returns>Returns the GPIO mode if OK, otherwise PI_BAD_GPIO.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.IO.GpioTriggerUnmanaged(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32,Unosquare.PiGpio.NativeEnums.DigitalValue)">
             <summary>
             This function sends a trigger pulse to a GPIO.  The GPIO is set to
             level for pulseLen microseconds and then reset to not level.
            
             or PI_BAD_PULSELEN.
             </summary>
             <param name="userGpio">0-31</param>
             <param name="pulseLength">1-100</param>
             <param name="value">0,1</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_USER_GPIO, PI_BAD_LEVEL, or PI_BAD_PULSELEN.</returns>
        </member>
        <member name="T:Unosquare.PiGpio.NativeMethods.Pwm">
            <summary>
            Provides methods for software and hardware based PWM services for the GPIO pins.
            All User GPIO pins support PWM.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioPwm(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32)">
             <summary>
             Starts PWM on the GPIO, dutycycle between 0 (off) and range (fully on).
             Range defaults to 255.
            
             Arduino style: analogWrite
            
             This and the servo functionality use the DMA and PWM or PCM peripherals
             to control and schedule the pulse lengths and dutycycles.
            
             The <see cref="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioSetPwmRange(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32)"/> function may be used to change the default
             range of 255.
            
             </summary>
             <example>
             <code>
             gpioPWM(17, 255); // Sets GPIO17 full on.
            
             gpioPWM(18, 128); // Sets GPIO18 half on.
            
             gpioPWM(23, 0);   // Sets GPIO23 full off.
             </code>
             </example>
             <param name="userGpio">0-31</param>
             <param name="dutyCycle">0-range</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_USER_GPIO or PI_BAD_DUTYCYCLE.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioGetPwmDutyCycle(Unosquare.PiGpio.NativeEnums.UserGpio)">
            <summary>
            Gets the PWM duty cycle.
            </summary>
            <param name="userGpio">The user gpio.</param>
            <returns>The PWM duty cycle</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioServo(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32)">
             <summary>
             Starts servo pulses on the GPIO, 0 (off), 500 (most anti-clockwise) to
             2500 (most clockwise).
            
             The range supported by servos varies and should probably be determined
             by experiment.  A value of 1500 should always be safe and represents
             the mid-point of rotation.  You can DAMAGE a servo if you command it
             to move beyond its limits.
            
             The following causes an on pulse of 1500 microseconds duration to be
             transmitted on GPIO 17 at a rate of 50 times per second. This will
             command a servo connected to GPIO 17 to rotate to its mid-point.
            
             OTHER UPDATE RATES:
            
             This function updates servos at 50Hz.  If you wish to use a different
             update frequency you will have to use the PWM functions.
            
             Firstly set the desired PWM frequency using <see cref="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioSetPwmFrequency(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32)"/>.
            
             Then set the PWM range using <see cref="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioSetPwmRange(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32)"/> to 1E6/frequency.
             Doing this allows you to use units of microseconds when setting
             the servo pulsewidth.
            
             E.g. If you want to update a servo connected to GPIO25 at 400Hz
            
             Thereafter use the PWM command to move the servo,
             e.g. gpioPWM(25, 1500) will set a 1500 us pulse.
             </summary>
             <example>
             <code>
             gpioServo(17, 1000); // Move servo to safe position anti-clockwise.
            
             gpioServo(23, 1500); // Move servo to centre position.
            
             gpioServo(25, 2000); // Move servo to safe position clockwise.
             </code>
             </example>
             <remarks>
             PWM Hz    50   100  200  400  500
             1E6/Hz 20000 10000 5000 2500 2000
             gpioSetPWMfrequency(25, 400);
            
             gpioSetPWMrange(25, 2500);
             </remarks>
             <param name="userGpio">0-31</param>
             <param name="pulseWidth">0, 500-2500</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_USER_GPIO or PI_BAD_PULSEWIDTH.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioGetServoPulseWidth(Unosquare.PiGpio.NativeEnums.UserGpio)">
            <summary>
            Returns 0 (off), 500 (most anti-clockwise) to 2500 (most clockwise)
            </summary>
            <param name="userGpio">The user gpio.</param>
            <returns>The Servo pulse width</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioSetPwmRange(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32)">
             <summary>
             Selects the dutycycle range to be used for the GPIO.  Subsequent calls
             to gpioPWM will use a dutycycle between 0 (off) and range (fully on).
            
             If PWM is currently active on the GPIO its dutycycle will be scaled
             to reflect the new range.
            
             The real range, the number of steps between fully off and fully
             on for each frequency, is given in the following table.
            
             The real value set by <see cref="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioPwm(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32)"/> is (dutycycle * real range) / range.
            
             </summary>
             <example>
             <code>
             gpioSetPWMrange(24, 2000); // Now 2000 is fully on
                                        //     1000 is half on
                                        //      500 is quarter on, etc.
             </code>
             </example>
             <remarks>
               25,   50,  100,  125,  200,  250,  400,   500,   625,
              800, 1000, 1250, 2000, 2500, 4000, 5000, 10000, 20000
             </remarks>
             <param name="userGpio">0-31</param>
             <param name="range">25-40000</param>
             <returns>Returns the real range for the given GPIO's frequency if OK, otherwise PI_BAD_USER_GPIO or PI_BAD_DUTYRANGE.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioGetPwmRange(Unosquare.PiGpio.NativeEnums.UserGpio)">
             <summary>
            
             If a hardware clock or hardware PWM is active on the GPIO
             the reported range will be 1000000 (1M).
            
             </summary>
             <example>
             <code>
             r = gpioGetPWMrange(23);
             </code>
             </example>
             <param name="userGpio">0-31</param>
             <returns>Returns the dutycycle range used for the GPIO if OK, otherwise PI_BAD_USER_GPIO.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioGetPwmRealRange(Unosquare.PiGpio.NativeEnums.UserGpio)">
             <summary>
             If a hardware clock is active on the GPIO the reported real
             range will be 1000000 (1M).
            
             If hardware PWM is active on the GPIO the reported real range
             will be approximately 250M divided by the set PWM frequency.
            
             </summary>
             <example>
             <code>
             rr = gpioGetPWMrealRange(17);
             </code>
             </example>
             <param name="userGpio">0-31</param>
             <returns>Returns the real range used for the GPIO if OK, otherwise PI_BAD_USER_GPIO.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioSetPwmFrequency(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32)">
             <summary>
             Sets the frequency in hertz to be used for the GPIO.
            
             If PWM is currently active on the GPIO it will be
             switched off and then back on at the new frequency.
            
             Each GPIO can be independently set to one of 18 different PWM
             frequencies.
            
             The selectable frequencies depend upon the sample rate which
             may be 1, 2, 4, 5, 8, or 10 microseconds (default 5).
            
             The frequencies for each sample rate are:
            
             </summary>
             <example>
             <code>
             gpioSetPWMfrequency(23, 0); // Set GPIO23 to lowest frequency.
            
             gpioSetPWMfrequency(24, 500); // Set GPIO24 to 500Hz.
            
             gpioSetPWMfrequency(25, 100000); // Set GPIO25 to highest frequency.
             </code>
             </example>
             <remarks>
                                    Hertz
            
                    1: 40000 20000 10000 8000 5000 4000 2500 2000 1600
                        1250  1000   800  500  400  250  200  100   50
            
                    2: 20000 10000  5000 4000 2500 2000 1250 1000  800
                         625   500   400  250  200  125  100   50   25
            
                    4: 10000  5000  2500 2000 1250 1000  625  500  400
                         313   250   200  125  100   63   50   25   13
             sample
              rate
              (us)  5:  8000  4000  2000 1600 1000  800  500  400  320
                         250   200   160  100   80   50   40   20   10
            
                    8:  5000  2500  1250 1000  625  500  313  250  200
                         156   125   100   63   50   31   25   13    6
            
                   10:  4000  2000  1000  800  500  400  250  200  160
                         125   100    80   50   40   25   20   10    5
             </remarks>
             <param name="userGpio">0-31</param>
             <param name="frequency">&gt;=0</param>
             <returns>Returns the numerically closest frequency if OK, otherwise PI_BAD_USER_GPIO.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioGetPwmFrequency(Unosquare.PiGpio.NativeEnums.UserGpio)">
             <summary>
            
             For normal PWM the frequency will be that defined for the GPIO by
             <see cref="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioSetPwmFrequency(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32)"/>.
            
             If a hardware clock is active on the GPIO the reported frequency
             will be that set by <see cref="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioHardwareClock(Unosquare.PiGpio.NativeEnums.SystemGpio,System.UInt32)"/>.
            
             If hardware PWM is active on the GPIO the reported frequency
             will be that set by <see cref="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioHardwarePwm(Unosquare.PiGpio.NativeEnums.SystemGpio,System.UInt32,System.UInt32)"/>.
            
             </summary>
             <example>
             <code>
             f = gpioGetPWMfrequency(23); // Get frequency used for GPIO23.
             </code>
             </example>
             <param name="userGpio">0-31</param>
             <returns>Returns the frequency (in hertz) used for the GPIO if OK, otherwise PI_BAD_USER_GPIO.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioHardwareClock(Unosquare.PiGpio.NativeEnums.SystemGpio,System.UInt32)">
             <summary>
             Starts a hardware clock on a GPIO at the specified frequency.
             Frequencies above 30MHz are unlikely to work.
            
             The same clock is available on multiple GPIO.  The latest
             frequency setting will be used by all GPIO which share a clock.
            
             The GPIO must be one of the following.
            
             Access to clock 1 is protected by a password as its use will likely
             crash the Pi.  The password is given by or'ing 0x5A000000 with the
             GPIO number.
             </summary>
             <remarks>
             4   clock 0  All models
             5   clock 1  All models but A and B (reserved for system use)
             6   clock 2  All models but A and B
             20  clock 0  All models but A and B
             21  clock 1  All models but A and Rev.2 B (reserved for system use)
            
             32  clock 0  Compute module only
             34  clock 0  Compute module only
             42  clock 1  Compute module only (reserved for system use)
             43  clock 2  Compute module only
             44  clock 1  Compute module only (reserved for system use)
             </remarks>
             <param name="gpio">see description</param>
             <param name="clockFrequency">0 (off) or 4689-250000000 (250M)</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_GPIO, PI_NOT_HCLK_GPIO, PI_BAD_HCLK_FREQ,or PI_BAD_HCLK_PASS.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioHardwarePwm(Unosquare.PiGpio.NativeEnums.SystemGpio,System.UInt32,System.UInt32)">
             <summary>
             Starts hardware PWM on a GPIO at the specified frequency and dutycycle.
             Frequencies above 30MHz are unlikely to work.
            
             NOTE: Any waveform started by <see cref="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveTxSend(System.UInt32,Unosquare.PiGpio.NativeEnums.WaveMode)"/>, or
             <see cref="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveChain(System.Byte[],System.UInt32)"/> will be cancelled.
            
             This function is only valid if the pigpio main clock is PCM.  The
             main clock defaults to PCM but may be overridden by a call to
             <see cref="M:Unosquare.PiGpio.NativeMethods.Setup.GpioCfgClock(System.UInt32,Unosquare.PiGpio.NativeEnums.CpuPeripheral)"/>.
            
             The same PWM channel is available on multiple GPIO.  The latest
             frequency and dutycycle setting will be used by all GPIO which
             share a PWM channel.
            
             The GPIO must be one of the following.
            
             The actual number of steps beween off and fully on is the
             integral part of 250 million divided by PWMfreq.
            
             The actual frequency set is 250 million / steps.
            
             There will only be a million steps for a PWMfreq of 250.
             Lower frequencies will have more steps and higher
             frequencies will have fewer steps.  PWMduty is
             automatically scaled to take this into account.
             </summary>
             <remarks>
             12  PWM channel 0  All models but A and B
             13  PWM channel 1  All models but A and B
             18  PWM channel 0  All models
             19  PWM channel 1  All models but A and B
            
             40  PWM channel 0  Compute module only
             41  PWM channel 1  Compute module only
             45  PWM channel 1  Compute module only
             52  PWM channel 0  Compute module only
             53  PWM channel 1  Compute module only
             </remarks>
             <param name="gpio">see description</param>
             <param name="pwmFrequency">0 (off) or 1-125000000 (125M)</param>
             <param name="pwmDytuCycle">0 (off) to 1000000 (1M)(fully on)</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_GPIO, PI_NOT_HPWM_GPIO, PI_BAD_HPWM_DUTY, PI_BAD_HPWM_FREQ, or PI_HPWM_ILLEGAL.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioGetServoPulseWidthUnmanaged(Unosquare.PiGpio.NativeEnums.UserGpio)">
            <summary>
            if OK, otherwise PI_BAD_USER_GPIO or PI_NOT_SERVO_GPIO.
            </summary>
            <param name="userGpio">0-31</param>
            <returns>Returns 0 (off), 500 (most anti-clockwise) to 2500 (most clockwise) if OK, otherwise PI_BAD_USER_GPIO or PI_NOT_SERVO_GPIO.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioGetPwmDutyCycleUnmanaged(Unosquare.PiGpio.NativeEnums.UserGpio)">
             <summary>
            
             For normal PWM the dutycycle will be out of the defined range
             for the GPIO (see <see cref="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioGetPwmRange(Unosquare.PiGpio.NativeEnums.UserGpio)"/>).
            
             If a hardware clock is active on the GPIO the reported dutycycle
             will be 500000 (500k) out of 1000000 (1M).
            
             If hardware PWM is active on the GPIO the reported dutycycle
             will be out of a 1000000 (1M).
            
             Normal PWM range defaults to 255.
             </summary>
             <param name="userGpio">0-31</param>
             <returns>Returns between 0 (off) and range (fully on) if OK, otherwise PI_BAD_USER_GPIO or PI_NOT_PWM_GPIO.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioGetPwmRealRangeUnmanaged(Unosquare.PiGpio.NativeEnums.UserGpio)">
             <summary>
             If a hardware clock is active on the GPIO the reported real
             range will be 1000000 (1M).
            
             If hardware PWM is active on the GPIO the reported real range
             will be approximately 250M divided by the set PWM frequency.
            
             </summary>
             <example>
             <code>
             rr = gpioGetPWMrealRange(17);
             </code>
             </example>
             <param name="userGpio">0-31</param>
             <returns>Returns the real range used for the GPIO if OK, otherwise PI_BAD_USER_GPIO.</returns>
        </member>
        <member name="T:Unosquare.PiGpio.NativeMethods.RawWaves">
            <summary>
            Raw waveform generation methods. These are advanced methods to send pulses on the pins
            with precise timing. It is recommended that the <see cref="T:Unosquare.PiGpio.NativeMethods.Waves"/> methods are used instead.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.RawWaves.RawWaveAddSPI(Unosquare.PiGpio.NativeTypes.RawSpiData,System.UInt32,System.UInt32,System.Byte[],System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
             <summary>
             This function adds a waveform representing SPI data to the
             existing waveform (if any).
            
             Not intended for general use.
             </summary>
             <param name="spi">a pointer to a spi object</param>
             <param name="offset">microseconds from the start of the waveform</param>
             <param name="spiSS">the slave select GPIO</param>
             <param name="buffer">the bits to transmit, most significant bit first</param>
             <param name="spiTxBits">the number of bits to write</param>
             <param name="spiBitFirst">the first bit to read</param>
             <param name="spiBitLast">the last bit to read</param>
             <param name="spiBits">the number of bits to transfer</param>
             <returns>Returns the new total number of pulses in the current waveform if OK, otherwise PI_BAD_USER_GPIO, PI_BAD_SER_OFFSET, or PI_TOO_MANY_PULSES.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.RawWaves.RawWaveAddGeneric(System.UInt32,Unosquare.PiGpio.NativeTypes.RawWave[])">
             <summary>
             This function adds a number of pulses to the current waveform.
            
             The advantage of this function over gpioWaveAddGeneric is that it
             allows the setting of the flags field.
            
             The pulses are interleaved in time order within the existing waveform
             (if any).
            
             Merging allows the waveform to be built in parts, that is the settings
             for GPIO#1 can be added, and then GPIO#2 etc.
            
             If the added waveform is intended to start after or within the existing
             waveform then the first pulse should consist of a delay.
            
             Not intended for general use.
             </summary>
             <param name="numPulses">the number of pulses</param>
             <param name="pulses">the array containing the pulses</param>
             <returns>Returns the new total number of pulses in the current waveform if OK, otherwise PI_TOO_MANY_PULSES.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.RawWaves.RawWaveCB">
            <summary>
            Not intended for general use.
            </summary>
            <returns>Returns the number of the cb being currently output.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.RawWaves.RawWaveCBAdr(System.Int32)">
             <summary>
             Return the (Linux) address of contol block cbNum.
            
             Not intended for general use.
             </summary>
             <param name="controlBlockNumber">the cb of interest</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.RawWaves.RawWaveGetOOL(System.Int32)">
             <summary>
             Gets the OOL parameter stored at pos.
            
             Not intended for general use.
             </summary>
             <param name="position">the position of interest.</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.RawWaves.RawWaveSetOOL(System.Int32,System.UInt32)">
             <summary>
             Sets the OOL parameter stored at pos to value.
            
             Not intended for general use.
             </summary>
             <param name="position">the position of interest</param>
             <param name="value">the value to write</param>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.RawWaves.RawWaveGetOut(System.Int32)">
             <summary>
             Gets the wave output parameter stored at pos.
            
             DEPRECATED: use rawWaveGetOOL instead.
            
             Not intended for general use.
             </summary>
             <param name="position">the position of interest.</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.RawWaves.RawWaveSetOut(System.Int32,System.UInt32)">
             <summary>
             Sets the wave output parameter stored at pos to value.
            
             DEPRECATED: use rawWaveSetOOL instead.
            
             Not intended for general use.
             </summary>
             <param name="position">the position of interest</param>
             <param name="value">the value to write</param>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.RawWaves.RawWaveGetIn(System.Int32)">
             <summary>
             Gets the wave input value parameter stored at pos.
            
             DEPRECATED: use rawWaveGetOOL instead.
            
             Not intended for general use.
             </summary>
             <param name="position">the position of interest</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.RawWaves.RawWaveSetIn(System.Int32,System.UInt32)">
             <summary>
             Sets the wave input value stored at pos to value.
            
             DEPRECATED: use rawWaveSetOOL instead.
            
             Not intended for general use.
             </summary>
             <param name="position">the position of interest</param>
             <param name="value">the value to write</param>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.RawWaves.RawWaveInfo(System.Int32)">
             <summary>
             Gets details about the wave with id wave_id.
            
             Not intended for general use.
             </summary>
             <param name="waveId">the wave of interest</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.RawWaves.RawDumpWave">
             <summary>
             Used to print a readable version of the current waveform to stderr.
            
             Not intended for general use.
             </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeMethods.Scripts">
            <summary>
            Provides access to scripting methods of the pigpio library. Scripts are used by the
            pigpio daemon to execute a set of instructions to speedup GPIO instructions.
            Unused in the managed model of this library but provided for reference purposes.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Scripts.GpioStoreScript(System.String)">
             <summary>
             This function stores a null terminated script for later execution.
            
             See [[http://abyz.me.uk/rpi/pigpio/pigs.html#Scripts]] for details.
            
             The function returns a script id if the script is valid,
             otherwise PI_BAD_SCRIPT.
             </summary>
             <param name="script">the text of the script</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Scripts.GpioRunScript(System.UInt32,System.UInt32,System.UInt32[])">
             <summary>
             This function runs a stored script.
            
             The function returns 0 if OK, otherwise PI_BAD_SCRIPT_ID, or
             PI_TOO_MANY_PARAM.
            
             param is an array of up to 10 parameters which may be referenced in
             the script as p0 to p9.
             </summary>
             <param name="script_id">&gt;=0, as returned by <see cref="M:Unosquare.PiGpio.NativeMethods.Scripts.GpioStoreScript(System.String)"/></param>
             <param name="numPar">0-10, the number of parameters</param>
             <param name="param">an array of parameters</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Scripts.GpioUpdateScript(System.UInt32,System.UInt32,System.UInt32[])">
             <summary>
             This function sets the parameters of a script.  The script may or
             may not be running.  The first numPar parameters of the script are
             overwritten with the new values.
            
             The function returns 0 if OK, otherwise PI_BAD_SCRIPT_ID, or
             PI_TOO_MANY_PARAM.
            
             param is an array of up to 10 parameters which may be referenced in
             the script as p0 to p9.
             </summary>
             <param name="script_id">&gt;=0, as returned by <see cref="M:Unosquare.PiGpio.NativeMethods.Scripts.GpioStoreScript(System.String)"/></param>
             <param name="numPar">0-10, the number of parameters</param>
             <param name="param">an array of parameters</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Scripts.GpioScriptStatus(System.UInt32,System.UInt32[])">
             <summary>
             This function returns the run status of a stored script as well as
             the current values of parameters 0 to 9.
            
             The function returns greater than or equal to 0 if OK,
             otherwise PI_BAD_SCRIPT_ID.
            
             The run status may be
            
             The current value of script parameters 0 to 9 are returned in param.
             </summary>
             <remarks>
             PI_SCRIPT_INITING
             PI_SCRIPT_HALTED
             PI_SCRIPT_RUNNING
             PI_SCRIPT_WAITING
             PI_SCRIPT_FAILED
             </remarks>
             <param name="script_id">&gt;=0, as returned by <see cref="M:Unosquare.PiGpio.NativeMethods.Scripts.GpioStoreScript(System.String)"/></param>
             <param name="param">an array to hold the returned 10 parameters</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Scripts.GpioStopScript(System.UInt32)">
             <summary>
             This function stops a running script.
            
             The function returns 0 if OK, otherwise PI_BAD_SCRIPT_ID.
             </summary>
             <param name="script_id">&gt;=0, as returned by <see cref="M:Unosquare.PiGpio.NativeMethods.Scripts.GpioStoreScript(System.String)"/></param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Scripts.GpioDeleteScript(System.UInt32)">
             <summary>
             This function deletes a stored script.
            
             The function returns 0 if OK, otherwise PI_BAD_SCRIPT_ID.
             </summary>
             <param name="script_id">&gt;=0, as returned by <see cref="M:Unosquare.PiGpio.NativeMethods.Scripts.GpioStoreScript(System.String)"/></param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Scripts.RawDumpScript(System.UInt32)">
             <summary>
             Used to print a readable version of a script to stderr.
            
             Not intended for general use.
             </summary>
             <param name="scriptId">&gt;=0, a script_id returned by <see cref="M:Unosquare.PiGpio.NativeMethods.Scripts.GpioStoreScript(System.String)"/></param>
        </member>
        <member name="T:Unosquare.PiGpio.NativeMethods.Serial">
            <summary>
            Exposes methods to read from a serial transmission using bit-banging (software-based UART).
            Writing requires the use of the <see cref="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveAddSerial(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[])"/> method.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Serial.GpioSerialReadOpen(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32,System.UInt32)">
             <summary>
             This function opens a GPIO for bit bang reading of serial data.
            
             The serial data is returned in a cyclic buffer and is read using
             <see cref="M:Unosquare.PiGpio.NativeMethods.Serial.GpioSerialRead(Unosquare.PiGpio.NativeEnums.UserGpio,System.Int32)"/>.
            
             It is the caller's responsibility to read data from the cyclic buffer
             in a timely fashion.
             </summary>
             <param name="userGpio">0-31</param>
             <param name="baudRate">50-250000</param>
             <param name="dataBits">1-32</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_USER_GPIO, PI_BAD_WAVE_BAUD, PI_BAD_DATABITS, or PI_GPIO_IN_USE.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Serial.GpioSerialReadInvert(Unosquare.PiGpio.NativeEnums.UserGpio,System.Boolean)">
             <summary>
             This function configures the level logic for bit bang serial reads.
            
             Use PI_BB_SER_INVERT to invert the serial logic and PI_BB_SER_NORMAL for
             normal logic.  Default is PI_BB_SER_NORMAL.
            
             The GPIO must be opened for bit bang reading of serial data using
             <see cref="M:Unosquare.PiGpio.NativeMethods.Serial.GpioSerialReadOpen(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32,System.UInt32)"/> prior to calling this function.
             </summary>
             <param name="userGpio">0-31</param>
             <param name="invert">0-1</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_USER_GPIO, PI_GPIO_IN_USE, PI_NOT_SERIAL_GPIO, or PI_BAD_SER_INVERT.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Serial.GpioSerialRead(Unosquare.PiGpio.NativeEnums.UserGpio,System.Byte[],System.Int32)">
            <summary>
            Wrapper for the native <see cref="M:Unosquare.PiGpio.NativeMethods.Serial.GpioSerialReadUnmanaged(Unosquare.PiGpio.NativeEnums.UserGpio,System.Byte[],System.UInt32)"/>
            </summary>
            <param name="userGpio">The user gpio.</param>
            <param name="buffer">The buffer.</param>
            <param name="readLength">Length of the read.</param>
            <returns>The amount of bytes read</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Serial.GpioSerialRead(Unosquare.PiGpio.NativeEnums.UserGpio,System.Int32)">
            <summary>
            Wrapper for the native <see cref="M:Unosquare.PiGpio.NativeMethods.Serial.GpioSerialReadUnmanaged(Unosquare.PiGpio.NativeEnums.UserGpio,System.Byte[],System.UInt32)"/>
            </summary>
            <param name="userGpio">The user gpio.</param>
            <param name="readLength">Length of the read.</param>
            <returns>The array containing the bytes that were read</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Serial.GpioSerialReadClose(Unosquare.PiGpio.NativeEnums.UserGpio)">
             <summary>
             This function closes a GPIO for bit bang reading of serial data.
            
             </summary>
             <param name="userGpio">0-31, previously opened with <see cref="M:Unosquare.PiGpio.NativeMethods.Serial.GpioSerialReadOpen(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32,System.UInt32)"/></param>
             <returns>Returns 0 if OK, otherwise PI_BAD_USER_GPIO, or PI_NOT_SERIAL_GPIO.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Serial.GpioSerialReadUnmanaged(Unosquare.PiGpio.NativeEnums.UserGpio,System.Byte[],System.UInt32)">
             <summary>
             This function copies up to bufSize bytes of data read from the
             bit bang serial cyclic buffer to the buffer starting at buf.
            
             The bytes returned for each character depend upon the number of
             data bits data bits specified in the <see cref="M:Unosquare.PiGpio.NativeMethods.Serial.GpioSerialReadOpen(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32,System.UInt32)"/> command.
            
             For data bits 1-8 there will be one byte per character.
             For data bits 9-16 there will be two bytes per character.
             For data bits 17-32 there will be four bytes per character.
             </summary>
             <param name="userGpio">0-31, previously opened with <see cref="M:Unosquare.PiGpio.NativeMethods.Serial.GpioSerialReadOpen(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32,System.UInt32)"/></param>
             <param name="buffer">an array to receive the read bytes</param>
             <param name="bufferSize">&gt;=0</param>
             <returns>Returns the number of bytes copied if OK, otherwise PI_BAD_USER_GPIO or PI_NOT_SERIAL_GPIO.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Serial.GpioSerialReadInvertUnmanaged(Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeEnums.DigitalValue)">
             <summary>
             This function configures the level logic for bit bang serial reads.
            
             Use PI_BB_SER_INVERT to invert the serial logic and PI_BB_SER_NORMAL for
             normal logic.  Default is PI_BB_SER_NORMAL.
            
             The GPIO must be opened for bit bang reading of serial data using
             <see cref="M:Unosquare.PiGpio.NativeMethods.Serial.GpioSerialReadOpen(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32,System.UInt32)"/> prior to calling this function.
             </summary>
             <param name="userGpio">0-31</param>
             <param name="invert">0-1</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_USER_GPIO, PI_GPIO_IN_USE, PI_NOT_SERIAL_GPIO, or PI_BAD_SER_INVERT.</returns>
        </member>
        <member name="T:Unosquare.PiGpio.NativeMethods.Setup">
            <summary>
            Library setup and configuration methods.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Setup.GpioInitialise">
             <summary>
             Initialises the library.
            
             gpioInitialise must be called before using the other library functions
             with the following exceptions:
            
             </summary>
             <example>
             <code>
             if (gpioInitialise() &lt; 0)
             {
                // pigpio initialisation failed.
             }
             else
             {
                // pigpio initialised okay.
             }
             </code>
             </example>
             <remarks>
             GpioCfg methods.
             <see cref="M:Unosquare.PiGpio.NativeMethods.Utilities.GpioVersion"/>
             <see cref="M:Unosquare.PiGpio.NativeMethods.Utilities.GpioHardwareRevision"/>
             </remarks>
             <returns>Returns the pigpio version number if OK, otherwise PI_INIT_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Setup.GpioTerminate">
             <summary>
             Terminates the library.
            
             Returns nothing.
            
             Call before program exit.
            
             This function resets the used DMA channels, releases memory, and
             terminates any running threads.
            
             </summary>
             <example>
             <code>
             gpioTerminate();
             </code>
             </example>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Setup.GpioCfgBufferSize(System.UInt32)">
             <summary>
             Configures pigpio to buffer cfgMillis milliseconds of GPIO samples.
            
             This function is only effective if called before <see cref="M:Unosquare.PiGpio.NativeMethods.Setup.GpioInitialise"/>.
            
             The default setting is 120 milliseconds.
            
             The intention is to allow for bursts of data and protection against
             other processes hogging cpu time.
            
             I haven't seen a process locked out for more than 100 milliseconds.
            
             Making the buffer bigger uses a LOT of memory at the more frequent
             sampling rates as shown in the following table in MBs.
            
             </summary>
             <remarks>
                                  buffer milliseconds
                            120 250 500 1sec 2sec 4sec 8sec
            
                      1      16  31  55  107  ---  ---  ---
                      2      10  18  31   55  107  ---  ---
             sample   4       8  12  18   31   55  107  ---
              rate    5       8  10  14   24   45   87  ---
              (us)    8       6   8  12   18   31   55  107
                     10       6   8  10   14   24   45   87
             </remarks>
             <param name="milliSecs">100-10000</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Setup.GpioCfgClock(System.UInt32,Unosquare.PiGpio.NativeEnums.CpuPeripheral)">
             <summary>
             Configures pigpio to use a particular sample rate timed by a specified
             peripheral.
            
             This function is only effective if called before <see cref="M:Unosquare.PiGpio.NativeMethods.Setup.GpioInitialise"/>.
            
             The timings are provided by the specified peripheral (PWM or PCM).
            
             The default setting is 5 microseconds using the PCM peripheral.
            
             The approximate CPU percentage used for each sample rate is:
            
             A sample rate of 5 microseconds seeems to be the sweet spot.
             </summary>
             <remarks>
             sample  cpu
              rate    %
            
               1     25
               2     16
               4     11
               5     10
               8     15
              10     14
             </remarks>
             <param name="microSecs">1, 2, 4, 5, 8, 10</param>
             <param name="peripheral">0 (PWM), 1 (PCM)</param>
             <returns>The result code.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Setup.GpioCfgDmaChannel(Unosquare.PiGpio.NativeEnums.DmaChannel)">
            <summary>
            Configures pigpio to use the specified DMA channel.
            This function is only effective if called before <see cref="M:Unosquare.PiGpio.NativeMethods.Setup.GpioInitialise" />.
            The default setting is to use channel 14.
            </summary>
            <param name="dmaChannel">The DMA channel.</param>
            <returns>
            The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode" /> enumeration.
            </returns>
            <remarks>
            DMAchannel: 0-14
            </remarks>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Setup.GpioCfgDmaChannels(Unosquare.PiGpio.NativeEnums.DmaChannel,Unosquare.PiGpio.NativeEnums.DmaChannel)">
             <summary>
             Configures pigpio to use the specified DMA channels.
            
             This function is only effective if called before <see cref="M:Unosquare.PiGpio.NativeMethods.Setup.GpioInitialise"/>.
            
             The default setting is to use channel 14 for the primary channel and
             channel 6 for the secondary channel.
            
             The secondary channel is only used for the transmission of waves.
            
             If possible use one of channels 0 to 6 for the secondary channel
             (a full channel).
            
             A full channel only requires one DMA control block regardless of the
             length of a pulse delay.  Channels 7 to 14 (lite channels) require
             one DMA control block for each 16383 microseconds of delay.  I.e.
             a 10 second pulse delay requires one control block on a full channel
             and 611 control blocks on a lite channel.
             </summary>
             <param name="primaryChannel">Channel 1: 0-14</param>
             <param name="secondaryChannel">Channel 2: 0-14</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Setup.GpioCfgPermissions(System.UInt64)">
             <summary>
             Configures pigpio to restrict GPIO updates via the socket or pipe
             interfaces to the GPIO specified by the mask.  Programs directly
             calling the pigpio library (i.e. linked with -lpigpio are not
             affected).  A GPIO update is a write to a GPIO or a GPIO mode
             change or any function which would force such an action.
            
             This function is only effective if called before <see cref="M:Unosquare.PiGpio.NativeMethods.Setup.GpioInitialise"/>.
            
             The default setting depends upon the Pi model. The user GPIO are
             added to the mask.
            
             If the board revision is not recognised then GPIO 2-27 are allowed.
            
             Unknown board @ PI_DEFAULT_UPDATE_MASK_UNKNOWN @ 0x0FFFFFFC
             Type 1 board  @ PI_DEFAULT_UPDATE_MASK_B1 @ 0x03E6CF93
             Type 2 board  @ PI_DEFAULT_UPDATE_MASK_A_B2 @ 0xFBC6CF9C
             Type 3 board  @ PI_DEFAULT_UPDATE_MASK_R3 @ 0x0FFFFFFC
             </summary>
             <param name="updateMask">bit (1&lt;&lt;n) is set for each GPIO n which may be updated</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Setup.GpioCfgSocketPort(System.UInt32)">
             <summary>
             Configures pigpio to use the specified socket port.
            
             This function is only effective if called before <see cref="M:Unosquare.PiGpio.NativeMethods.Setup.GpioInitialise"/>.
            
             The default setting is to use port 8888.
             </summary>
             <param name="port">1024-32000</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Setup.GpioCfgInterfaces(Unosquare.PiGpio.NativeEnums.InterfaceFlags)">
             <summary>
             Configures pigpio support of the fifo and socket interfaces.
            
             This function is only effective if called before <see cref="M:Unosquare.PiGpio.NativeMethods.Setup.GpioInitialise"/>.
            
             The default setting (0) is that both interfaces are enabled.
            
             Or in PI_DISABLE_FIFO_IF to disable the pipe interface.
            
             Or in PI_DISABLE_SOCK_IF to disable the socket interface.
            
             Or in PI_LOCALHOST_SOCK_IF to disable remote socket
             access (this means that the socket interface is only
             usable from the local Pi).
             </summary>
             <param name="interfaceFlags">0-7</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Setup.GpioCfgMemAlloc(Unosquare.PiGpio.NativeEnums.AllocationMode)">
             <summary>
             Selects the method of DMA memory allocation.
            
             This function is only effective if called before <see cref="M:Unosquare.PiGpio.NativeMethods.Setup.GpioInitialise"/>.
            
             There are two methods of DMA memory allocation.  The original method
             uses the /proc/self/pagemap file to allocate bus memory.  The new
             method uses the mailbox property interface to allocate bus memory.
            
             Auto will use the mailbox method unless a larger than default buffer
             size is requested with <see cref="M:Unosquare.PiGpio.NativeMethods.Setup.GpioCfgBufferSize(System.UInt32)"/>.
             </summary>
             <param name="allocationMode">0-2</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Setup.GpioCfgNetAddr(System.UInt32[])">
             <summary>
             Sets the network addresses which are allowed to talk over the
             socket interface.
            
             This function is only effective if called before <see cref="M:Unosquare.PiGpio.NativeMethods.Setup.GpioInitialise"/>.
            
             </summary>
             <param name="socketAddresses">an array of permitted network addresses. An empty array means ALL</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Setup.GpioCfgInternals(System.UInt32,System.UInt32)">
             <summary>
             Used to tune internal settings.
            
             </summary>
             <param name="key">Key: see source code</param>
             <param name="value">Value: see source code</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Setup.GpioCfgGetInternals">
            <summary>
            This function returns the current library internal configuration
            settings.
            </summary>
            <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Setup.GpioCfgSetInternals(Unosquare.PiGpio.NativeEnums.ConfigFlags)">
             <summary>
             This function sets the current library internal configuration
             settings.
            
             </summary>
             <param name="configFlags">see source code</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Setup.GpioCfgClockUnmanaged(System.UInt32,Unosquare.PiGpio.NativeEnums.CpuPeripheral,System.UInt32)">
             <summary>
             Configures pigpio to use a particular sample rate timed by a specified
             peripheral.
            
             This function is only effective if called before <see cref="M:Unosquare.PiGpio.NativeMethods.Setup.GpioInitialise"/>.
            
             The timings are provided by the specified peripheral (PWM or PCM).
            
             The default setting is 5 microseconds using the PCM peripheral.
            
             The approximate CPU percentage used for each sample rate is:
            
             A sample rate of 5 microseconds seeems to be the sweet spot.
             </summary>
             <remarks>
             sample  cpu
              rate    %
            
               1     25
               2     16
               4     11
               5     10
               8     15
              10     14
             </remarks>
             <param name="microSecs">1, 2, 4, 5, 8, 10</param>
             <param name="peripheral">0 (PWM), 1 (PCM)</param>
             <param name="configSource">deprecated, value is ignored</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Setup.GpioCfgNetAddrUnmanaged(System.Int32,System.UInt32[])">
             <summary>
             Sets the network addresses which are allowed to talk over the
             socket interface.
            
             This function is only effective if called before <see cref="M:Unosquare.PiGpio.NativeMethods.Setup.GpioInitialise"/>.
            
             </summary>
             <param name="numSockAddr">0-256 (0 means all addresses allowed)</param>
             <param name="sockAddr">an array of permitted network addresses.</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="T:Unosquare.PiGpio.NativeMethods.Spi">
            <summary>
            Provides methods for SPI bus management.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Spi.SpiOpen(Unosquare.PiGpio.NativeEnums.SpiChannelId,System.Int32,Unosquare.PiGpio.NativeEnums.SpiFlags)">
             <summary>
             This function returns a handle for the SPI device on the channel.
             Data will be transferred at baud bits per second.  The flags may
             be used to modify the default behaviour of 4-wire operation, mode 0,
             active low chip select.
            
             An auxiliary SPI device is available on all models but the
             A and B and may be selected by setting the A bit in the flags.
             The auxiliary device has 3 chip selects and a selectable word
             size in bits.
            
             spiFlags consists of the least significant 22 bits.
            
             mm defines the SPI mode.
            
             Warning: modes 1 and 3 do not appear to work on the auxiliary device.
            
             px is 0 if CEx is active low (default) and 1 for active high.
            
             ux is 0 if the CEx GPIO is reserved for SPI (default) and 1 otherwise.
            
             A is 0 for the standard SPI device, 1 for the auxiliary SPI.
            
             W is 0 if the device is not 3-wire, 1 if the device is 3-wire.  Standard
             SPI device only.
            
             nnnn defines the number of bytes (0-15) to write before switching
             the MOSI line to MISO to read data.  This field is ignored
             if W is not set.  Standard SPI device only.
            
             T is 1 if the least significant bit is transmitted on MOSI first, the
             default (0) shifts the most significant bit out first.  Auxiliary SPI
             device only.
            
             R is 1 if the least significant bit is received on MISO first, the
             default (0) receives the most significant bit first.  Auxiliary SPI
             device only.
            
             bbbbbb defines the word size in bits (0-32).  The default (0)
             sets 8 bits per word.  Auxiliary SPI device only.
            
             The <see cref="M:Unosquare.PiGpio.NativeMethods.Spi.SpiRead(System.UIntPtr,System.Int32)"/>, <see cref="M:Unosquare.PiGpio.NativeMethods.Spi.SpiWrite(System.UIntPtr,System.Byte[])"/>, and <see cref="M:Unosquare.PiGpio.NativeMethods.Spi.SpiXfer(System.UIntPtr,System.Byte[])"/> functions
             transfer data packed into 1, 2, or 4 bytes according to
             the word size in bits.
            
             For bits 1-8 there will be one byte per word.
             For bits 9-16 there will be two bytes per word.
             For bits 17-32 there will be four bytes per word.
            
             Multi-byte transfers are made in least significant byte first order.
            
             E.g. to transfer 32 11-bit words buf should contain 64 bytes
             and count should be 64.
            
             E.g. to transfer the 14 bit value 0x1ABC send the bytes 0xBC followed
             by 0x1A.
            
             The other bits in flags should be set to zero.
             </summary>
             <remarks>
             21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
              b  b  b  b  b  b  R  T  n  n  n  n  W  A u2 u1 u0 p2 p1 p0  m  m
             Mode POL PHA
              0    0   0
              1    0   1
              2    1   0
              3    1   1
             </remarks>
             <param name="spiChannel">0-1 (0-2 for the auxiliary SPI device)</param>
             <param name="baudRate">32K-125M (values above 30M are unlikely to work)</param>
             <param name="spiFlags">see below</param>
             <returns>Returns a handle (&gt;=0) if OK, otherwise PI_BAD_SPI_CHANNEL, PI_BAD_SPI_SPEED, PI_BAD_FLAGS, PI_NO_AUX_SPI, or PI_SPI_OPEN_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Spi.SpiClose(System.UIntPtr)">
             <summary>
             This functions closes the SPI device identified by the handle.
            
             </summary>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.Spi.SpiOpen(Unosquare.PiGpio.NativeEnums.SpiChannelId,System.Int32,Unosquare.PiGpio.NativeEnums.SpiFlags)"/></param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Spi.SpiRead(System.UIntPtr,System.Int32)">
             <summary>
             This function reads count bytes of data from the SPI
             device associated with the handle.
            
             PI_BAD_HANDLE, PI_BAD_SPI_COUNT, or PI_SPI_XFER_FAILED.
             </summary>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.Spi.SpiOpen(Unosquare.PiGpio.NativeEnums.SpiChannelId,System.Int32,Unosquare.PiGpio.NativeEnums.SpiFlags)"/></param>
             <param name="count">The max number of bytes to read</param>
             <returns>Returns the number of bytes transferred if OK, otherwise PI_BAD_HANDLE, PI_BAD_SPI_COUNT, or PI_SPI_XFER_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Spi.SpiWrite(System.UIntPtr,System.Byte[])">
             <summary>
             This function writes count bytes of data from buf to the SPI
             device associated with the handle.
            
             PI_BAD_HANDLE, PI_BAD_SPI_COUNT, or PI_SPI_XFER_FAILED.
             </summary>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.Spi.SpiOpen(Unosquare.PiGpio.NativeEnums.SpiChannelId,System.Int32,Unosquare.PiGpio.NativeEnums.SpiFlags)"/></param>
             <param name="buffer">the data bytes to write</param>
             <returns>Returns the number of bytes transferred if OK, otherwise PI_BAD_HANDLE, PI_BAD_SPI_COUNT, or PI_SPI_XFER_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Spi.SpiXfer(System.UIntPtr,System.Byte[])">
             <summary>
             This function transfers count bytes of data from txBuf to the SPI
             device associated with the handle. Simultaneously count bytes of
             data are read from the device and placed in rxBuf.
            
             PI_BAD_HANDLE, PI_BAD_SPI_COUNT, or PI_SPI_XFER_FAILED.
             </summary>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.Spi.SpiOpen(Unosquare.PiGpio.NativeEnums.SpiChannelId,System.Int32,Unosquare.PiGpio.NativeEnums.SpiFlags)"/></param>
             <param name="transmitBuffer">the data bytes to write</param>
             <returns>Returns the number of bytes transferred if OK, otherwise PI_BAD_HANDLE, PI_BAD_SPI_COUNT, or PI_SPI_XFER_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Spi.BbSPIOpen(Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32,Unosquare.PiGpio.NativeEnums.SoftSpiFlags)">
             <summary>
             This function selects a set of GPIO for bit banging SPI with
             a specified baud rate and mode.
            
             spiFlags consists of the least significant 22 bits.
            
             mm defines the SPI mode, defaults to 0
            
             p is 0 if CS is active low (default) and 1 for active high.
            
             T is 1 if the least significant bit is transmitted on MOSI first, the
             default (0) shifts the most significant bit out first.
            
             R is 1 if the least significant bit is received on MISO first, the
             default (0) receives the most significant bit first.
            
             The other bits in flags should be set to zero.
            
             If more than one device is connected to the SPI bus (defined by
             SCLK, MOSI, and MISO) each must have its own CS.
            
             </summary>
             <example>
             <code>
             bbSPIOpen(10, MISO, MOSI, SCLK, 10000, 0); // device 1
             bbSPIOpen(11, MISO, MOSI, SCLK, 20000, 3); // device 2
             </code>
             </example>
             <remarks>
             21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
              0  0  0  0  0  0  R  T  0  0  0  0  0  0  0  0  0  0  0  p  m  m
             Mode CPOL CPHA
              0    0    0
              1    0    1
              2    1    0
              3    1    1
             </remarks>
             <param name="csPin">0-31</param>
             <param name="misoPin">MISO 0-31</param>
             <param name="mosiPin">MOSI 0-31</param>
             <param name="clockPin">CLOCK 0-31</param>
             <param name="baudRate">50-250000</param>
             <param name="spiFlags">see below</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_USER_GPIO, PI_BAD_SPI_BAUD, or PI_GPIO_IN_USE.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Spi.BbSPIClose(Unosquare.PiGpio.NativeEnums.UserGpio)">
             <summary>
             This function stops bit banging SPI on a set of GPIO
             opened with <see cref="M:Unosquare.PiGpio.NativeMethods.Spi.BbSPIOpen(Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32,Unosquare.PiGpio.NativeEnums.SoftSpiFlags)"/>.
            
             </summary>
             <param name="csPin">0-31, the CS GPIO used in a prior call to <see cref="M:Unosquare.PiGpio.NativeMethods.Spi.BbSPIOpen(Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32,Unosquare.PiGpio.NativeEnums.SoftSpiFlags)"/></param>
             <returns>Returns 0 if OK, otherwise PI_BAD_USER_GPIO, or PI_NOT_SPI_GPIO.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Spi.BbSPIXfer(Unosquare.PiGpio.NativeEnums.UserGpio,System.Byte[],System.Byte[],System.UInt32)">
             <summary>
             This function executes a bit banged SPI transfer.
            
             </summary>
             <example>
             <code>
             // gcc -Wall -pthread -o bbSPIx_test bbSPIx_test.c -lpigpio
             // sudo ./bbSPIx_test
            
            
             #include &lt;stdio.h&gt;
            
             #include "pigpio.h"
            
             #define CE0 5
             #define CE1 6
             #define MISO 13
             #define MOSI 19
             #define SCLK 12
            
             int main(int argc, char *argv[])
             {
                int i, count, set_val, read_val;
                unsigned char inBuf[3];
                char cmd1[] = {0, 0};
                char cmd2[] = {12, 0};
                char cmd3[] = {1, 128, 0};
            
                if (gpioInitialise() &lt; 0)
                {
                   fprintf(stderr, "pigpio initialisation failed.\n");
                   return 1;
                }
            
                bbSPIOpen(CE0, MISO, MOSI, SCLK, 10000, 0); // MCP4251 DAC
                bbSPIOpen(CE1, MISO, MOSI, SCLK, 20000, 3); // MCP3008 ADC
            
                for (i=0; i&lt;256; i++)
                {
                   cmd1[1] = i;
            
                   count = bbSPIXfer(CE0, cmd1, (char *)inBuf, 2); // &gt; DAC
            
                   if (count == 2)
                   {
                      count = bbSPIXfer(CE0, cmd2, (char *)inBuf, 2); // &lt; DAC
            
                      if (count == 2)
                      {
                         set_val = inBuf[1];
            
                         count = bbSPIXfer(CE1, cmd3, (char *)inBuf, 3); // &lt; ADC
            
                         if (count == 3)
                         {
                            read_val = ((inBuf[1]&amp;3)&lt;&lt;8) | inBuf[2];
                            printf("%d %d\n", set_val, read_val);
                         }
                      }
                   }
                }
            
                bbSPIClose(CE0);
                bbSPIClose(CE1);
            
                gpioTerminate();
            
                return 0;
             }
             </code>
             </example>
             <param name="csPin">0-31 (as used in a prior call to <see cref="M:Unosquare.PiGpio.NativeMethods.Spi.BbSPIOpen(Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeEnums.UserGpio,Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32,Unosquare.PiGpio.NativeEnums.SoftSpiFlags)"/>)</param>
             <param name="inputBuffer">pointer to buffer to hold data to be sent</param>
             <param name="outputBuffer">pointer to buffer to hold returned data</param>
             <param name="count">size of data transfer, which is the same as the data received.</param>
             <returns>Returns &gt;= 0 if OK (the number of bytes read), otherwise PI_BAD_USER_GPIO, PI_NOT_SPI_GPIO or PI_BAD_POINTER.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Spi.BscXfer(Unosquare.PiGpio.NativeTypes.BscTransfer)">
             <summary>
             This function provides a low-level interface to the
             SPI/I2C Slave peripheral.  This peripheral allows the
             Pi to act as a slave device on an I2C or SPI bus.
            
             I can't get SPI to work properly.  I tried with a
             control word of 0x303 and swapped MISO and MOSI.
            
             The function sets the BSC mode, writes any data in
             the transmit buffer to the BSC transmit FIFO, and
             copies any data in the BSC receive FIFO to the
             receive buffer.
            
             To start a transfer set control (see below) and copy the bytes to
             be sent (if any) to txBuf and set the byte count in txCnt.
            
             Upon return rxCnt will be set to the number of received bytes placed
             in rxBuf.
            
             Note that the control word sets the BSC mode.  The BSC will stay in
             that mode until a different control word is sent.
            
             The BSC peripheral uses GPIO 18 (SDA) and 19 (SCL) in I2C mode
             and GPIO 18 (MOSI), 19 (SCLK), 20 (MISO), and 21 (CE) in SPI mode.  You
             need to swap MISO/MOSI between master and slave.
            
             When a zero control word is received GPIO 18-21 will be reset
             to INPUT mode.
            
             The returned function value is the status of the transfer (see below).
            
             If there was an error the status will be less than zero
             (and will contain the error code).
            
             The most significant word of the returned status contains the number
             of bytes actually copied from txBuf to the BSC transmit FIFO (may be
             less than requested if the FIFO already contained untransmitted data).
            
             control consists of the following bits.
            
             Bits 0-13 are copied unchanged to the BSC CR register.  See
             pages 163-165 of the Broadcom peripherals document for full
             details.
            
             aaaaaaa @ defines the I2C slave address (only relevant in I2C mode)
             IT      @ invert transmit status flags
             HC      @ enable host control
             TF      @ enable test FIFO
             IR      @ invert receive status flags
             RE      @ enable receive
             TE      @ enable transmit
             BK      @ abort operation and clear FIFOs
             EC      @ send control register as first I2C byte
             ES      @ send status register as first I2C byte
             PL      @ set SPI polarity high
             PH      @ set SPI phase high
             I2      @ enable I2C mode
             SP      @ enable SPI mode
             EN      @ enable BSC peripheral
            
             The returned status has the following format
            
             Bits 0-15 are copied unchanged from the BSC FR register.  See
             pages 165-166 of the Broadcom peripherals document for full
             details.
            
             SSSSS @ number of bytes successfully copied to transmit FIFO
             RRRRR @ number of bytes in receieve FIFO
             TTTTT @ number of bytes in transmit FIFO
             RB    @ receive busy
             TE    @ transmit FIFO empty
             RF    @ receive FIFO full
             TF    @ transmit FIFO full
             RE    @ receive FIFO empty
             TB    @ transmit busy
            
             The following example shows how to configure the BSC peripheral as
             an I2C slave with address 0x13 and send four bytes.
            
             </summary>
             <example>
             <code>
             bsc_xfer_t xfer;
            
             xfer.control = (0x13&lt;&lt;16) | 0x305;
            
             memcpy(xfer.txBuf, "ABCD", 4);
             xfer.txCnt = 4;
            
             status = bscXfer(&amp;xfer);
            
             if (status &gt;= 0)
             {
                // process transfer
             }
             </code>
             </example>
             <remarks>
            
             typedef struct
             {
                uint control;          // Write
                int rxCnt;                 // Read only
                char rxBuf[BSC_FIFO_SIZE]; // Read only
                int txCnt;                 // Write
                char txBuf[BSC_FIFO_SIZE]; // Write
             } bsc_xfer_t;
             22 21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
              a  a  a  a  a  a  a  -  - IT HC TF IR RE TE BK EC ES PL PH I2 SP EN
             20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
              S  S  S  S  S  R  R  R  R  R  T  T  T  T  T RB TE RF TF RE TB
             </remarks>
             <param name="bscTransfer">= a structure defining the transfer</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Spi.SpiOpenUnmanaged(Unosquare.PiGpio.NativeEnums.SpiChannelId,System.UInt32,Unosquare.PiGpio.NativeEnums.SpiFlags)">
             <summary>
             This function returns a handle for the SPI device on the channel.
             Data will be transferred at baud bits per second.  The flags may
             be used to modify the default behaviour of 4-wire operation, mode 0,
             active low chip select.
            
             An auxiliary SPI device is available on all models but the
             A and B and may be selected by setting the A bit in the flags.
             The auxiliary device has 3 chip selects and a selectable word
             size in bits.
            
             spiFlags consists of the least significant 22 bits.
            
             mm defines the SPI mode.
            
             Warning: modes 1 and 3 do not appear to work on the auxiliary device.
            
             px is 0 if CEx is active low (default) and 1 for active high.
            
             ux is 0 if the CEx GPIO is reserved for SPI (default) and 1 otherwise.
            
             A is 0 for the standard SPI device, 1 for the auxiliary SPI.
            
             W is 0 if the device is not 3-wire, 1 if the device is 3-wire.  Standard
             SPI device only.
            
             nnnn defines the number of bytes (0-15) to write before switching
             the MOSI line to MISO to read data.  This field is ignored
             if W is not set.  Standard SPI device only.
            
             T is 1 if the least significant bit is transmitted on MOSI first, the
             default (0) shifts the most significant bit out first.  Auxiliary SPI
             device only.
            
             R is 1 if the least significant bit is received on MISO first, the
             default (0) receives the most significant bit first.  Auxiliary SPI
             device only.
            
             bbbbbb defines the word size in bits (0-32).  The default (0)
             sets 8 bits per word.  Auxiliary SPI device only.
            
             The <see cref="M:Unosquare.PiGpio.NativeMethods.Spi.SpiRead(System.UIntPtr,System.Int32)"/>, <see cref="M:Unosquare.PiGpio.NativeMethods.Spi.SpiWrite(System.UIntPtr,System.Byte[])"/>, and <see cref="M:Unosquare.PiGpio.NativeMethods.Spi.SpiXfer(System.UIntPtr,System.Byte[])"/> functions
             transfer data packed into 1, 2, or 4 bytes according to
             the word size in bits.
            
             For bits 1-8 there will be one byte per word.
             For bits 9-16 there will be two bytes per word.
             For bits 17-32 there will be four bytes per word.
            
             Multi-byte transfers are made in least significant byte first order.
            
             E.g. to transfer 32 11-bit words buf should contain 64 bytes
             and count should be 64.
            
             E.g. to transfer the 14 bit value 0x1ABC send the bytes 0xBC followed
             by 0x1A.
            
             The other bits in flags should be set to zero.
             </summary>
             <remarks>
             21 20 19 18 17 16 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
              b  b  b  b  b  b  R  T  n  n  n  n  W  A u2 u1 u0 p2 p1 p0  m  m
             Mode POL PHA
              0    0   0
              1    0   1
              2    1   0
              3    1   1
             </remarks>
             <param name="spiChannel">0-1 (0-2 for the auxiliary SPI device)</param>
             <param name="baudRate">32K-125M (values above 30M are unlikely to work)</param>
             <param name="spiFlags">see below</param>
             <returns>Returns a handle (&gt;=0) if OK, otherwise PI_BAD_SPI_CHANNEL, PI_BAD_SPI_SPEED, PI_BAD_FLAGS, PI_NO_AUX_SPI, or PI_SPI_OPEN_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Spi.SpiReadUnmanaged(System.UIntPtr,System.Byte[],System.UInt32)">
             <summary>
             This function reads count bytes of data from the SPI
             device associated with the handle.
            
             PI_BAD_HANDLE, PI_BAD_SPI_COUNT, or PI_SPI_XFER_FAILED.
             </summary>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.Spi.SpiOpen(Unosquare.PiGpio.NativeEnums.SpiChannelId,System.Int32,Unosquare.PiGpio.NativeEnums.SpiFlags)"/></param>
             <param name="buffer">an array to receive the read data bytes</param>
             <param name="count">the number of bytes to read</param>
             <returns>Returns the number of bytes transferred if OK, otherwise PI_BAD_HANDLE, PI_BAD_SPI_COUNT, or PI_SPI_XFER_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Spi.SpiWriteUnmanaged(System.UIntPtr,System.Byte[],System.UInt32)">
             <summary>
             This function writes count bytes of data from buf to the SPI
             device associated with the handle.
            
             PI_BAD_HANDLE, PI_BAD_SPI_COUNT, or PI_SPI_XFER_FAILED.
             </summary>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.Spi.SpiOpen(Unosquare.PiGpio.NativeEnums.SpiChannelId,System.Int32,Unosquare.PiGpio.NativeEnums.SpiFlags)"/></param>
             <param name="buffer">the data bytes to write</param>
             <param name="count">the number of bytes to write</param>
             <returns>Returns the number of bytes transferred if OK, otherwise PI_BAD_HANDLE, PI_BAD_SPI_COUNT, or PI_SPI_XFER_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Spi.SpiXferUnmanaged(System.UIntPtr,System.Byte[],System.Byte[],System.UInt32)">
             <summary>
             This function transfers count bytes of data from txBuf to the SPI
             device associated with the handle.  Simultaneously count bytes of
             data are read from the device and placed in rxBuf.
            
             PI_BAD_HANDLE, PI_BAD_SPI_COUNT, or PI_SPI_XFER_FAILED.
             </summary>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.Spi.SpiOpen(Unosquare.PiGpio.NativeEnums.SpiChannelId,System.Int32,Unosquare.PiGpio.NativeEnums.SpiFlags)"/></param>
             <param name="transmitBuffer">the data bytes to write</param>
             <param name="receiveBuffer">the received data bytes</param>
             <param name="count">the number of bytes to transfer</param>
             <returns>Returns the number of bytes transferred if OK, otherwise PI_BAD_HANDLE, PI_BAD_SPI_COUNT, or PI_SPI_XFER_FAILED.</returns>
        </member>
        <member name="T:Unosquare.PiGpio.NativeMethods.Threads">
            <summary>
            PRovides threading and delay operations.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Threads.GpioSetTimerFuncEx(Unosquare.PiGpio.NativeEnums.TimerId,System.UInt32,Unosquare.PiGpio.NativeTypes.PiGpioTimerExDelegate,System.UIntPtr)">
             <summary>
             Registers a function to be called (a callback) every millis milliseconds.
            
             The function is passed the userData pointer.
            
             Only one of <see cref="M:Unosquare.PiGpio.NativeMethods.Threads.GpioSetTimerFunc(Unosquare.PiGpio.NativeEnums.TimerId,System.UInt32,Unosquare.PiGpio.NativeTypes.PiGpioTimerDelegate)"/> or <see cref="M:Unosquare.PiGpio.NativeMethods.Threads.GpioSetTimerFuncEx(Unosquare.PiGpio.NativeEnums.TimerId,System.UInt32,Unosquare.PiGpio.NativeTypes.PiGpioTimerExDelegate,System.UIntPtr)"/> can be
             registered per timer.
            
             See <see cref="M:Unosquare.PiGpio.NativeMethods.Threads.GpioSetTimerFunc(Unosquare.PiGpio.NativeEnums.TimerId,System.UInt32,Unosquare.PiGpio.NativeTypes.PiGpioTimerDelegate)"/> for further details.
             </summary>
             <param name="timer">0-9.</param>
             <param name="millisecondsTimeout">10-60000</param>
             <param name="callback">the function to call</param>
             <param name="userData">a pointer to arbitrary user data</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_TIMER, PI_BAD_MS, or PI_TIMER_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Threads.GpioSetTimerFunc(Unosquare.PiGpio.NativeEnums.TimerId,System.UInt32,Unosquare.PiGpio.NativeTypes.PiGpioTimerDelegate)">
             <summary>
             Registers a function to be called (a callback) every millis milliseconds.
            
             10 timers are supported numbered 0 to 9.
            
             One function may be registered per timer.
            
             The timer may be cancelled by passing NULL as the function.
            
             </summary>
             <example>
             <code>
             void bFunction(void)
             {
                printf("two seconds have elapsed");
             }
            
             // call bFunction every 2000 milliseconds
             gpioSetTimerFunc(0, 2000, bFunction);
             </code>
             </example>
             <param name="timer">0-9</param>
             <param name="periodMilliseconds">10-60000</param>
             <param name="callback">the function to call</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_TIMER, PI_BAD_MS, or PI_TIMER_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Threads.GpioStartThread(Unosquare.PiGpio.NativeTypes.PiGpioThreadDelegate,System.UIntPtr)">
             <summary>
             Starts a new thread of execution with <paramref name="callback"/> as the main routine.
            
             The function is passed the single argument arg.
            
             The thread can be cancelled by passing the pointer to pthread_t to
             <see cref="M:Unosquare.PiGpio.NativeMethods.Threads.GpioStopThread(System.UIntPtr)"/>.
            
             </summary>
             <example>
             <code>
             #include &lt;stdio.h&gt;
             #include &lt;pigpio.h&gt;
            
             void *myfunc(void *arg)
             {
                while (1)
                {
                   printf("%s", arg);
                   sleep(1);
                }
             }
            
             int main(int argc, char *argv[])
             {
                pthread_t *p1, *p2, *p3;
            
                if (gpioInitialise() &lt; 0) return 1;
            
                p1 = gpioStartThread(myfunc, "thread 1"); sleep(3);
            
                p2 = gpioStartThread(myfunc, "thread 2"); sleep(3);
            
                p3 = gpioStartThread(myfunc, "thread 3"); sleep(3);
            
                gpioStopThread(p3); sleep(3);
            
                gpioStopThread(p2); sleep(3);
            
                gpioStopThread(p1); sleep(3);
            
                gpioTerminate();
             }
             </code>
             </example>
             <param name="callback">the main function for the new thread</param>
             <param name="userData">a pointer to arbitrary user data</param>
             <returns>Returns a pointer to pthread_t if OK, otherwise NULL.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Threads.GpioStopThread(System.UIntPtr)">
             <summary>
             Cancels the thread pointed at by threadHandle.
            
             No value is returned.
            
             The thread to be stopped should have been started with <see cref="M:Unosquare.PiGpio.NativeMethods.Threads.GpioStartThread(Unosquare.PiGpio.NativeTypes.PiGpioThreadDelegate,System.UIntPtr)"/>.
             </summary>
             <param name="handle">a thread pointer returned by <see cref="M:Unosquare.PiGpio.NativeMethods.Threads.GpioStartThread(Unosquare.PiGpio.NativeTypes.PiGpioThreadDelegate,System.UIntPtr)"/></param>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Threads.GpioDelay(System.UInt32)">
            <summary>
            Delays for at least the number of microseconds specified by micros.
            Delays of 100 microseconds or less use busy waits.
            </summary>
            <param name="microSecs">the number of microseconds to sleep</param>
            <returns>Returns the actual length of the delay in microseconds.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Threads.GpioSleep(Unosquare.PiGpio.NativeEnums.TimeType,System.Int32,System.Int32)">
             <summary>
             Sleeps for the number of seconds and microseconds specified by seconds
             and micros.
            
             If timetype is PI_TIME_ABSOLUTE the sleep ends when the number of seconds
             and microseconds since the epoch (1st January 1970) has elapsed.  System
             clock changes are taken into account.
            
             If timetype is PI_TIME_RELATIVE the sleep is for the specified number
             of seconds and microseconds.  System clock changes do not effect the
             sleep length.
            
             For short delays (say, 50 microseonds or less) use <see cref="M:Unosquare.PiGpio.NativeMethods.Threads.GpioDelay(System.UInt32)"/>.
            
             </summary>
             <example>
             <code>
             gpioSleep(PI_TIME_RELATIVE, 2, 500000); // sleep for 2.5 seconds
            
             gpioSleep(PI_TIME_RELATIVE, 0, 100000); // sleep for 0.1 seconds
            
             gpioSleep(PI_TIME_RELATIVE, 60, 0);     // sleep for one minute
             </code>
             </example>
             <param name="timeType">0 (relative), 1 (absolute)</param>
             <param name="secs">seconds to sleep</param>
             <param name="microSecs">microseconds to sleep</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_TIMETYPE, PI_BAD_SECONDS, or PI_BAD_MICROS.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Threads.TimeSleep(System.Double)">
             <summary>
             Delay execution for a given number of seconds
            
             </summary>
             <param name="seconds">the number of seconds to sleep</param>
        </member>
        <member name="T:Unosquare.PiGpio.NativeMethods.Uart">
            <summary>
            Provides access to hardware based UART (Serial Port).
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Uart.SerOpen(System.String,Unosquare.PiGpio.NativeEnums.UartRate)">
             <summary>
             This function opens a serial device at a specified baud rate
             and with specified flags.  The device name must start with
             /dev/tty or /dev/serial.
            
             The baud rate must be one of 50, 75, 110, 134, 150,
             200, 300, 600, 1200, 1800, 2400, 4800, 9600, 19200,
             38400, 57600, 115200, or 230400.
            
             No flags are currently defined.  This parameter should be set to zero.
             </summary>
             <param name="sertty">the serial device to open</param>
             <param name="baud">the baud rate in bits per second, see below</param>
             <returns>Returns a handle (&gt;=0) if OK, otherwise PI_NO_HANDLE, or PI_SER_OPEN_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Uart.SerClose(System.UIntPtr)">
             <summary>
             This function closes the serial device associated with handle.
            
             </summary>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.Uart.SerOpen(System.String,Unosquare.PiGpio.NativeEnums.UartRate)"/></param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Uart.SerReadByte(System.UIntPtr)">
             <summary>
             This function reads a byte from the serial port associated with handle.
            
             If no data is ready PI_SER_READ_NO_DATA is returned.
             </summary>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.Uart.SerOpen(System.String,Unosquare.PiGpio.NativeEnums.UartRate)"/></param>
             <returns>Returns the read byte (&gt;=0) if OK, otherwise PI_BAD_HANDLE, PI_SER_READ_NO_DATA, or PI_SER_READ_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Uart.SerWriteByte(System.UIntPtr,System.UInt32)">
            <summary>
            This function writes bVal to the serial port associated with handle.
            PI_SER_WRITE_FAILED.
            </summary>
            <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.Uart.SerOpen(System.String,Unosquare.PiGpio.NativeEnums.UartRate)" /></param>
            <param name="byteValue">The byte value.</param>
            <returns>
            Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_SER_WRITE_FAILED.
            </returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Uart.SerRead(System.UIntPtr,System.Byte[],System.UInt32)">
             <summary>
             This function reads up count bytes from the the serial port
             associated with handle and writes them to buf.
            
             If no data is ready zero is returned.
             </summary>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.Uart.SerOpen(System.String,Unosquare.PiGpio.NativeEnums.UartRate)"/></param>
             <param name="buffer">an array to receive the read data</param>
             <param name="count">the maximum number of bytes to read</param>
             <returns>Returns the number of bytes read (&gt;0=) if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_SER_READ_NO_DATA.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Uart.SerWrite(System.UIntPtr,System.Byte[],System.UInt32)">
             <summary>
             This function writes count bytes from buf to the the serial port
             associated with handle.
            
             PI_SER_WRITE_FAILED.
             </summary>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.Uart.SerOpen(System.String,Unosquare.PiGpio.NativeEnums.UartRate)"/></param>
             <param name="buffer">the array of bytes to write</param>
             <param name="count">the number of bytes to write</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_HANDLE, PI_BAD_PARAM, or PI_SER_WRITE_FAILED.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Uart.SerDataAvailable(System.UIntPtr)">
             <summary>
             This function returns the number of bytes available
             to be read from the device associated with handle.
            
             otherwise PI_BAD_HANDLE.
             </summary>
             <param name="handle">&gt;=0, as returned by a call to <see cref="M:Unosquare.PiGpio.NativeMethods.Uart.SerOpen(System.String,Unosquare.PiGpio.NativeEnums.UartRate)"/></param>
             <returns>Returns the number of bytes of data available (&gt;=0) if OK, otherwise PI_BAD_HANDLE.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Uart.SerOpenUnmanaged(System.String,System.UInt32,System.UInt32)">
             <summary>
             This function opens a serial device at a specified baud rate
             and with specified flags.  The device name must start with
             /dev/tty or /dev/serial.
            
             The baud rate must be one of 50, 75, 110, 134, 150,
             200, 300, 600, 1200, 1800, 2400, 4800, 9600, 19200,
             38400, 57600, 115200, or 230400.
            
             No flags are currently defined.  This parameter should be set to zero.
             </summary>
             <param name="sertty">the serial device to open</param>
             <param name="baud">the baud rate in bits per second, see below</param>
             <param name="serFlags">0</param>
             <returns>Returns a handle (&gt;=0) if OK, otherwise PI_NO_HANDLE, or PI_SER_OPEN_FAILED.</returns>
        </member>
        <member name="T:Unosquare.PiGpio.NativeMethods.Utilities">
            <summary>
            Provides various utility methods to retrieve hardware and software versions,
            time, shell commands, and bitwise maskling.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.GpioHardwareRevision">
             <summary>
             If the hardware revision can not be found or is not a valid hexadecimal
             number the function returns 0.
            
             The hardware revision is the last few characters on the Revision line of
             /proc/cpuinfo.
            
             The revision number can be used to determine the assignment of GPIO
             to pins (see <see cref="T:Unosquare.PiGpio.NativeMethods.IO"/>).
            
             There are at least three types of board.
            
             Type 1 boards have hardware revision numbers of 2 and 3.
            
             Type 2 boards have hardware revision numbers of 4, 5, 6, and 15.
            
             Type 3 boards have hardware revision numbers of 16 or greater.
            
             for "Revision       : 0002" the function returns 2.
             for "Revision       : 000f" the function returns 15.
             for "Revision       : 000g" the function returns 0.
             </summary>
             <returns>Returns the hardware revision.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.GpioVersion">
            <summary>
            Returns the pigpio version number.
            </summary>
            <returns>Returns the pigpio version.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.GpioTick">
             <summary>
             Tick is the number of microseconds since system boot.
            
             As tick is an unsigned 32 bit quantity it wraps around after
             2^32 microseconds, which is approximately 1 hour 12 minutes.
            
             You don't need to worry about the wrap around as long as you
             take a tick (uint) from another tick, i.e. the following
             code will always provide the correct difference.
            
             </summary>
             <example>
             <code>
             uint startTick, endTick;
             int diffTick;
            
             startTick = gpioTick();
            
             // do some processing
            
             endTick = gpioTick();
            
             diffTick = endTick - startTick;
            
             printf("some processing took %d microseconds", diffTick);
             </code>
             </example>
             <returns>Returns the current system tick.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.GpioTime(Unosquare.PiGpio.NativeEnums.TimeType,System.Int32@,System.Int32@)">
             <summary>
             Retrieves the seconds and micros variables with the current time.
            
             If timetype is PI_TIME_ABSOLUTE updates seconds and micros with the
             number of seconds and microseconds since the epoch (1st January 1970).
            
             If timetype is PI_TIME_RELATIVE updates seconds and micros with the
             number of seconds and microseconds since the library was initialised.
            
             </summary>
             <example>
             <code>
             int secs, mics;
            
             // print the number of seconds since the library was started
             gpioTime(PI_TIME_RELATIVE, &amp;secs, &amp;mics);
             printf("library started %d.%03d seconds ago", secs, mics/1000);
             </code>
             </example>
             <param name="timeType">0 (relative), 1 (absolute)</param>
             <param name="seconds">a pointer to an int to hold seconds</param>
             <param name="microseconds">a pointer to an int to hold microseconds</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_TIMETYPE.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.TimeTime">
            <summary>
            Return the current time in seconds since the Epoch.
            </summary>
            <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.GetBitInBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Gets the bit value at the bit position.
            </summary>
            <param name="bitPos">bit index from the start of buf</param>
            <param name="buf">array of bits</param>
            <param name="numBits">number of valid bits in buf</param>
            <returns>Returns the value of the bit bitPos bits from the start of buf.  Returns 0 if bitPos is greater than or equal to numBits.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.PutBitInBytes(System.Int32,System.Byte[],System.Int32)">
             <summary>
             Sets the bit bitPos bits from the start of buf to bit.
            
             </summary>
             <param name="bitPos">bit index from the start of buf</param>
             <param name="buf">array of bits</param>
             <param name="bit">0-1, value to set</param>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.Shell(System.String,System.String)">
             <summary>
             This function uses the system call to execute a shell script
             with the given string as its parameter.
            
             The exit status of the system call is returned if OK, otherwise
             PI_BAD_SHELL_STATUS.
            
             scriptName must exist in /opt/pigpio/cgi and must be executable.
            
             The returned exit status is normally 256 times that set by the
             shell script exit function.  If the script can't be found 32512 will
             be returned.
            
             The following table gives some example returned statuses.
            
             Script exit status @ Returned system call status
             1                  @ 256
             5                  @ 1280
             10                 @ 2560
             200                @ 51200
             script not found   @ 32512
            
             </summary>
             <example>
             <code>
             // pass two parameters, hello and world
             status = shell("scr1", "hello world");
            
             // pass three parameters, hello, string with spaces, and world
             status = shell("scr1", "hello 'string with spaces' world");
            
             // pass one parameter, hello string with spaces world
             status = shell("scr1", "\"hello string with spaces world\"");
             </code>
             </example>
             <remarks>
                           '-' and '_' are allowed in the name
             </remarks>
             <param name="scriptName">the name of the script, only alphanumeric characters,</param>
             <param name="scriptString">the string to pass to the script</param>
             <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.GpioSetSignalFunc(System.UInt32,Unosquare.PiGpio.NativeTypes.PiGpioSignalDelegate)">
             <summary>
             Registers a function to be called (a callback) when a signal occurs.
            
             The function is passed the signal number.
            
             One function may be registered per signal.
            
             The callback may be cancelled by passing NULL.
            
             By default all signals are treated as fatal and cause the library
             to call gpioTerminate and then exit.
             </summary>
             <param name="signalNumber">0-63</param>
             <param name="f">the callback function</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_signalNumber.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.GpioSetSignalFuncEx(System.UInt32,Unosquare.PiGpio.NativeTypes.PiGpioSignalExDelegate,System.UIntPtr)">
             <summary>
             Registers a function to be called (a callback) when a signal occurs.
            
             The function is passed the signal number and the userData pointer.
            
             Only one of gpioSetSignalFunc or gpioSetSignalFuncEx can be
             registered per signal.
            
             See gpioSetSignalFunc for further details.
             </summary>
             <param name="signalNumber">0-63</param>
             <param name="callback">the callback function</param>
             <param name="userData">a pointer to arbitrary user data</param>
             <returns>Returns 0 if OK, otherwise PI_BAD_signalNumber.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.RaiseSignal(System.Int32)">
            <summary>
            Raises the given UNIX signal numner (0 to 63).
            </summary>
            <param name="signalNumber">The UNIX signal number from 0 to 63.</param>
            <returns>0 for success</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.ApplyBits(System.Int32,System.Boolean,System.Int32[])">
            <summary>
            Applies bit values according to the indexes.
            </summary>
            <param name="flags">The flags.</param>
            <param name="value">True to set the 1 bits. False to clear the 1 bits</param>
            <param name="indexes">The indexes.</param>
            <returns>The applied bitmask</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.SetBit(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets a bit at the given positon index from right to left
            </summary>
            <param name="flags">The flags.</param>
            <param name="index">The index.</param>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns>The flags with the bit set at the given position</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.SetBit(System.UInt32,System.Int32,System.Boolean)">
            <summary>
            Sets a bit at the given positon index from right to left
            </summary>
            <param name="flags">The flags.</param>
            <param name="index">The index.</param>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns>The flags with the bit set at the given position</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.SetBit(System.Int16,System.Int32,System.Boolean)">
            <summary>
            Sets a bit at the given positon index from right to left
            </summary>
            <param name="flags">The flags.</param>
            <param name="index">The index.</param>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns>The flags with the bit set at the given position</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.SetBit(System.UInt16,System.Int32,System.Boolean)">
            <summary>
            Sets a bit at the given positon index from right to left
            </summary>
            <param name="flags">The flags.</param>
            <param name="index">The index.</param>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns>The flags with the bit set at the given position</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.SetBit(System.Byte,System.Int32,System.Boolean)">
            <summary>
            Sets a bit at the given positon index from right to left
            </summary>
            <param name="flags">The flags.</param>
            <param name="index">The index.</param>
            <param name="value">if set to <c>true</c> [value].</param>
            <returns>The flags with the bit set at the given position</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.GetBit(System.Int32,System.Int32)">
            <summary>
            Gets a bit at the given positon index from right to left
            </summary>
            <param name="flags">The flags.</param>
            <param name="index">The index.</param>
            <returns>The value of the bit at the given position index</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.GetBit(System.UInt32,System.Int32)">
            <summary>
            Gets a bit at the given positon index from right to left
            </summary>
            <param name="flags">The flags.</param>
            <param name="index">The index.</param>
            <returns>The value of the bit at the given position index</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.GetBit(System.Int16,System.Int32)">
            <summary>
            Gets a bit at the given positon index from right to left
            </summary>
            <param name="flags">The flags.</param>
            <param name="index">The index.</param>
            <returns>The value of the bit at the given position index</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.GetBit(System.UInt16,System.Int32)">
            <summary>
            Gets a bit at the given positon index from right to left
            </summary>
            <param name="flags">The flags.</param>
            <param name="index">The index.</param>
            <returns>The value of the bit at the given position index</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Utilities.GetBit(System.Byte,System.Int32)">
            <summary>
            Gets a bit at the given positon index from right to left
            </summary>
            <param name="flags">The flags.</param>
            <param name="index">The index.</param>
            <returns>The value of the bit at the given position index</returns>
        </member>
        <member name="T:Unosquare.PiGpio.NativeMethods.Waves">
            <summary>
            Provides Waveform methods for the pigpio library. These are methods to send pulses on the pins
            with precise timing.
            </summary>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveClear">
             <summary>
             This function clears all waveforms and any data added by calls to the
             GpioWaveAdd functions.
            
             </summary>
             <example>
             <code>
             gpioWaveClear();
             </code>
             </example>
             <returns>Returns 0 if OK.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveAddNew">
             <summary>
             This function starts a new empty waveform.
            
             You wouldn't normally need to call this function as it is automatically
             called after a waveform is created with the <see cref="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveCreate"/> function.
            
             </summary>
             <example>
             <code>
             gpioWaveAddNew();
             </code>
             </example>
             <returns>Returns 0 if OK.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveAddGeneric(System.UInt32,Unosquare.PiGpio.NativeTypes.GpioPulse[])">
             <summary>
             This function adds a number of pulses to the current waveform.
            
             The pulses are interleaved in time order within the existing waveform
             (if any).
            
             Merging allows the waveform to be built in parts, that is the settings
             for GPIO#1 can be added, and then GPIO#2 etc.
            
             If the added waveform is intended to start after or within the existing
             waveform then the first pulse should consist of a delay.
            
             </summary>
             <example>
             <code>
             // Construct and send a 30 microsecond square wave.
            
             gpioSetMode(gpio, PI_OUTPUT);
            
             pulse[0].gpioOn = (1&lt;&lt;gpio);
             pulse[0].gpioOff = 0;
             pulse[0].usDelay = 15;
            
             pulse[1].gpioOn = 0;
             pulse[1].gpioOff = (1&lt;&lt;gpio);
             pulse[1].usDelay = 15;
            
             gpioWaveAddNew();
            
             gpioWaveAddGeneric(2, pulse);
            
             wave_id = gpioWaveCreate();
            
             if (wave_id &gt;= 0)
             {
                gpioWaveTxSend(wave_id, PI_WAVE_MODE_REPEAT);
            
                // Transmit for 30 seconds.
            
                sleep(30);
            
                gpioWaveTxStop();
             }
             else
             {
                // Wave create failed.
             }
             </code>
             </example>
             <param name="numPulses">the number of pulses</param>
             <param name="pulses">an array of pulses</param>
             <returns>Returns the new total number of pulses in the current waveform if OK, otherwise PI_TOO_MANY_PULSES.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveAddSerial(Unosquare.PiGpio.NativeEnums.UserGpio,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Byte[])">
             <summary>
             This function adds a waveform representing serial data to the
             existing waveform (if any).  The serial data starts offset
             microseconds from the start of the waveform.
            
             NOTES:
            
             The serial data is formatted as one start bit, data_bits data bits, and
             stop_bits/2 stop bits.
            
             It is legal to add serial data streams with different baud rates to
             the same waveform.
            
             numBytes is the number of bytes of data in str.
            
             The bytes required for each character depend upon data_bits.
            
             For data_bits 1-8 there will be one byte per character.
             For data_bits 9-16 there will be two bytes per character.
             For data_bits 17-32 there will be four bytes per character.
            
             </summary>
             <example>
             <code>
             #define MSG_LEN 8
            
             int i;
             char *str;
             char data[MSG_LEN];
            
             str = "Hello world!";
            
             gpioWaveAddSerial(4, 9600, 8, 2, 0, strlen(str), str);
            
             for (i=0; i&lt;MSG_LEN; i++) data[i] = i;
            
             // Data added is offset 1 second from the waveform start.
             gpioWaveAddSerial(4, 9600, 8, 2, 1000000, MSG_LEN, data);
             </code>
             </example>
             <param name="userGpio">0-31</param>
             <param name="baudRate">50-1000000</param>
             <param name="dataBits">1-32</param>
             <param name="stopBits">2-8</param>
             <param name="offset">&gt;=0</param>
             <param name="numBytes">&gt;=1</param>
             <param name="str">an array of chars (which may contain nulls)</param>
             <returns>Returns the new total number of pulses in the current waveform if OK, otherwise PI_BAD_USER_GPIO, PI_BAD_WAVE_BAUD, PI_BAD_DATABITS, PI_BAD_STOPBITS, PI_TOO_MANY_CHARS, PI_BAD_SER_OFFSET, or PI_TOO_MANY_PULSES.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveCreate">
             <summary>
             This function creates a waveform from the data provided by the prior
             calls to the GpioWaveAdd* functions.  Upon success a wave id
             greater than or equal to 0 is returned, otherwise PI_EMPTY_WAVEFORM,
             PI_TOO_MANY_CBS, PI_TOO_MANY_OOL, or PI_NO_WAVEFORM_ID.
            
             The data provided by the GpioWaveAdd* functions is consumed by this
             function.
            
             As many waveforms may be created as there is space available.  The
             wave id is passed to <see cref="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveTxSend(System.UInt32,Unosquare.PiGpio.NativeEnums.WaveMode)"/> to specify the waveform to transmit.
            
             Normal usage would be
            
             Step 1. <see cref="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveClear"/> to clear all waveforms and added data.
            
             Step 2. GpioWaveAdd* calls to supply the waveform data.
            
             Step 3. <see cref="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveCreate"/> to create the waveform and get a unique id
            
             Repeat steps 2 and 3 as needed.
            
             Step 4. <see cref="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveTxSend(System.UInt32,Unosquare.PiGpio.NativeEnums.WaveMode)"/> with the id of the waveform to transmit.
            
             A waveform comprises one of more pulses.  Each pulse consists of a
             <see cref="T:Unosquare.PiGpio.NativeTypes.GpioPulse"/> structure.
            
             The fields specify
            
             1) the GPIO to be switched on at the start of the pulse.
             2) the GPIO to be switched off at the start of the pulse.
             3) the delay in microseconds before the next pulse.
            
             Any or all the fields can be zero.  It doesn't make any sense to
             set all the fields to zero (the pulse will be ignored).
            
             When a waveform is started each pulse is executed in order with the
             specified delay between the pulse and the next.
            
             PI_NO_WAVEFORM_ID, PI_TOO_MANY_CBS, or PI_TOO_MANY_OOL.
             </summary>
             <remarks>
             typedef struct
             {
                uint gpioOn;
                uint gpioOff;
                uint usDelay;
             } gpioPulse_t;
             </remarks>
             <returns>Returns the new waveform id if OK, otherwise PI_EMPTY_WAVEFORM, PI_NO_WAVEFORM_ID, PI_TOO_MANY_CBS, or PI_TOO_MANY_OOL.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveDelete(System.UInt32)">
             <summary>
             This function deletes the waveform with id <paramref name="waveId"/>.
            
             The wave is flagged for deletion.  The resources used by the wave
             will only be reused when either of the following apply.
            
             - all waves with higher numbered wave ids have been deleted or have
             been flagged for deletion.
            
             - a new wave is created which uses exactly the same resources as
             the current wave (see the C source for gpioWaveCreate for details).
            
             Wave ids are allocated in order, 0, 1, 2, etc.
            
             </summary>
             <param name="waveId">&gt;=0, as returned by <see cref="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveCreate"/></param>
             <returns>Returns 0 if OK, otherwise PI_BAD_WAVE_ID.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveTxSend(System.UInt32,Unosquare.PiGpio.NativeEnums.WaveMode)">
             <summary>
             This function transmits the waveform with id <paramref name="waveId"/>.  The mode
             determines whether the waveform is sent once or cycles endlessly.
             The SYNC variants wait for the current waveform to reach the
             end of a cycle or finish before starting the new waveform.
            
             WARNING: bad things may happen if you delete the previous
             waveform before it has been synced to the new waveform.
            
             NOTE: Any hardware PWM started by <see cref="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioHardwarePwm(Unosquare.PiGpio.NativeEnums.SystemGpio,System.UInt32,System.UInt32)"/> will be cancelled.
            
             otherwise PI_BAD_WAVE_ID, or PI_BAD_WAVE_MODE.
             </summary>
             <remarks>
                        PI_WAVE_MODE_ONE_SHOT_SYNC, PI_WAVE_MODE_REPEAT_SYNC
             </remarks>
             <param name="waveId">&gt;=0, as returned by <see cref="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveCreate"/></param>
             <param name="waveMode">PI_WAVE_MODE_ONE_SHOT, PI_WAVE_MODE_REPEAT, or one of their SYNC variants</param>
             <returns>Returns the number of DMA control blocks in the waveform if OK, otherwise PI_BAD_WAVE_ID, or PI_BAD_WAVE_MODE.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveChain(System.Byte[],System.UInt32)">
             <summary>
             This function transmits a chain of waveforms.
            
             NOTE: Any hardware PWM started by <see cref="M:Unosquare.PiGpio.NativeMethods.Pwm.GpioHardwarePwm(Unosquare.PiGpio.NativeEnums.SystemGpio,System.UInt32,System.UInt32)"/> will be cancelled.
            
             The waves to be transmitted are specified by the contents of buf
             which contains an ordered list of wave Ids and optional command
             codes and related data.
            
             Each wave is transmitted in the order specified.  A wave may
             occur multiple times per chain.
            
             A blocks of waves may be transmitted multiple times by using
             the loop commands. The block is bracketed by loop start and
             end commands.  Loops may be nested.
            
             Delays between waves may be added with the delay command.
            
             The following command codes are supported:
            
             Name         @ Cmd &amp; Data @ Meaning
             Loop Start   @ 255 0      @ Identify start of a wave block
             Loop Repeat  @ 255 1 x y  @ loop x + y*256 times
             Delay        @ 255 2 x y  @ delay x + y*256 microseconds
             Loop Forever @ 255 3      @ loop forever
            
             If present Loop Forever must be the last entry in the chain.
            
             The code is currently dimensioned to support a chain with roughly
             600 entries and 20 loop counters.
            
             </summary>
             <example>
             <code>
             #include &lt;stdio.h&gt;
             #include &lt;pigpio.h&gt;
            
             #define WAVES 5
             #define GPIO 4
            
             int main(int argc, char *argv[])
             {
                int i, wid[WAVES];
            
                if (gpioInitialise()&lt;0) return -1;
            
                gpioSetMode(GPIO, PI_OUTPUT);
            
                printf("start piscope, press return"); getchar();
            
                for (i=0; i&lt;WAVES; i++)
                {
                   gpioWaveAddGeneric(2, (gpioPulse_t[])
                      {{1&lt;&lt;GPIO, 0,        20},
                       {0, 1&lt;&lt;GPIO, (i+1)*200}});
            
                   wid[i] = gpioWaveCreate();
                }
            
                gpioWaveChain((char []) {
                   wid[4], wid[3], wid[2],       // transmit waves 4+3+2
                   255, 0,                       // loop start
                      wid[0], wid[0], wid[0],    // transmit waves 0+0+0
                      255, 0,                    // loop start
                         wid[0], wid[1],         // transmit waves 0+1
                         255, 2, 0x88, 0x13,     // delay 5000us
                      255, 1, 30, 0,             // loop end (repeat 30 times)
                      255, 0,                    // loop start
                         wid[2], wid[3], wid[0], // transmit waves 2+3+0
                         wid[3], wid[1], wid[2], // transmit waves 3+1+2
                      255, 1, 10, 0,             // loop end (repeat 10 times)
                   255, 1, 5, 0,                 // loop end (repeat 5 times)
                   wid[4], wid[4], wid[4],       // transmit waves 4+4+4
                   255, 2, 0x20, 0x4E,           // delay 20000us
                   wid[0], wid[0], wid[0],       // transmit waves 0+0+0
            
                   }, 46);
            
                while (gpioWaveTxBusy()) time_sleep(0.1);
            
                for (i=0; i&lt;WAVES; i++) gpioWaveDelete(wid[i]);
            
                printf("stop piscope, press return"); getchar();
            
                gpioTerminate();
             }
             </code>
             </example>
             <param name="buffer">pointer to the wave_ids and optional command codes</param>
             <param name="bufferSize">the number of bytes in buf</param>
             <returns>Returns 0 if OK, otherwise PI_CHAIN_NESTING, PI_CHAIN_LOOP_CNT, PI_BAD_CHAIN_LOOP, PI_BAD_CHAIN_CMD, PI_CHAIN_COUNTER, PI_BAD_CHAIN_DELAY, PI_CHAIN_TOO_BIG, or PI_BAD_WAVE_ID.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveTxAt">
             <summary>
             This function returns the id of the waveform currently being
             transmitted.
            
             PI_WAVE_NOT_FOUND (9998) - transmitted wave not found.
             PI_NO_TX_WAVE (9999) - no wave being transmitted.
             </summary>
             <returns>Returns the waveform id or one of the following special values:</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveTxBusy">
             <summary>
             This function checks to see if a waveform is currently being
             transmitted.
            
             </summary>
             <returns>Returns 1 if a waveform is currently being transmitted, otherwise 0.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveTxStop">
             <summary>
             This function aborts the transmission of the current waveform.
            
             This function is intended to stop a waveform started in repeat mode.
             </summary>
             <returns>Returns 0 if OK.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveGetMicros">
            <summary>
            This function returns the length in microseconds of the current
            waveform.
            </summary>
            <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveGetHighMicros">
            <summary>
            This function returns the length in microseconds of the longest waveform
            created since <see cref="M:Unosquare.PiGpio.NativeMethods.Setup.GpioInitialise"/> was called.
            </summary>
            <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveGetMaxMicros">
            <summary>
            This function returns the maximum possible size of a waveform in
            microseconds.
            </summary>
            <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveGetPulses">
            <summary>
            This function returns the length in pulses of the current waveform.
            </summary>
            <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveGetHighPulses">
            <summary>
            This function returns the length in pulses of the longest waveform
            created since <see cref="M:Unosquare.PiGpio.NativeMethods.Setup.GpioInitialise"/> was called.
            </summary>
            <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveGetMaxPulses">
            <summary>
            This function returns the maximum possible size of a waveform in pulses.
            </summary>
            <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveGetCbs">
            <summary>
            This function returns the length in DMA control blocks of the current
            waveform.
            </summary>
            <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveGetHighCbs">
            <summary>
            This function returns the length in DMA control blocks of the longest
            waveform created since <see cref="M:Unosquare.PiGpio.NativeMethods.Setup.GpioInitialise"/> was called.
            </summary>
            <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="M:Unosquare.PiGpio.NativeMethods.Waves.GpioWaveGetMaxCbs">
            <summary>
            This function returns the maximum possible size of a waveform in DMA
            control blocks.
            </summary>
            <returns>The result code. 0 for success. See the <see cref="T:Unosquare.PiGpio.NativeEnums.ResultCode"/> enumeration.</returns>
        </member>
        <member name="T:Unosquare.PiGpio.NativeTypes.BscTransfer">
            <summary>
            A data structure representing a BSC transfer.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.BscTransfer.Control">
            <summary>
            Write
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.BscTransfer.ReceiveCount">
            <summary>
            The rx count
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.BscTransfer.ReceiveBuffer">
            <summary>
            Read only
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.BscTransfer.SendCount">
            <summary>
            Write
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.BscTransfer.SendBuffer">
            <summary>
            Write
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeTypes.PiGpioThreadDelegate">
            <summary>
            Defines a signature for a pthread worker.
            Use built-in CLR <see cref="T:System.Threading.Thread"/> instead.
            </summary>
            <param name="userData">The user data.</param>
        </member>
        <member name="T:Unosquare.PiGpio.NativeTypes.PiGpioAlertDelegate">
            <summary>
            Defines a signature for alert callbacks. Conatins the pin number, a level change and a microseconds
            timestamp. The timestamp wraps around every ~72 minutes.
            Unlike Interrupts, alerts are generated by continuously sampling the value of the pin.
            </summary>
            <param name="userGpio">The user gpio.</param>
            <param name="levelChange">The level change.</param>
            <param name="timeMicrosecs">The microseconds timestamp.</param>
        </member>
        <member name="T:Unosquare.PiGpio.NativeTypes.PiGpioAlertExDelegate">
            <summary>
            Defines a signature for alert callbacks. Conatins the pin number, a level change and a microseconds
            timestamp. The timestamp wraps around every ~72 minutes.
            Unlike Interrupts, alerts are generated by continuously sampling the value of the pin.
            </summary>
            <param name="userGpio">The user gpio.</param>
            <param name="levelChange">The level change.</param>
            <param name="timeMicrosecs">The time microsecs.</param>
            <param name="userData">The user data.</param>
        </member>
        <member name="T:Unosquare.PiGpio.NativeTypes.PiGpioIsrDelegate">
            <summary>
            Defines a signature for ISR callbacks. Conatins the pin number, a level change and a microseconds
            timestamp. The timestamp wraps around every ~72 minutes.
            Unlike alerts, interrupts are generated with level changes. Make sure you hookup pull-down/pull-up resitors
            for interrupts to work as they depend on current flowing through the pin in order to fire consistently.
            </summary>
            <param name="gpio">The gpio.</param>
            <param name="level">The level.</param>
            <param name="timeMicrosecs">The time microsecs.</param>
        </member>
        <member name="T:Unosquare.PiGpio.NativeTypes.PiGpioIsrExDelegate">
            <summary>
            Defines a signature for ISR callbacks. Conatins the pin number, a level change and a microseconds
            timestamp. The timestamp wraps around every ~72 minutes.
            Unlike alerts, interrupts are generated with level changes. Make sure you hookup pull-down/pull-up resitors
            for interrupts to work as they depend on current flowing through the pin in order to fire consistently.
            </summary>
            <param name="gpio">The gpio.</param>
            <param name="level">The level.</param>
            <param name="timeMicrosecs">The time microsecs.</param>
            <param name="userData">The user data.</param>
        </member>
        <member name="T:Unosquare.PiGpio.NativeTypes.PiGpioTimerDelegate">
            <summary>
            Defines a callback for a pigpio library timer
            Use built-in CLR <see cref="T:System.Threading.Timer"/> instead.
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeTypes.PiGpioTimerExDelegate">
            <summary>
            Defines a callback for a pigpio library timer
            Use built-in CLR <see cref="T:System.Threading.Timer"/> instead.
            </summary>
            <param name="userData">The user data.</param>
        </member>
        <member name="T:Unosquare.PiGpio.NativeTypes.PiGpioEventDelegate">
            <summary>
            Callback for when an pigpio library event firing. This represents an event model internal
            to the pigpio library. Use the buil-in <see cref="T:System.EventHandler"/> CLR constructs instead.
            </summary>
            <param name="eventId">The event identifier.</param>
            <param name="timeMicrosecs">The time microsecs.</param>
        </member>
        <member name="T:Unosquare.PiGpio.NativeTypes.PiGpioEventExDelegate">
            <summary>
            Callback for when an pigpio library event firing. This represents an event model internal
            to the pigpio library. Use the buil-in <see cref="T:System.EventHandler"/> CLR constructs instead.
            </summary>
            <param name="eventId">The event identifier.</param>
            <param name="tick">The tick.</param>
            <param name="userData">The user data.</param>
        </member>
        <member name="T:Unosquare.PiGpio.NativeTypes.PiGpioSignalDelegate">
            <summary>
            Defines a callback to be executed when the OS sends a signal
            </summary>
            <param name="signalNumber">The OS signal number.</param>
        </member>
        <member name="T:Unosquare.PiGpio.NativeTypes.PiGpioSignalExDelegate">
            <summary>
            Defines a callback to be executed when the OS sends a signal
            </summary>
            <param name="signalNumber">The OS signal number.</param>
            <param name="userData">The user data.</param>
        </member>
        <member name="T:Unosquare.PiGpio.NativeTypes.PiGpioGetSamplesDelegate">
            <summary>
            Bulk pin sampling delegate. Not used in the managed model of this library.
            </summary>
            <param name="samples">The samples.</param>
            <param name="numSamples">The number samples.</param>
        </member>
        <member name="T:Unosquare.PiGpio.NativeTypes.PiGpioGetSamplesExDelegate">
            <summary>
            Bulk pin sampling delegate. Not used in the managed model of this library.
            </summary>
            <param name="samples">The samples.</param>
            <param name="numSamples">The number samples.</param>
            <param name="userData">The user data.</param>
        </member>
        <member name="T:Unosquare.PiGpio.NativeTypes.GpioPulse">
            <summary>
            A pulse representing microseconds in the high position,
            microseconds in the low position, and a delay measure.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.GpioPulse.GpioOn">
            <summary>
            The GPIO pins to turn on
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.GpioPulse.GpioOff">
            <summary>
            The gpio pins to turn off
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.GpioPulse.DurationMicroSecs">
            <summary>
            The duration in microseconds
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeTypes.GpioSample">
            <summary>
            Represents sGPIO ample data
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.GpioSample.Tick">
            <summary>
            The ticks in microseconds. Wraps every ~72 minutes.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.GpioSample.Level">
            <summary>
            The level (0 or 1)
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeTypes.I2CMessageSegment">
            <summary>
            An I2C Message Segment
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.I2CMessageSegment.Address">
            <summary>
            Slave address
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.I2CMessageSegment.Flags">
            <summary>
            The flags
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.I2CMessageSegment.Length">
            <summary>
            msg length
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.I2CMessageSegment.Buffer">
            <summary>
            pointer to msg data
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeTypes.RawCBS">
            <summary>
            The Raw CBS (Linux Control Block)
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawCBS.Info">
            <summary>
            The information
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawCBS.Source">
            <summary>
            The source
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawCBS.Destination">
            <summary>
            The destination
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawCBS.Length">
            <summary>
            The length
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawCBS.Stride">
            <summary>
            The stride
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawCBS.Next">
            <summary>
            The next
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawCBS.Pad">
            <summary>
            The pad
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeTypes.RawSpiData">
            <summary>
            Represents Raw SPI channel data
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawSpiData.ClockPin">
            <summary>
            GPIO for clock
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawSpiData.MosiPin">
            <summary>
            GPIO for MOSI
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawSpiData.MisoPin">
            <summary>
            GPIO for MISO
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawSpiData.SlaveSelectOffState">
            <summary>
            slave select off state
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawSpiData.SlaveSelectDelayMicroseconds">
            <summary>
            delay after slave select
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawSpiData.ClockOffState">
            <summary>
            clock off state
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawSpiData.ClockPhase">
            <summary>
            clock phase
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawSpiData.ClockMicroseconds">
            <summary>
            clock micros
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeTypes.RawWave">
            <summary>
            Represents raw waveform data
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawWave.GpioOn">
            <summary>
            The gpio on
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawWave.GpioOff">
            <summary>
            The gpio off
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawWave.DelayMicroseconds">
            <summary>
            The delay microseconds
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawWave.Flags">
            <summary>
            The flags
            </summary>
        </member>
        <member name="T:Unosquare.PiGpio.NativeTypes.RawWaveInformation">
            <summary>
            Represents raw waveform information
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawWaveInformation.BottomCB">
            <summary>
            first CB used by wave
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawWaveInformation.TopCB">
            <summary>
            last CB used by wave
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawWaveInformation.BottomOOL">
            <summary>
            last OOL used by wave
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawWaveInformation.TopOOL">
            <summary>
            first OOL used by wave
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawWaveInformation.Deleted">
            <summary>
            Gets or sets the deleted.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawWaveInformation.NumberCB">
            <summary>
            Gets or sets the number cb.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawWaveInformation.NumberBOOL">
            <summary>
            Gets or sets the number bool.
            </summary>
        </member>
        <member name="P:Unosquare.PiGpio.NativeTypes.RawWaveInformation.NumberTOOL">
            <summary>
            Gets or sets the number tool.
            </summary>
        </member>
    </members>
</doc>
